// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.archivist.test;

using fuchsia.component;

type ExitStatus = flexible enum {
    /// Just wait for a component to stop, but don't care about the exit status.
    ANY = 0;
    /// Wait for a component to crash.
    CRASH = 1;
    /// Wait for a component to exit cleanly.
    CLEAN = 2;
};

/// Provides functionality to await on specific stop events on components.
@discoverable
open protocol StopWatcher {
    /// Subscribes to an underlying event stream notifying the server when a
    /// component identified by the given moniker stops with the given status.
    ///
    /// Returns the watcher protocol that can be used to actually get the
    /// notification. This is done so that we ensure that the subscription is
    /// established before the component could even crash and prevent the client
    /// from missing any event.
    flexible WatchComponent(struct {
        moniker string:fuchsia.component.MAX_MONIKER_LENGTH;
        expected_exit ExitStatus;
    }) -> (resource struct {
        client client_end:StopWaiter;
    });
};

/// Provides functionality to await on specific stop events on components.
open protocol StopWaiter {
    /// Returns when the component this subscription is about stops. This will
    /// always resolve once it did for the first time it called more than once.
    flexible Wait() -> ();
};
