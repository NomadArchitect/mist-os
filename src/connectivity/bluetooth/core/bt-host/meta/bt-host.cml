// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    include: [ "inspect/client.shard.cml" ],
    program: {
        // Use the built-in ELF runner.
        runner: "elf",

        // The binary to run for this component.
        binary: "bin/bt_host",

        // Subscribe to component lifecycle events
        lifecycle: { stop_event: "notify" },

        // Enable stdout logging
        forward_stderr_to: "log",
        forward_stdout_to: "log",
    },
    use: [
        {
            // If the flag is true, then we have the option of using legacy pairing. This will only
            // occur if the peer does NOT support SSP. If the flag is false and the peer does not
            // support SSP, pairing will fail. If the peer supports SSP, then SSP will be used
            // regardless of what value this flag is set to.
            config: "fuchsia.bluetooth.LegacyPairing",
            key: "legacy_pairing_enabled",
            type: "bool",
        },
        {
            directory: "dev-bt-hci",
            rights: [ "r*" ],
            path: "/dev/class/bt-hci",
        },
        {
            protocol: [ "fuchsia.bluetooth.host.Receiver" ],
        },

        // We can't use the LogSink shard because this is compiled out-of-tree.
        // Dictionaries aren't yet available in the SDK, so nothing out-of-tree
        // can use the shard which is being switched over to dictionaries.
        { protocol: "fuchsia.logger.LogSink" },
    ],
    offer: [
        {
            protocol: "fuchsia.logger.LogSink",
            from: "parent",
            to: "all",
        },
    ],
    config: {
        device_path: {
            type: "string",
            max_size: 512,
            mutability: [ "parent" ],
        },
    },
}
