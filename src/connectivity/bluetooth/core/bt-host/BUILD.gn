# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Note, this file is not copybara'd to downstream Pigweed.

import("//build/bazel/bazel_fuchsia_package.gni")
import("//build/bazel/bazel_fuchsia_test_package.gni")
import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/fuzz.gni")
import("//build/packages/prebuilt_package.gni")
import("//src/connectivity/bluetooth/core/bt-host/build/bt_gtest_package.gni")

# LINT.IfChange(copts)
# Common C++ flags used in bt-host to ensure it builds in downstreams (e.g. Pigweed)
# Note Pigweed downstream has its own version of copts since this file is not
# copybara'd.
config("copts") {
  cflags_cc = [
    "-Wdeprecated-copy",
    "-Wformat-invalid-specifier",
    "-Wswitch-enum",

    # TODO(https://fxbug.dev/345799180) Remove once code doesn't have unused parameters.
    "-Wno-unused-parameter",
  ]
}

# LINT.ThenChange(variables.bzl:copts)

source_set("sources") {
  sources = [
    "host.cc",
    "host.h",
    "util.cc",
    "util.h",
  ]

  deps = [
    "//sdk/lib/device-watcher/cpp",
    "//src/connectivity/bluetooth/core/bt-host/common",
    "//src/connectivity/bluetooth/core/bt-host/controllers",
    "//src/connectivity/bluetooth/core/bt-host/gap",
    "//src/connectivity/bluetooth/core/bt-host/gatt",
    "//third_party/pigweed/backends/pw_async_fuchsia:dispatcher",
    "//third_party/pigweed/backends/pw_random:zircon_random_generator",
    "//zircon/system/ulib/inspect",
  ]

  public_deps = [
    ":stack",
    "fidl",
    "//sdk/fidl/fuchsia.bluetooth.host:fuchsia.bluetooth.host_cpp",
    "//sdk/fidl/fuchsia.bluetooth.host:fuchsia.bluetooth.host_hlcpp",
    "//sdk/fidl/fuchsia.hardware.bluetooth:fuchsia.hardware.bluetooth_cpp",
    "//sdk/fidl/fuchsia.process.lifecycle:fuchsia.process.lifecycle_hlcpp",
    "//sdk/lib/async-loop:async-loop-cpp",
    "//sdk/lib/async-loop:async-loop-default",
    "//sdk/lib/fit",
    "//sdk/lib/sys/cpp",
    "//src/connectivity/bluetooth/lib/fidl",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/zx",
  ]
}

config("config_enable_inspect") {
  defines = [ "PW_BLUETOOTH_SAPPHIRE_INSPECT_ENABLED" ]
}

config("config_enable_trace") {
  defines = [ "PW_BLUETOOTH_SAPPHIRE_TRACE_ENABLED" ]
}

group("config") {
  public_configs = [
    ":config_enable_inspect",
    ":config_enable_trace",
  ]
}

# This is the OOT built bt-host component.
# See https://pigweed.dev/pw_bluetooth_sapphire/.
# TODO(https://fxbug.dev/324107025): Rename this target to "bt-host" and update
#   `//build:non_hermetic_deps` once it's fully migrated OOT.
prebuilt_package("bt-host-oot") {
  # component-url: fuchsia-pkg://fuchsia.com/bt-host#meta/bt-host.cm
  package_name = "bt-host"
  archive = "//prebuilt/connectivity/bluetooth/bt-host/$target_cpu/bt-host"
}

bazel_fuchsia_package("bt-host") {
  package_name = "bt-host"
}

group("stack") {
  public_deps = [
    "att",
    "common",
    "controllers",
    "gap",
    "gatt",
    "hci",
    "hci-spec",
    "iso",
    "l2cap",
    "sco",
    "sdp",
    "sm",
    "socket",
    "transport",
  ]
}

# See https://fuchsia.dev/fuchsia-src/development/testing/fuzzing/build-a-fuzzer?hl=en#fx-set
# for instructions on building the fuzzers package.
fuchsia_fuzzer_component("advertising-data-fuzzer-component") {
  manifest = "common/meta/advertising_data_fuzzer.cml"
  deps = [ "common:advertising_data_fuzzer" ]
}

fuchsia_fuzzer_component("host-server-watch-peers-fuzzer-component") {
  manifest = "fidl/meta/host_server_watch_peers_fuzzer.cml"
  deps = [ "fidl:host_server_watch_peers_fuzzer" ]
}

fuchsia_fuzzer_component("peer-cache-fuzzer-component") {
  manifest = "gap/meta/peer_cache_fuzzer.cml"
  deps = [ "gap:peer_cache_fuzzer" ]
}

fuchsia_fuzzer_component("l2cap-fuzzer-component") {
  manifest = "l2cap/meta/l2cap_fuzzer.cml"
  deps = [ "l2cap:l2cap_fuzzer" ]
}

fuchsia_fuzzer_component("basic-mode-rx-engine-fuzzer-component") {
  manifest = "l2cap/meta/basic_mode_rx_engine_fuzzer.cml"
  deps = [ "l2cap:basic_mode_rx_engine_fuzzer" ]
}

fuchsia_fuzzer_component(
    "enhanced-retransmission-mode-engines-fuzzer-component") {
  manifest = "l2cap/meta/enhanced_retransmission_mode_engines_fuzzer.cml"
  deps = [ "l2cap:enhanced_retransmission_mode_engines_fuzzer" ]
}

fuchsia_fuzzer_component("bredr-dynamic-channel-registry-fuzzer-component") {
  manifest = "l2cap/meta/bredr_dynamic_channel_registry_fuzzer.cml"
  deps = [ "l2cap:bredr_dynamic_channel_registry_fuzzer" ]
}

fuchsia_fuzzer_component("channel-configuration-fuzzer-component") {
  manifest = "l2cap/meta/channel_configuration_fuzzer.cml"
  deps = [ "l2cap:channel_configuration_fuzzer" ]
}

fuchsia_fuzzer_component("common-handler-fuzzer-component") {
  manifest = "l2cap/meta/common_handler_fuzzer.cml"
  deps = [ "l2cap:common_handler_fuzzer" ]
}

fuchsia_fuzzer_component("data-element-fuzzer-component") {
  manifest = "sdp/meta/data_element_fuzzer.cml"
  deps = [ "sdp:data_element_fuzzer" ]
}

fuchsia_fuzzer_component("pdu-fuzzer-component") {
  manifest = "sdp/meta/pdu_fuzzer.cml"
  deps = [ "sdp:pdu_fuzzer" ]
}

fuchsia_fuzzer_component("valid-packet-reader-fuzzer-component") {
  manifest = "sm/meta/valid_packet_reader_fuzzer.cml"
  deps = [ "sm:valid_packet_reader_fuzzer" ]
}

fuchsia_fuzzer_package("fuzzers") {
  package_name = "bt-host-fuzzers"
  cpp_fuzzer_components = [
    ":advertising-data-fuzzer-component",
    ":host-server-watch-peers-fuzzer-component",
    ":peer-cache-fuzzer-component",
    ":l2cap-fuzzer-component",
    ":basic-mode-rx-engine-fuzzer-component",
    ":enhanced-retransmission-mode-engines-fuzzer-component",
    ":bredr-dynamic-channel-registry-fuzzer-component",
    ":channel-configuration-fuzzer-component",
    ":common-handler-fuzzer-component",
    ":data-element-fuzzer-component",
    ":pdu-fuzzer-component",
    ":valid-packet-reader-fuzzer-component",
  ]
}

bt_gtest_package("bt-host-transport-tests") {
  with_death_tests = true
  deps = [ "transport:tests.lib" ]
}

bt_gtest_package("bt-host-gap-tests") {
  with_death_tests = true
  deps = [ "gap:tests.lib" ]
}

bt_gtest_package("bt-host-gatt-tests") {
  deps = [ "gatt:tests.lib" ]
}

bt_gtest_package("bt-host-common-tests") {
  with_death_tests = true
  deps = [ "common:tests.lib" ]
}

bt_gtest_package("bt-host-l2cap-tests") {
  with_death_tests = true
  deps = [ "l2cap:tests.lib" ]
}

bt_gtest_package("bt-host-att-tests") {
  with_death_tests = true
  deps = [ "att:tests.lib" ]
}

bt_gtest_package("bt-host-hci-tests") {
  with_death_tests = true
  deps = [ "hci:tests.lib" ]
}

bt_gtest_package("bt-host-hci-spec-tests") {
  deps = [ "hci-spec:tests.lib" ]
}

bt_gtest_package("bt-host-sco-tests") {
  deps = [ "sco:tests.lib" ]
}

bt_gtest_package("bt-host-sdp-tests") {
  deps = [ "sdp:tests.lib" ]
}

bt_gtest_package("bt-host-sm-tests") {
  with_death_tests = true
  deps = [ "sm:tests.lib" ]
}

bt_gtest_package("bt-host-iso-tests") {
  deps = [ "iso:tests.lib" ]
}

bt_gtest_package("bt-host-testing-tests") {
  deps = [ "testing:tests.lib" ]
}

group("gn_tests") {
  testonly = true
  deps = [
    ":bt-host-att-tests",
    ":bt-host-common-tests",
    ":bt-host-gap-tests",
    ":bt-host-gatt-tests",
    ":bt-host-hci-spec-tests",
    ":bt-host-hci-tests",
    ":bt-host-iso-tests",
    ":bt-host-l2cap-tests",
    ":bt-host-sco-tests",
    ":bt-host-sdp-tests",
    ":bt-host-sm-tests",
    ":bt-host-testing-tests",
    ":bt-host-transport-tests",
    ":fuzzers",
    "controllers:bt-host-controllers-tests",
    "fidl:bt-host-fidl-tests",
    "socket:bt-host-socket-tests",
  ]
}

bazel_fuchsia_test_package("bazel_test_pkg") {
  test_package_name = "bt_host_tests"
  test_component_names = [
    "host_test",
    "l2cap_test",
    "att_test",
    "common_test",
    "controllers_test",
    "fidl_test",
    "gap_test",
    "gatt_test",
    "hci_test",
    "hci_spec_test",
    "iso_test",
    "sco_test",
    "sdp_test",
    "sm_test",
    "socket_test",
    "testing_test",
    "transport_test",
  ]
}

group("tests") {
  testonly = true
  deps = [
    ":bazel_test_pkg",
    ":gn_tests",
  ]
}
