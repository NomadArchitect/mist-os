# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/fidl/toolchain.gni")
import("//build/test.gni")
import("//build/testing/cc_test_executable.gni")

## Groups
group("tests") {
  testonly = true
  deps = [
    ":audio_services_device_registry_unittests",
    ":audio_services_device_registry_warning_unittests",
    "testing",
  ]
}

## Packages
fuchsia_package("device_registry") {
  package_name = "audio_device_registry"

  deps = [ ":device_registry_comp" ]
}

fuchsia_unittest_package("audio_services_device_registry_unittests") {
  deps = [ ":device_registry_unittests_bin" ]

  test_specs = {
    log_settings = {
      max_severity = "INFO"
    }
  }
}

fuchsia_unittest_package("audio_services_device_registry_warning_unittests") {
  deps = [ ":device_registry_warning_unittests_bin" ]

  test_specs = {
    log_settings = {
      max_severity = "WARN"
    }
  }
}

## Components
fuchsia_component("device_registry_comp") {
  component_name = "audio_device_registry"
  manifest = "//src/media/audio/services/device_registry/meta/audio_device_registry.cml"

  deps = [ ":device_registry_bin" ]
}

## Executables
executable("device_registry_bin") {
  output_name = "audio_device_registry"
  sources = [ "main.cc" ]

  deps = [
    ":device_registry_lib",
    "//sdk/lib/async-loop:async-loop-cpp",
    "//sdk/lib/async-loop:async-loop-default",
  ]
}

cc_test_executable("device_registry_unittests_bin") {
  testonly = true
  output_name = "audio_services_device_registry_unittests"

  sources = [
    "audio_device_registry_unittest.cc",
    "control_creator_server_unittest.cc",
    "control_server_unittest.cc",
    "device_detector_unittest.cc",
    "device_unittest.cc",
    "inspector_unittest.cc",
    "observer_server_unittest.cc",
    "provider_server_unittest.cc",
    "registry_server_unittest.cc",
    "ring_buffer_server_unittest.cc",
    "signal_processing_utils_unittest.cc",
    "validate_unittest.cc",
  ]

  deps = [
    ":unittest_base",
    "//sdk/fidl/fuchsia.hardware.audio:fuchsia.hardware.audio_cpp_testing",
    "//src/storage/lib/vfs/cpp",
    "//zircon/system/ulib/sync:sync-cpp",
  ]
}

cc_test_executable("device_registry_warning_unittests_bin") {
  testonly = true
  output_name = "audio_services_device_registry_warning_unittests"

  sources = [
    "audio_device_registry_warning_unittest.cc",
    "control_creator_server_warning_unittest.cc",
    "control_server_warning_unittest.cc",
    "device_warning_unittest.cc",
    "inspector_warning_unittest.cc",
    "observer_server_warning_unittest.cc",
    "provider_server_warning_unittest.cc",
    "registry_server_warning_unittest.cc",
    "ring_buffer_server_warning_unittest.cc",
    "signal_processing_utils_warning_unittest.cc",
    "validate_warning_unittest.cc",
  ]

  deps = [ ":unittest_base" ]
}

## Source sets
# Created to facilitate code sharing with the fakes+stub_adr in ./testing/
source_set("common") {
  sources = [
    "basic_types.h",
    "logging.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.audio.device:fuchsia.audio.device_cpp",
    "//sdk/fidl/fuchsia.hardware.audio:fuchsia.hardware.audio_cpp",
  ]

  deps = [
    "//sdk/lib/syslog/cpp",
    "//zircon/system/ulib/zx",
  ]
}

# Created to facilitate direct unit-testing of the core classes and functions.
source_set("device_registry_lib") {
  sources = [
    "audio_device_registry.cc",
    "audio_device_registry.h",
    "common.cc",
    "common.h",
    "control_creator_server.cc",
    "control_creator_server.h",
    "control_notify.h",
    "control_server.cc",
    "control_server.h",
    "device.cc",
    "device.h",
    "device_detector.cc",
    "device_detector.h",
    "device_presence_watcher.h",
    "inspector.cc",
    "inspector.h",
    "logging.cc",
    "observer_notify.h",
    "observer_server.cc",
    "observer_server.h",
    "provider_server.cc",
    "provider_server.h",
    "registry_server.cc",
    "registry_server.h",
    "ring_buffer_server.cc",
    "ring_buffer_server.h",
    "signal_processing_utils.cc",
    "signal_processing_utils.h",
    "validate.cc",
    "validate.h",
  ]

  public_deps = [
    ":common",
    "//sdk/fidl/fuchsia.audio.device:fuchsia.audio.device_cpp",
    "//sdk/fidl/fuchsia.hardware.audio:fuchsia.hardware.audio_cpp",
    "//sdk/lib/component/incoming/cpp",
    "//sdk/lib/inspect/component/cpp",
    "//src/lib/fsl",
    "//src/media/audio/lib/clock",
    "//src/media/audio/services/common",
    "//zircon/system/ulib/trace-provider",
  ]

  deps = [
    "//sdk/lib/component/outgoing/cpp",
    "//sdk/lib/fdio",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/syslog/cpp",
    "//zircon/system/public",
    "//zircon/system/ulib/zx",
  ]
}

# Created to share common test sources between the two unittest binaries.
source_set("unittest_base") {
  testonly = true

  sources = [
    "adr_server_unittest_base.h",
    "common_unittest.cc",
    "common_unittest.h",
    "device_unittest.h",
    "inspector_unittest.h",
    "signal_processing_utils_unittest.h",
  ]

  public_deps = [
    ":common",
    ":device_registry_lib",
    "testing:fakes",
    "//sdk/lib/inspect/testing/cpp",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/media/audio/lib/clock",
    "//src/media/audio/services/common/testing",
    "//third_party/googletest:gmock",
    "//zircon/system/public",
  ]
}
