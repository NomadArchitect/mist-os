# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/testing/cc_test_executable.gni")

group("tests") {
  testonly = true
  deps = [ ":audio_services_mixer_mix_unittests" ]
}

source_set("mix") {
  visibility = [
    "./*",
    "//src/media/audio/services/mixer/fidl/*",
  ]

  sources = [
    "base_consumer_stage.cc",
    "base_consumer_stage.h",
    "consumer_stage.cc",
    "consumer_stage.h",
    "custom_stage.cc",
    "custom_stage.h",
    "gain_control.cc",
    "gain_control.h",
    "mix_job_context.cc",
    "mix_job_context.h",
    "mix_job_subtask.cc",
    "mix_job_subtask.h",
    "mixer_gain_controls.cc",
    "mixer_gain_controls.h",
    "mixer_source.cc",
    "mixer_source.h",
    "mixer_stage.cc",
    "mixer_stage.h",
    "packet_view.cc",
    "packet_view.h",
    "pipeline_detached_thread.h",
    "pipeline_mix_thread.cc",
    "pipeline_mix_thread.h",
    "pipeline_stage.cc",
    "pipeline_stage.h",
    "pipeline_thread.h",
    "producer_stage.cc",
    "producer_stage.h",
    "ptr_decls.h",
    "reusable_buffer.cc",
    "reusable_buffer.h",
    "ring_buffer.cc",
    "ring_buffer.h",
    "ring_buffer_consumer_writer.cc",
    "ring_buffer_consumer_writer.h",
    "silence_padding_stage.cc",
    "silence_padding_stage.h",
    "simple_packet_queue_producer_stage.cc",
    "simple_packet_queue_producer_stage.h",
    "simple_ring_buffer_producer_stage.cc",
    "simple_ring_buffer_producer_stage.h",
    "splitter_consumer_stage.cc",
    "splitter_consumer_stage.h",
    "splitter_producer_stage.cc",
    "splitter_producer_stage.h",
    "start_stop_control.cc",
    "start_stop_control.h",
    "stream_sink_consumer_writer.cc",
    "stream_sink_consumer_writer.h",
    "timeline_function_math.cc",
    "timeline_function_math.h",
  ]

  public_deps = [
    "//src/media/audio/lib/clock",
    "//src/media/audio/lib/processing",
    "//src/media/audio/services/common",
    "//src/media/audio/services/mixer/common",
    "//zircon/system/ulib/fzl",
    "//zircon/system/ulib/sync:sync-cpp",
  ]

  deps = [
    "//sdk/lib/fit",
    "//sdk/lib/syslog/cpp",
    "//src/media/audio/lib/format2",
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/trace",
    "//zircon/system/ulib/zx",
  ]
}

cc_test_executable("mix_unittests") {
  output_name = "audio_services_mixer_mix_unittests"
  testonly = true

  sources = [
    "base_consumer_stage_unittest.cc",
    "consumer_stage_unittest.cc",
    "custom_stage_unittest.cc",
    "gain_control_unittest.cc",
    "mixer_gain_controls_unittest.cc",
    "mixer_source_clock_unittest.cc",
    "mixer_source_unittest.cc",
    "mixer_stage_unittest.cc",
    "packet_view_unittest.cc",
    "pipeline_mix_thread_unittest.cc",
    "pipeline_stage_unittest.cc",
    "producer_stage_unittest.cc",
    "reusable_buffer_unittest.cc",
    "ring_buffer_consumer_writer_unittest.cc",
    "ring_buffer_unittest.cc",
    "silence_padding_stage_unittest.cc",
    "simple_packet_queue_producer_stage_unittest.cc",
    "simple_ring_buffer_producer_stage_unittest.cc",
    "splitter_consumer_stage_unittest.cc",
    "splitter_producer_stage_unittest.cc",
    "start_stop_control_unittest.cc",
    "stream_sink_consumer_writer_unittest.cc",
    "timeline_function_math_unittest.cc",
  ]

  deps = [
    ":mix",
    "//sdk/fidl/fuchsia.audio.effects:fuchsia.audio.effects_hlcpp",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/media/audio/lib/clock/testing",
    "//src/media/audio/lib/format2",
    "//src/media/audio/lib/processing",
    "//src/media/audio/lib/processing:prebuilt_coefficient_tables",
    "//src/media/audio/services/common/testing",
    "//src/media/audio/services/mixer/mix/testing",
    "//third_party/googletest:gmock",
  ]
}

fuchsia_unittest_package("audio_services_mixer_mix_unittests") {
  deps = [ ":mix_unittests" ]
}
