#!/bin/sh

# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

set -e

# Generates 25 synthesized ELF components, each linking a bunch of dynamic libraries.
#
# Run it like:
#
# src/sys/component_manager/tests/bootfs_launching_benchmark/test_data/components/generate_components.sh

# Change to the script's containing directory
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
cd "$SCRIPT_DIR"

for N in $(seq 1 25); do
  N=$(printf "%02d" "$N")
  DIR="test_component_${N}"

  # Remove existing directory if it exists
  if [ -d "$DIR" ]; then
    rm -rf "$DIR"
  fi

  mkdir "$DIR"

  # Generate BUILD.gn
  cat <<EOL > "$DIR/BUILD.gn"
# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Generated by $0

import("//build/components.gni")

executable("test_component_${N}_bin") {
  output_name = "test_component_${N}"
  output_dir = target_out_dir
  sources = [ "main.cc" ]
  deps = [
    "../../dylibs",
    "//examples/components/routing/fidl:echo_cpp",
    "//sdk/lib/component/incoming/cpp",
  ]
}

fuchsia_component("test_component_${N}_component") {
  component_name = "test_component_${N}"
  testonly = true
  manifest = "meta/test_component_${N}.cml"
  deps = [ ":test_component_${N}_bin" ]
}

fuchsia_package("test_component_${N}_package") {
  deps = [ ":test_component_${N}_component" ]
  testonly = true
}

group("test_component_${N}") {
  deps = [ ":test_component_${N}_package" ]
  testonly = true
}

EOL

  # Generate main.cc
  cat <<EOL > "$DIR/main.cc"
// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generated by $0

#include <fidl/fidl.examples.routing.echo/cpp/wire.h>
#include <lib/component/incoming/cpp/protocol.h>
#include <unistd.h>

#include "src/sys/component_manager/tests/bootfs_launching_benchmark/test_data/dylibs/test_library_1/lib.h"
#include "src/sys/component_manager/tests/bootfs_launching_benchmark/test_data/dylibs/test_library_2/lib.h"
#include "src/sys/component_manager/tests/bootfs_launching_benchmark/test_data/dylibs/test_library_3/lib.h"
#include "src/sys/component_manager/tests/bootfs_launching_benchmark/test_data/dylibs/test_library_4/lib.h"
#include "src/sys/component_manager/tests/bootfs_launching_benchmark/test_data/dylibs/test_library_5/lib.h"

template <typename T1, typename T2>
void AssertEq(const T1& a, const T2& b) {
  if (a != b) {
    abort();
  }
}

int main() {
  fidl::ClientEnd client_end = component::Connect<fidl_examples_routing_echo::Echo>().value();
  fidl::WireResult result = fidl::WireCall(client_end)->EchoString("${N}");
  AssertEq(result.value().response.get(), "${N}");
  AssertEq(test_library_1_func(), 1);
  AssertEq(test_library_2_func(), 2);
  AssertEq(test_library_3_func(), 3);
  AssertEq(test_library_4_func(), 4);
  AssertEq(test_library_5_func(), 5);
  return EXIT_SUCCESS;
}

EOL

  # Generate cml
  mkdir -p "$DIR/meta"
  cat <<EOL > "$DIR/meta/test_component_${N}.cml"
// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generated by $0

{
    include: [ "syslog/client.shard.cml" ],
    program: {
        runner: "elf",
        binary: "bin/test_component_${N}",
    },
    use: [
        { protocol: "fidl.examples.routing.echo.Echo" },
    ],
}

EOL

  fx format-code --files="$DIR/BUILD.gn,$DIR/main.cc,$DIR/meta/test_component_${N}.cml"
done
