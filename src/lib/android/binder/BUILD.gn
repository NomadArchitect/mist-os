# Copyright 2024 The Fuchsia Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/lib/android/aidl/aidl.gni")

group("tests") {
  testonly = true
  deps = [ "rust:tests" ]
}

aidl_cpp("libbinder") {
  is_bootstrap = true
  base = "//third_party/android/platform/frameworks/native/libs/binder/aidl"
  parcelables = [
    "//third_party/android/platform/frameworks/native/libs/binder/aidl/android/os/ConnectionInfo.aidl",
    "//third_party/android/platform/frameworks/native/libs/binder/aidl/android/os/Service.aidl",
    "//third_party/android/platform/frameworks/native/libs/binder/aidl/android/os/ServiceDebugInfo.aidl",
  ]
  interfaces = [
    "//third_party/android/platform/frameworks/native/libs/binder/aidl/android/os/IClientCallback.aidl",
    "//third_party/android/platform/frameworks/native/libs/binder/aidl/android/os/IServiceCallback.aidl",
    "//third_party/android/platform/frameworks/native/libs/binder/aidl/android/os/IServiceManager.aidl",
  ]
  deps = [ ":libbinder_accessor" ]
}

aidl_cpp("libbinder_accessor") {
  is_bootstrap = true
  base = "//third_party/android/platform/frameworks/native/libs/binder/aidl"
  interfaces = [ "//third_party/android/platform/frameworks/native/libs/binder/aidl/android/os/IAccessor.aidl" ]
}

config("binder_config") {
  include_dirs = [
    "include",
    "//third_party/android/platform/frameworks/native/libs/binder/include",
    "//third_party/android/platform/frameworks/native/libs/binder/ndk/include_ndk",
    "//third_party/android/platform/frameworks/native/libs/binder/ndk/include_platform",
    "//third_party/android/platform/frameworks/native/libs/binder/ndk/include_cpp",
  ]

  configs = [
    "//src/lib/android:android_config",

    # TODO(https://fxbug.dev/42085293): delete the below and fix compiler warnings
    "//build/config:Wno-vla-cxx-extension",
  ]
}

binder_source_base =
    "//third_party/android/platform/frameworks/native/libs/binder/"

source_set("binder") {
  defines = [ "BINDER_WITH_KERNEL_IPC" ]
  public = rebase_path([
                         "Binder.h",
                         "BinderService.h",
                         "BpBinder.h",
                         "Common.h",
                         "Delegate.h",
                         "Enums.h",
                         "Functional.h",
                         "IBinder.h",
                         "IInterface.h",
                         "IMemory.h",
                         "IPCThreadState.h",
                         "IResultReceiver.h",
                         "IServiceManagerFFI.h",
                         "IServiceManager.h",
                         "IShellCallback.h",
                         "LazyServiceRegistrar.h",
                         "MemoryBase.h",
                         "MemoryDealer.h",
                         "MemoryHeapBase.h",
                         "Parcelable.h",
                         "ParcelableHolder.h",
                         "ParcelFileDescriptor.h",
                         "Parcel.h",
                         "PersistableBundle.h",
                         "ProcessState.h",
                         "RecordedTransaction.h",
                         "RpcCertificateFormat.h",
                         "RpcKeyFormat.h",
                         "RpcServer.h",
                         "RpcSession.h",
                         "RpcThreads.h",
                         "RpcTransport.h",
                         "RpcTransportRaw.h",
                         "SafeInterface.h",
                         "Stability.h",
                         "Status.h",
                         "TextOutput.h",
                         "Trace.h",
                         "unique_fd.h",
                       ],
                       "",
                       binder_source_base + "include/binder")
  sources = rebase_path([
                          "BackendUnifiedServiceManager.cpp",
                          "Binder.cpp",
                          "BpBinder.cpp",
                          "BufferedTextOutput.cpp",
                          "Debug.cpp",
                          "FdTrigger.cpp",
                          "IInterface.cpp",
                          "IPCThreadState.cpp",
                          "IResultReceiver.cpp",
                          "IServiceManager.cpp",
                          "OS_android.cpp",
                          "OS_unix_base.cpp",
                          "Parcel.cpp",
                          "ParcelFileDescriptor.cpp",
                          "ProcessState.cpp",
                          "RecordedTransaction.cpp",
                          "RpcServer.cpp",
                          "RpcSession.cpp",
                          "RpcState.cpp",
                          "RpcTransportRaw.cpp",
                          "Stability.cpp",
                          "Static.cpp",
                          "Status.cpp",
                          "TextOutput.cpp",
                          "Utils.cpp",
                          "ndk/ibinder.cpp",
                          "ndk/parcel.cpp",
                          "ndk/process.cpp",
                          "ndk/service_manager.cpp",
                          "ndk/stability.cpp",
                          "ndk/status.cpp",
                        ],
                        "",
                        binder_source_base)

  # These headers:
  #   "IPermissionController.h",
  #   "PermissionCache.h",
  #   "PermissionController.h",
  # and corresponding source files:
  #   "IPermissionController.cpp",
  #   "PermissionCache.cpp",
  #   "PermissionController.cpp",
  # Are intentionally omitted and will be moved out of the binder library at some
  # point in the future. See b/183654927 and binder's Android.bp for details.

  aidl_target_outputs = get_target_outputs(":libbinder_aidl") +
                        get_target_outputs(":libbinder_accessor_aidl")

  foreach(f, aidl_target_outputs) {
    name = get_path_info(f, "name")
    if (name != "aidl_package" && name != "aidl_rust_glue_args" &&
        name != "aidl_bases") {
      sources += [ f ]
    }
  }

  public_deps = [
    "//src/lib/android/bionic_compat",
    "//src/lib/android/core",
    "//src/lib/android/libbase",
  ]
  deps = [
    ":libbinder",
    ":libbinder_accessor",
  ]
  public_configs = [
    ":binder_config",
    ":libbinder_include",
  ]
  configs += [
    ":libbinder_accessor_include",
    "//src/lib/android:android_config_no_thread_safety_analysis",
  ]
  cflags_cc = [
    # See https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=130665 for explanation.
    "-fno-sanitize=alignment",
  ]
}
