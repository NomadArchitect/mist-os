// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generated by ./bindgen.sh using bindgen 0.70.1

// Allow non-conventional naming for imports from C/C++.
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::undocumented_unsafe_blocks)]
// Allow unused definitions
#![allow(dead_code, unused_results)]

use zerocopy::{FromBytes, Immutable, IntoBytes, KnownLayout};

// Configure linkage for MacOS.
#[cfg(target_os = "macos")]
#[link(name = "IOKit", kind = "framework")]
#[link(name = "CoreFoundation", kind = "framework")]
extern "C" {}

pub const ZBI_BOARD_NAME_LEN: u64 = 32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_platform_id_t {
    pub vid: u32,
    pub pid: u32,
    pub board_name: [::core::ffi::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_platform_id_t"][::core::mem::size_of::<zbi_platform_id_t>() - 40usize];
    ["Alignment of zbi_platform_id_t"][::core::mem::align_of::<zbi_platform_id_t>() - 4usize];
    ["Offset of field: zbi_platform_id_t::vid"]
        [::core::mem::offset_of!(zbi_platform_id_t, vid) - 0usize];
    ["Offset of field: zbi_platform_id_t::pid"]
        [::core::mem::offset_of!(zbi_platform_id_t, pid) - 4usize];
    ["Offset of field: zbi_platform_id_t::board_name"]
        [::core::mem::offset_of!(zbi_platform_id_t, board_name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_board_info_t {
    pub revision: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_board_info_t"][::core::mem::size_of::<zbi_board_info_t>() - 4usize];
    ["Alignment of zbi_board_info_t"][::core::mem::align_of::<zbi_board_info_t>() - 4usize];
    ["Offset of field: zbi_board_info_t::revision"]
        [::core::mem::offset_of!(zbi_board_info_t, revision) - 0usize];
};
pub const ZBI_MAX_SMT: u64 = 4;
pub type zbi_topology_processor_flags_t = u16;
pub const ZBI_TOPOLOGY_PROCESSOR_FLAGS_PRIMARY: zbi_topology_processor_flags_t = 1;
pub const ZBI_TOPOLOGY_PROCESSOR_FLAGS_INTERRUPT: zbi_topology_processor_flags_t = 2;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_arm64_info_t {
    pub cluster_1_id: u8,
    pub cluster_2_id: u8,
    pub cluster_3_id: u8,
    pub cpu_id: u8,
    pub gic_id: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_arm64_info_t"]
        [::core::mem::size_of::<zbi_topology_arm64_info_t>() - 5usize];
    ["Alignment of zbi_topology_arm64_info_t"]
        [::core::mem::align_of::<zbi_topology_arm64_info_t>() - 1usize];
    ["Offset of field: zbi_topology_arm64_info_t::cluster_1_id"]
        [::core::mem::offset_of!(zbi_topology_arm64_info_t, cluster_1_id) - 0usize];
    ["Offset of field: zbi_topology_arm64_info_t::cluster_2_id"]
        [::core::mem::offset_of!(zbi_topology_arm64_info_t, cluster_2_id) - 1usize];
    ["Offset of field: zbi_topology_arm64_info_t::cluster_3_id"]
        [::core::mem::offset_of!(zbi_topology_arm64_info_t, cluster_3_id) - 2usize];
    ["Offset of field: zbi_topology_arm64_info_t::cpu_id"]
        [::core::mem::offset_of!(zbi_topology_arm64_info_t, cpu_id) - 3usize];
    ["Offset of field: zbi_topology_arm64_info_t::gic_id"]
        [::core::mem::offset_of!(zbi_topology_arm64_info_t, gic_id) - 4usize];
};
#[repr(C)]
#[derive(FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_x64_info_t {
    pub apic_ids: [u32; 4usize],
    pub apic_id_count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_x64_info_t"]
        [::core::mem::size_of::<zbi_topology_x64_info_t>() - 20usize];
    ["Alignment of zbi_topology_x64_info_t"]
        [::core::mem::align_of::<zbi_topology_x64_info_t>() - 4usize];
    ["Offset of field: zbi_topology_x64_info_t::apic_ids"]
        [::core::mem::offset_of!(zbi_topology_x64_info_t, apic_ids) - 0usize];
    ["Offset of field: zbi_topology_x64_info_t::apic_id_count"]
        [::core::mem::offset_of!(zbi_topology_x64_info_t, apic_id_count) - 16usize];
};
impl Default for zbi_topology_x64_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for zbi_topology_x64_info_t {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "zbi_topology_x64_info_t {{  }}")
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_riscv64_info_t {
    pub hart_id: u64,
    pub isa_strtab_index: u32,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_riscv64_info_t"]
        [::core::mem::size_of::<zbi_topology_riscv64_info_t>() - 16usize];
    ["Alignment of zbi_topology_riscv64_info_t"]
        [::core::mem::align_of::<zbi_topology_riscv64_info_t>() - 8usize];
    ["Offset of field: zbi_topology_riscv64_info_t::hart_id"]
        [::core::mem::offset_of!(zbi_topology_riscv64_info_t, hart_id) - 0usize];
    ["Offset of field: zbi_topology_riscv64_info_t::isa_strtab_index"]
        [::core::mem::offset_of!(zbi_topology_riscv64_info_t, isa_strtab_index) - 8usize];
    ["Offset of field: zbi_topology_riscv64_info_t::reserved"]
        [::core::mem::offset_of!(zbi_topology_riscv64_info_t, reserved) - 12usize];
};
pub const ZBI_TOPOLOGY_ARCHITECTURE_INFO_ARM64: u64 = 1;
pub const ZBI_TOPOLOGY_ARCHITECTURE_INFO_X64: u64 = 2;
pub const ZBI_TOPOLOGY_ARCHITECTURE_INFO_RISCV64: u64 = 3;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_cluster_t {
    pub performance_class: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_cluster_t"][::core::mem::size_of::<zbi_topology_cluster_t>() - 1usize];
    ["Alignment of zbi_topology_cluster_t"]
        [::core::mem::align_of::<zbi_topology_cluster_t>() - 1usize];
    ["Offset of field: zbi_topology_cluster_t::performance_class"]
        [::core::mem::offset_of!(zbi_topology_cluster_t, performance_class) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_cache_t {
    pub cache_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_cache_t"][::core::mem::size_of::<zbi_topology_cache_t>() - 4usize];
    ["Alignment of zbi_topology_cache_t"][::core::mem::align_of::<zbi_topology_cache_t>() - 4usize];
    ["Offset of field: zbi_topology_cache_t::cache_id"]
        [::core::mem::offset_of!(zbi_topology_cache_t, cache_id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_die_t {
    pub reserved: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_die_t"][::core::mem::size_of::<zbi_topology_die_t>() - 8usize];
    ["Alignment of zbi_topology_die_t"][::core::mem::align_of::<zbi_topology_die_t>() - 8usize];
    ["Offset of field: zbi_topology_die_t::reserved"]
        [::core::mem::offset_of!(zbi_topology_die_t, reserved) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_socket_t {
    pub reserved: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_socket_t"][::core::mem::size_of::<zbi_topology_socket_t>() - 8usize];
    ["Alignment of zbi_topology_socket_t"]
        [::core::mem::align_of::<zbi_topology_socket_t>() - 8usize];
    ["Offset of field: zbi_topology_socket_t::reserved"]
        [::core::mem::offset_of!(zbi_topology_socket_t, reserved) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_topology_numa_region_t {
    pub start: u64,
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_topology_numa_region_t"]
        [::core::mem::size_of::<zbi_topology_numa_region_t>() - 16usize];
    ["Alignment of zbi_topology_numa_region_t"]
        [::core::mem::align_of::<zbi_topology_numa_region_t>() - 8usize];
    ["Offset of field: zbi_topology_numa_region_t::start"]
        [::core::mem::offset_of!(zbi_topology_numa_region_t, start) - 0usize];
    ["Offset of field: zbi_topology_numa_region_t::size"]
        [::core::mem::offset_of!(zbi_topology_numa_region_t, size) - 8usize];
};
pub const ZBI_TOPOLOGY_ENTITY_PROCESSOR: u64 = 1;
pub const ZBI_TOPOLOGY_ENTITY_CLUSTER: u64 = 2;
pub const ZBI_TOPOLOGY_ENTITY_CACHE: u64 = 3;
pub const ZBI_TOPOLOGY_ENTITY_DIE: u64 = 4;
pub const ZBI_TOPOLOGY_ENTITY_SOCKET: u64 = 5;
pub const ZBI_TOPOLOGY_ENTITY_NUMA_REGION: u64 = 6;
pub const ZBI_TOPOLOGY_NO_PARENT: u16 = 65535;
pub type zbi_kernel_driver_t = u32;
pub const ZBI_KERNEL_DRIVER_ARM_PSCI: zbi_kernel_driver_t = 1229149008;
pub const ZBI_KERNEL_DRIVER_ARM_GIC_V2: zbi_kernel_driver_t = 843270471;
pub const ZBI_KERNEL_DRIVER_ARM_GIC_V3: zbi_kernel_driver_t = 860047687;
pub const ZBI_KERNEL_DRIVER_ARM_GENERIC_TIMER: zbi_kernel_driver_t = 1296651329;
pub const ZBI_KERNEL_DRIVER_PL011_UART: zbi_kernel_driver_t = 1429228624;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_UART: zbi_kernel_driver_t = 1431063873;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_HDCP: zbi_kernel_driver_t = 1212960065;
pub const ZBI_KERNEL_DRIVER_DW8250_UART: zbi_kernel_driver_t = 1146566741;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_RNG_V1: zbi_kernel_driver_t = 1212960082;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_RNG_V2: zbi_kernel_driver_t = 1380732225;
pub const ZBI_KERNEL_DRIVER_GENERIC32_WATCHDOG: zbi_kernel_driver_t = 842220631;
pub const ZBI_KERNEL_DRIVER_GENI_UART: zbi_kernel_driver_t = 1229866311;
pub const ZBI_KERNEL_DRIVER_I8250_PIO_UART: zbi_kernel_driver_t = 808792632;
pub const ZBI_KERNEL_DRIVER_I8250_MMIO32_UART: zbi_kernel_driver_t = 1295331896;
pub const ZBI_KERNEL_DRIVER_I8250_MMIO8_UART: zbi_kernel_driver_t = 1110782520;
pub const ZBI_KERNEL_DRIVER_MOTMOT_UART: zbi_kernel_driver_t = 1296913493;
pub const ZBI_KERNEL_DRIVER_MOTMOT_POWER: zbi_kernel_driver_t = 1296913488;
pub const ZBI_KERNEL_DRIVER_AS370_POWER: zbi_kernel_driver_t = 1345337139;
pub const ZBI_KERNEL_DRIVER_IMX_UART: zbi_kernel_driver_t = 1431850313;
pub const ZBI_KERNEL_DRIVER_RISCV_PLIC: zbi_kernel_driver_t = 1128877136;
pub const ZBI_KERNEL_DRIVER_RISCV_GENERIC_TIMER: zbi_kernel_driver_t = 1296651346;
pub const ZBI_KERNEL_DRIVER_PXA_UART: zbi_kernel_driver_t = 1347961173;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_simple_t {
    pub mmio_phys: u64,
    pub irq: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_simple_t"][::core::mem::size_of::<zbi_dcfg_simple_t>() - 16usize];
    ["Alignment of zbi_dcfg_simple_t"][::core::mem::align_of::<zbi_dcfg_simple_t>() - 8usize];
    ["Offset of field: zbi_dcfg_simple_t::mmio_phys"]
        [::core::mem::offset_of!(zbi_dcfg_simple_t, mmio_phys) - 0usize];
    ["Offset of field: zbi_dcfg_simple_t::irq"]
        [::core::mem::offset_of!(zbi_dcfg_simple_t, irq) - 8usize];
    ["Offset of field: zbi_dcfg_simple_t::flags"]
        [::core::mem::offset_of!(zbi_dcfg_simple_t, flags) - 12usize];
};
pub type zbi_kernel_driver_irq_flags_t = u32;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_EDGE_TRIGGERED: zbi_kernel_driver_irq_flags_t = 1;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_LEVEL_TRIGGERED: zbi_kernel_driver_irq_flags_t = 2;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_POLARITY_LOW: zbi_kernel_driver_irq_flags_t = 4;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_POLARITY_HIGH: zbi_kernel_driver_irq_flags_t = 8;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_simple_pio_t {
    pub base: u16,
    pub reserved: u16,
    pub irq: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_simple_pio_t"][::core::mem::size_of::<zbi_dcfg_simple_pio_t>() - 8usize];
    ["Alignment of zbi_dcfg_simple_pio_t"]
        [::core::mem::align_of::<zbi_dcfg_simple_pio_t>() - 4usize];
    ["Offset of field: zbi_dcfg_simple_pio_t::base"]
        [::core::mem::offset_of!(zbi_dcfg_simple_pio_t, base) - 0usize];
    ["Offset of field: zbi_dcfg_simple_pio_t::reserved"]
        [::core::mem::offset_of!(zbi_dcfg_simple_pio_t, reserved) - 2usize];
    ["Offset of field: zbi_dcfg_simple_pio_t::irq"]
        [::core::mem::offset_of!(zbi_dcfg_simple_pio_t, irq) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_arm_psci_driver_t {
    pub use_hvc: u8,
    pub reserved: [u8; 7usize],
    pub shutdown_args: [u64; 3usize],
    pub reboot_args: [u64; 3usize],
    pub reboot_bootloader_args: [u64; 3usize],
    pub reboot_recovery_args: [u64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_arm_psci_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_arm_psci_driver_t>() - 104usize];
    ["Alignment of zbi_dcfg_arm_psci_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_arm_psci_driver_t>() - 8usize];
    ["Offset of field: zbi_dcfg_arm_psci_driver_t::use_hvc"]
        [::core::mem::offset_of!(zbi_dcfg_arm_psci_driver_t, use_hvc) - 0usize];
    ["Offset of field: zbi_dcfg_arm_psci_driver_t::reserved"]
        [::core::mem::offset_of!(zbi_dcfg_arm_psci_driver_t, reserved) - 1usize];
    ["Offset of field: zbi_dcfg_arm_psci_driver_t::shutdown_args"]
        [::core::mem::offset_of!(zbi_dcfg_arm_psci_driver_t, shutdown_args) - 8usize];
    ["Offset of field: zbi_dcfg_arm_psci_driver_t::reboot_args"]
        [::core::mem::offset_of!(zbi_dcfg_arm_psci_driver_t, reboot_args) - 32usize];
    ["Offset of field: zbi_dcfg_arm_psci_driver_t::reboot_bootloader_args"]
        [::core::mem::offset_of!(zbi_dcfg_arm_psci_driver_t, reboot_bootloader_args) - 56usize];
    ["Offset of field: zbi_dcfg_arm_psci_driver_t::reboot_recovery_args"]
        [::core::mem::offset_of!(zbi_dcfg_arm_psci_driver_t, reboot_recovery_args) - 80usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_arm_gic_v2_driver_t {
    pub mmio_phys: u64,
    pub msi_frame_phys: u64,
    pub gicd_offset: u64,
    pub gicc_offset: u64,
    pub gich_offset: u64,
    pub gicv_offset: u64,
    pub ipi_base: u32,
    pub optional: u8,
    pub use_msi: u8,
    pub reserved: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_arm_gic_v2_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_arm_gic_v2_driver_t>() - 56usize];
    ["Alignment of zbi_dcfg_arm_gic_v2_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_arm_gic_v2_driver_t>() - 8usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::mmio_phys"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, mmio_phys) - 0usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::msi_frame_phys"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, msi_frame_phys) - 8usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::gicd_offset"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, gicd_offset) - 16usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::gicc_offset"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, gicc_offset) - 24usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::gich_offset"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, gich_offset) - 32usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::gicv_offset"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, gicv_offset) - 40usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::ipi_base"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, ipi_base) - 48usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::optional"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, optional) - 52usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::use_msi"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, use_msi) - 53usize];
    ["Offset of field: zbi_dcfg_arm_gic_v2_driver_t::reserved"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v2_driver_t, reserved) - 54usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_arm_gic_v3_driver_t {
    pub mmio_phys: u64,
    pub gicd_offset: u64,
    pub gicr_offset: u64,
    pub gicr_stride: u64,
    pub reserved0: u64,
    pub ipi_base: u32,
    pub optional: u8,
    pub reserved1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_arm_gic_v3_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_arm_gic_v3_driver_t>() - 48usize];
    ["Alignment of zbi_dcfg_arm_gic_v3_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_arm_gic_v3_driver_t>() - 8usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::mmio_phys"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, mmio_phys) - 0usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::gicd_offset"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, gicd_offset) - 8usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::gicr_offset"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, gicr_offset) - 16usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::gicr_stride"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, gicr_stride) - 24usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::reserved0"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, reserved0) - 32usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::ipi_base"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, ipi_base) - 40usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::optional"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, optional) - 44usize];
    ["Offset of field: zbi_dcfg_arm_gic_v3_driver_t::reserved1"]
        [::core::mem::offset_of!(zbi_dcfg_arm_gic_v3_driver_t, reserved1) - 45usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_arm_generic_timer_driver_t {
    pub irq_phys: u32,
    pub irq_virt: u32,
    pub irq_sphys: u32,
    pub freq_override: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_arm_generic_timer_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_arm_generic_timer_driver_t>() - 16usize];
    ["Alignment of zbi_dcfg_arm_generic_timer_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_arm_generic_timer_driver_t>() - 4usize];
    ["Offset of field: zbi_dcfg_arm_generic_timer_driver_t::irq_phys"]
        [::core::mem::offset_of!(zbi_dcfg_arm_generic_timer_driver_t, irq_phys) - 0usize];
    ["Offset of field: zbi_dcfg_arm_generic_timer_driver_t::irq_virt"]
        [::core::mem::offset_of!(zbi_dcfg_arm_generic_timer_driver_t, irq_virt) - 4usize];
    ["Offset of field: zbi_dcfg_arm_generic_timer_driver_t::irq_sphys"]
        [::core::mem::offset_of!(zbi_dcfg_arm_generic_timer_driver_t, irq_sphys) - 8usize];
    ["Offset of field: zbi_dcfg_arm_generic_timer_driver_t::freq_override"]
        [::core::mem::offset_of!(zbi_dcfg_arm_generic_timer_driver_t, freq_override) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_amlogic_hdcp_driver_t {
    pub preset_phys: u64,
    pub hiu_phys: u64,
    pub hdmitx_phys: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_amlogic_hdcp_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_amlogic_hdcp_driver_t>() - 24usize];
    ["Alignment of zbi_dcfg_amlogic_hdcp_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_amlogic_hdcp_driver_t>() - 8usize];
    ["Offset of field: zbi_dcfg_amlogic_hdcp_driver_t::preset_phys"]
        [::core::mem::offset_of!(zbi_dcfg_amlogic_hdcp_driver_t, preset_phys) - 0usize];
    ["Offset of field: zbi_dcfg_amlogic_hdcp_driver_t::hiu_phys"]
        [::core::mem::offset_of!(zbi_dcfg_amlogic_hdcp_driver_t, hiu_phys) - 8usize];
    ["Offset of field: zbi_dcfg_amlogic_hdcp_driver_t::hdmitx_phys"]
        [::core::mem::offset_of!(zbi_dcfg_amlogic_hdcp_driver_t, hdmitx_phys) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_amlogic_rng_driver_t {
    pub rng_data_phys: u64,
    pub rng_status_phys: u64,
    pub rng_refresh_interval_usec: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_amlogic_rng_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_amlogic_rng_driver_t>() - 24usize];
    ["Alignment of zbi_dcfg_amlogic_rng_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_amlogic_rng_driver_t>() - 8usize];
    ["Offset of field: zbi_dcfg_amlogic_rng_driver_t::rng_data_phys"]
        [::core::mem::offset_of!(zbi_dcfg_amlogic_rng_driver_t, rng_data_phys) - 0usize];
    ["Offset of field: zbi_dcfg_amlogic_rng_driver_t::rng_status_phys"]
        [::core::mem::offset_of!(zbi_dcfg_amlogic_rng_driver_t, rng_status_phys) - 8usize];
    ["Offset of field: zbi_dcfg_amlogic_rng_driver_t::rng_refresh_interval_usec"][::core::mem::offset_of!(
        zbi_dcfg_amlogic_rng_driver_t,
        rng_refresh_interval_usec
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_generic32_watchdog_action_t {
    pub addr: u64,
    pub clr_mask: u32,
    pub set_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_generic32_watchdog_action_t"]
        [::core::mem::size_of::<zbi_dcfg_generic32_watchdog_action_t>() - 16usize];
    ["Alignment of zbi_dcfg_generic32_watchdog_action_t"]
        [::core::mem::align_of::<zbi_dcfg_generic32_watchdog_action_t>() - 8usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_action_t::addr"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_action_t, addr) - 0usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_action_t::clr_mask"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_action_t, clr_mask) - 8usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_action_t::set_mask"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_action_t, set_mask) - 12usize];
};
pub type zbi_kernel_driver_generic32_watchdog_flags_t = u32;
pub const ZBI_KERNEL_DRIVER_GENERIC32_WATCHDOG_FLAGS_ENABLED:
    zbi_kernel_driver_generic32_watchdog_flags_t = 1;
pub const ZBI_KERNEL_DRIVER_GENERIC32_WATCHDOG_MIN_PERIOD: i64 = 1000000;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_generic32_watchdog_t {
    pub pet_action: zbi_dcfg_generic32_watchdog_action_t,
    pub enable_action: zbi_dcfg_generic32_watchdog_action_t,
    pub disable_action: zbi_dcfg_generic32_watchdog_action_t,
    pub watchdog_period_nsec: i64,
    pub flags: zbi_kernel_driver_generic32_watchdog_flags_t,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_generic32_watchdog_t"]
        [::core::mem::size_of::<zbi_dcfg_generic32_watchdog_t>() - 64usize];
    ["Alignment of zbi_dcfg_generic32_watchdog_t"]
        [::core::mem::align_of::<zbi_dcfg_generic32_watchdog_t>() - 8usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_t::pet_action"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_t, pet_action) - 0usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_t::enable_action"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_t, enable_action) - 16usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_t::disable_action"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_t, disable_action) - 32usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_t::watchdog_period_nsec"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_t, watchdog_period_nsec) - 48usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_t::flags"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_t, flags) - 56usize];
    ["Offset of field: zbi_dcfg_generic32_watchdog_t::reserved"]
        [::core::mem::offset_of!(zbi_dcfg_generic32_watchdog_t, reserved) - 60usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_riscv_plic_driver_t {
    pub mmio_phys: u64,
    pub num_irqs: u32,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_riscv_plic_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_riscv_plic_driver_t>() - 16usize];
    ["Alignment of zbi_dcfg_riscv_plic_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_riscv_plic_driver_t>() - 8usize];
    ["Offset of field: zbi_dcfg_riscv_plic_driver_t::mmio_phys"]
        [::core::mem::offset_of!(zbi_dcfg_riscv_plic_driver_t, mmio_phys) - 0usize];
    ["Offset of field: zbi_dcfg_riscv_plic_driver_t::num_irqs"]
        [::core::mem::offset_of!(zbi_dcfg_riscv_plic_driver_t, num_irqs) - 8usize];
    ["Offset of field: zbi_dcfg_riscv_plic_driver_t::reserved"]
        [::core::mem::offset_of!(zbi_dcfg_riscv_plic_driver_t, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_dcfg_riscv_generic_timer_driver_t {
    pub freq_hz: u32,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_dcfg_riscv_generic_timer_driver_t"]
        [::core::mem::size_of::<zbi_dcfg_riscv_generic_timer_driver_t>() - 8usize];
    ["Alignment of zbi_dcfg_riscv_generic_timer_driver_t"]
        [::core::mem::align_of::<zbi_dcfg_riscv_generic_timer_driver_t>() - 4usize];
    ["Offset of field: zbi_dcfg_riscv_generic_timer_driver_t::freq_hz"]
        [::core::mem::offset_of!(zbi_dcfg_riscv_generic_timer_driver_t, freq_hz) - 0usize];
    ["Offset of field: zbi_dcfg_riscv_generic_timer_driver_t::reserved"]
        [::core::mem::offset_of!(zbi_dcfg_riscv_generic_timer_driver_t, reserved) - 4usize];
};
pub type zbi_pixel_format_t = u32;
pub const ZBI_PIXEL_FORMAT_NONE: zbi_pixel_format_t = 0;
pub const ZBI_PIXEL_FORMAT_RGB_565: zbi_pixel_format_t = 131073;
pub const ZBI_PIXEL_FORMAT_RGB_332: zbi_pixel_format_t = 65538;
pub const ZBI_PIXEL_FORMAT_RGB_2220: zbi_pixel_format_t = 65539;
pub const ZBI_PIXEL_FORMAT_ARGB_8888: zbi_pixel_format_t = 262148;
pub const ZBI_PIXEL_FORMAT_RGB_X888: zbi_pixel_format_t = 262149;
pub const ZBI_PIXEL_FORMAT_MONO_8: zbi_pixel_format_t = 65543;
pub const ZBI_PIXEL_FORMAT_NV12: zbi_pixel_format_t = 65544;
pub const ZBI_PIXEL_FORMAT_I420: zbi_pixel_format_t = 65545;
pub const ZBI_PIXEL_FORMAT_RGB_888: zbi_pixel_format_t = 196617;
pub const ZBI_PIXEL_FORMAT_ABGR_8888: zbi_pixel_format_t = 262154;
pub const ZBI_PIXEL_FORMAT_BGR_888_X: zbi_pixel_format_t = 262155;
pub const ZBI_PIXEL_FORMAT_ARGB_2_10_10_10: zbi_pixel_format_t = 262156;
pub const ZBI_PIXEL_FORMAT_ABGR_2_10_10_10: zbi_pixel_format_t = 262157;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_swfb_t {
    pub base: u64,
    pub width: u32,
    pub height: u32,
    pub stride: u32,
    pub format: zbi_pixel_format_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_swfb_t"][::core::mem::size_of::<zbi_swfb_t>() - 24usize];
    ["Alignment of zbi_swfb_t"][::core::mem::align_of::<zbi_swfb_t>() - 8usize];
    ["Offset of field: zbi_swfb_t::base"][::core::mem::offset_of!(zbi_swfb_t, base) - 0usize];
    ["Offset of field: zbi_swfb_t::width"][::core::mem::offset_of!(zbi_swfb_t, width) - 8usize];
    ["Offset of field: zbi_swfb_t::height"][::core::mem::offset_of!(zbi_swfb_t, height) - 12usize];
    ["Offset of field: zbi_swfb_t::stride"][::core::mem::offset_of!(zbi_swfb_t, stride) - 16usize];
    ["Offset of field: zbi_swfb_t::format"][::core::mem::offset_of!(zbi_swfb_t, format) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_kernel_t {
    pub entry: u64,
    pub reserve_memory_size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_kernel_t"][::core::mem::size_of::<zbi_kernel_t>() - 16usize];
    ["Alignment of zbi_kernel_t"][::core::mem::align_of::<zbi_kernel_t>() - 8usize];
    ["Offset of field: zbi_kernel_t::entry"][::core::mem::offset_of!(zbi_kernel_t, entry) - 0usize];
    ["Offset of field: zbi_kernel_t::reserve_memory_size"]
        [::core::mem::offset_of!(zbi_kernel_t, reserve_memory_size) - 8usize];
};
pub type zbi_mem_type_t = u32;
pub const ZBI_MEM_TYPE_RAM: zbi_mem_type_t = 1;
pub const ZBI_MEM_TYPE_PERIPHERAL: zbi_mem_type_t = 2;
pub const ZBI_MEM_TYPE_RESERVED: zbi_mem_type_t = 3;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_mem_range_t {
    pub paddr: u64,
    pub length: u64,
    pub type_: zbi_mem_type_t,
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_mem_range_t"][::core::mem::size_of::<zbi_mem_range_t>() - 24usize];
    ["Alignment of zbi_mem_range_t"][::core::mem::align_of::<zbi_mem_range_t>() - 8usize];
    ["Offset of field: zbi_mem_range_t::paddr"]
        [::core::mem::offset_of!(zbi_mem_range_t, paddr) - 0usize];
    ["Offset of field: zbi_mem_range_t::length"]
        [::core::mem::offset_of!(zbi_mem_range_t, length) - 8usize];
    ["Offset of field: zbi_mem_range_t::type_"]
        [::core::mem::offset_of!(zbi_mem_range_t, type_) - 16usize];
    ["Offset of field: zbi_mem_range_t::reserved"]
        [::core::mem::offset_of!(zbi_mem_range_t, reserved) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_nvram_t {
    pub base: u64,
    pub length: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_nvram_t"][::core::mem::size_of::<zbi_nvram_t>() - 16usize];
    ["Alignment of zbi_nvram_t"][::core::mem::align_of::<zbi_nvram_t>() - 8usize];
    ["Offset of field: zbi_nvram_t::base"][::core::mem::offset_of!(zbi_nvram_t, base) - 0usize];
    ["Offset of field: zbi_nvram_t::length"][::core::mem::offset_of!(zbi_nvram_t, length) - 8usize];
};
pub const ZBI_PARTITION_NAME_LEN: u64 = 32;
pub const ZBI_PARTITION_GUID_LEN: u64 = 16;
pub type zbi_partition_guid_t = [u8; 16usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_partition_t {
    pub type_guid: zbi_partition_guid_t,
    pub uniq_guid: zbi_partition_guid_t,
    pub first_block: u64,
    pub last_block: u64,
    pub flags: u64,
    pub name: [::core::ffi::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_partition_t"][::core::mem::size_of::<zbi_partition_t>() - 88usize];
    ["Alignment of zbi_partition_t"][::core::mem::align_of::<zbi_partition_t>() - 8usize];
    ["Offset of field: zbi_partition_t::type_guid"]
        [::core::mem::offset_of!(zbi_partition_t, type_guid) - 0usize];
    ["Offset of field: zbi_partition_t::uniq_guid"]
        [::core::mem::offset_of!(zbi_partition_t, uniq_guid) - 16usize];
    ["Offset of field: zbi_partition_t::first_block"]
        [::core::mem::offset_of!(zbi_partition_t, first_block) - 32usize];
    ["Offset of field: zbi_partition_t::last_block"]
        [::core::mem::offset_of!(zbi_partition_t, last_block) - 40usize];
    ["Offset of field: zbi_partition_t::flags"]
        [::core::mem::offset_of!(zbi_partition_t, flags) - 48usize];
    ["Offset of field: zbi_partition_t::name"]
        [::core::mem::offset_of!(zbi_partition_t, name) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_partition_map_t {
    pub block_count: u64,
    pub block_size: u64,
    pub partition_count: u32,
    pub reserved: u32,
    pub guid: zbi_partition_guid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_partition_map_t"][::core::mem::size_of::<zbi_partition_map_t>() - 40usize];
    ["Alignment of zbi_partition_map_t"][::core::mem::align_of::<zbi_partition_map_t>() - 8usize];
    ["Offset of field: zbi_partition_map_t::block_count"]
        [::core::mem::offset_of!(zbi_partition_map_t, block_count) - 0usize];
    ["Offset of field: zbi_partition_map_t::block_size"]
        [::core::mem::offset_of!(zbi_partition_map_t, block_size) - 8usize];
    ["Offset of field: zbi_partition_map_t::partition_count"]
        [::core::mem::offset_of!(zbi_partition_map_t, partition_count) - 16usize];
    ["Offset of field: zbi_partition_map_t::reserved"]
        [::core::mem::offset_of!(zbi_partition_map_t, reserved) - 20usize];
    ["Offset of field: zbi_partition_map_t::guid"]
        [::core::mem::offset_of!(zbi_partition_map_t, guid) - 24usize];
};
pub type zbi_hw_reboot_reason_t = u32;
pub const ZBI_HW_REBOOT_REASON_UNDEFINED: zbi_hw_reboot_reason_t = 0;
pub const ZBI_HW_REBOOT_REASON_COLD: zbi_hw_reboot_reason_t = 1;
pub const ZBI_HW_REBOOT_REASON_WARM: zbi_hw_reboot_reason_t = 2;
pub const ZBI_HW_REBOOT_REASON_BROWNOUT: zbi_hw_reboot_reason_t = 3;
pub const ZBI_HW_REBOOT_REASON_WATCHDOG: zbi_hw_reboot_reason_t = 4;
pub const ZBI_ALIGNMENT: u32 = 8;
pub const ZBI_TYPE_KERNEL_PREFIX: u32 = 5132875;
pub const ZBI_TYPE_KERNEL_MASK: u32 = 16777215;
pub const ZBI_TYPE_DRIVER_METADATA_PREFIX: u32 = 109;
pub const ZBI_TYPE_DRIVER_METADATA_MASK: u32 = 255;
pub type zbi_type_t = u32;
pub const ZBI_TYPE_CONTAINER: zbi_type_t = 1414483778;
pub const ZBI_TYPE_KERNEL_X64: zbi_type_t = 1280201291;
pub const ZBI_TYPE_KERNEL_ARM64: zbi_type_t = 944656971;
pub const ZBI_TYPE_KERNEL_RISCV64: zbi_type_t = 1447973451;
pub const ZBI_TYPE_DISCARD: zbi_type_t = 1346980691;
pub const ZBI_TYPE_STORAGE_RAMDISK: zbi_type_t = 1263748178;
pub const ZBI_TYPE_STORAGE_BOOTFS: zbi_type_t = 1112753730;
pub const ZBI_TYPE_STORAGE_KERNEL: zbi_type_t = 1381258059;
pub const ZBI_TYPE_STORAGE_BOOTFS_FACTORY: zbi_type_t = 1179862594;
pub const ZBI_TYPE_CMDLINE: zbi_type_t = 1279544643;
pub const ZBI_TYPE_CRASHLOG: zbi_type_t = 1297043266;
pub const ZBI_TYPE_NVRAM: zbi_type_t = 1280071246;
pub const ZBI_TYPE_PLATFORM_ID: zbi_type_t = 1145654352;
pub const ZBI_TYPE_DRV_BOARD_INFO: zbi_type_t = 1230193261;
pub const ZBI_TYPE_CPU_TOPOLOGY: zbi_type_t = 1129338163;
pub const ZBI_TYPE_MEM_CONFIG: zbi_type_t = 1129137485;
pub const ZBI_TYPE_KERNEL_DRIVER: zbi_type_t = 1448232011;
pub const ZBI_TYPE_ACPI_RSDP: zbi_type_t = 1346655058;
pub const ZBI_TYPE_SMBIOS: zbi_type_t = 1229081939;
pub const ZBI_TYPE_EFI_SYSTEM_TABLE: zbi_type_t = 1397311045;
pub const ZBI_TYPE_EFI_MEMORY_ATTRIBUTES_TABLE: zbi_type_t = 1413565765;
pub const ZBI_TYPE_FRAMEBUFFER: zbi_type_t = 1111906131;
pub const ZBI_TYPE_IMAGE_ARGS: zbi_type_t = 1196573001;
pub const ZBI_TYPE_BOOT_VERSION: zbi_type_t = 1397904962;
pub const ZBI_TYPE_DRV_MAC_ADDRESS: zbi_type_t = 1128353133;
pub const ZBI_TYPE_DRV_PARTITION_MAP: zbi_type_t = 1414680685;
pub const ZBI_TYPE_DRV_BOARD_PRIVATE: zbi_type_t = 1380926061;
pub const ZBI_TYPE_HW_REBOOT_REASON: zbi_type_t = 1112692552;
pub const ZBI_TYPE_SERIAL_NUMBER: zbi_type_t = 1313624659;
pub const ZBI_TYPE_BOOTLOADER_FILE: zbi_type_t = 1279677506;
pub const ZBI_TYPE_DEVICETREE: zbi_type_t = 3490578157;
pub const ZBI_TYPE_SECURE_ENTROPY: zbi_type_t = 1145979218;
pub const ZBI_TYPE_DEBUGDATA: zbi_type_t = 1145520708;
pub const ZBI_TYPE_RISCV64_ISA_STRTAB: zbi_type_t = 1095977302;
pub const ZBI_CONTAINER_MAGIC: u32 = 2257385446;
pub const ZBI_ITEM_MAGIC: u32 = 3044546345;
pub type zbi_flags_t = u32;
pub const ZBI_FLAGS_VERSION: zbi_flags_t = 65536;
pub const ZBI_FLAGS_CRC32: zbi_flags_t = 131072;
pub const ZBI_ITEM_NO_CRC32: u32 = 1250420950;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, IntoBytes, Immutable, KnownLayout)]
pub struct zbi_header_t {
    pub type_: zbi_type_t,
    pub length: u32,
    pub extra: u32,
    pub flags: zbi_flags_t,
    pub reserved0: u32,
    pub reserved1: u32,
    pub magic: u32,
    pub crc32: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zbi_header_t"][::core::mem::size_of::<zbi_header_t>() - 32usize];
    ["Alignment of zbi_header_t"][::core::mem::align_of::<zbi_header_t>() - 4usize];
    ["Offset of field: zbi_header_t::type_"][::core::mem::offset_of!(zbi_header_t, type_) - 0usize];
    ["Offset of field: zbi_header_t::length"]
        [::core::mem::offset_of!(zbi_header_t, length) - 4usize];
    ["Offset of field: zbi_header_t::extra"][::core::mem::offset_of!(zbi_header_t, extra) - 8usize];
    ["Offset of field: zbi_header_t::flags"]
        [::core::mem::offset_of!(zbi_header_t, flags) - 12usize];
    ["Offset of field: zbi_header_t::reserved0"]
        [::core::mem::offset_of!(zbi_header_t, reserved0) - 16usize];
    ["Offset of field: zbi_header_t::reserved1"]
        [::core::mem::offset_of!(zbi_header_t, reserved1) - 20usize];
    ["Offset of field: zbi_header_t::magic"]
        [::core::mem::offset_of!(zbi_header_t, magic) - 24usize];
    ["Offset of field: zbi_header_t::crc32"]
        [::core::mem::offset_of!(zbi_header_t, crc32) - 28usize];
};
