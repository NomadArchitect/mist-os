# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

######### STEPS FOR ADDING HONEYDEW FUNCTIONAL TEST TO INFRA - START ###########
# 1. Identify which all <PRODUCT>.<BOARD> you like to run this test on
# 2. For each of the <PRODUCT>.<BOARD> there is a Test group defined below.
#    Accordingly update each of <PRODUCT>.<BOARD> Infra Test group where you
#    like to run the test
########## STEPS FOR ADDING HONEYDEW FUNCTIONAL TEST TO INFRA - END ############

# Infra Test groups:
# For every <PRODUCT>.<BOARD> that we plan to run the tests on, below test
# groups are created:
#
# <PRODUCT>.<BOARD>
#     Stable (Tests that passed for at least 1000+ consecutive runs)
#         Tests that require SL4F transport, if any
#         Tests that does not require SL4F transport
#     Unstable (Tests that are yet to pass 1000 consecutive runs)
#         Tests that require SL4F transport, if any
#         Tests that does not require SL4F transport
#
# Note: Please refrain from referencing one group in another one (such as
# including `core_x64_stable_tests` in `workbench_x64_stable_tests`)
# as it is not guaranteed that every single test case supported by
# <product-#1>.<board-#1> is supported by other <product-#2>.<board-#2>

template("group_with_no_dir_target_deps") {
  group(target_name) {
    forward_variables_from(invoker, "*")
    assert_no_deps = [ ":*" ]
    if (defined(invoker.assert_no_deps)) {
      assert_no_deps += invoker.assert_no_deps
    }
  }
}

############################# Test groups - Start ##############################
# core.x64
group_with_no_dir_target_deps("core_x64_stable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests/test_inspect:inspect_test_ffx($host_toolchain)",
    "affordance_tests/test_tracing:tracing_test_fc($host_toolchain)",
    "auxiliary_device_tests/test_power_switch_dmc:power_switch_dmc_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:x64_emu_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:x64_nuc_test($host_toolchain)",
    "transport_tests:test_ffx_on_x64",
    "transport_tests/test_ffx:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "transport_tests/test_serial:serial_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("core_x64_unstable_tests") {
  testonly = true
  public_deps = []
}

# workbench.x64
group_with_no_dir_target_deps("workbench_x64_stable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests:test_screenshot_ffx",
    "affordance_tests:test_user_input_fc",
    "affordance_tests/test_inspect:inspect_test_ffx($host_toolchain)",
    "affordance_tests/test_location:location_test_fc($host_toolchain)",
    "affordance_tests/test_netstack:netstack_test_fc($host_toolchain)",
    "affordance_tests/test_tracing:tracing_test_fc($host_toolchain)",
    "auxiliary_device_tests/test_power_switch_dmc:power_switch_dmc_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:x64_emu_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:x64_nuc_test($host_toolchain)",
    "transport_tests:test_ffx_on_x64",
    "transport_tests/test_ffx:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "transport_tests/test_serial:serial_test($host_toolchain)",
    "//src/testing/end_to_end/honeydew/honeydew/affordances/session/tests/functional_tests:test_session_ffx",
  ]
}

group_with_no_dir_target_deps("workbench_x64_unstable_tests") {
  testonly = true
  public_deps = []
}

# core.vim3
group_with_no_dir_target_deps("core_vim3_stable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests/test_inspect:inspect_test_ffx($host_toolchain)",
    "affordance_tests/test_tracing:tracing_test_fc($host_toolchain)",
    "auxiliary_device_tests/test_power_switch_dmc:power_switch_dmc_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:vim3_test($host_toolchain)",
    "transport_tests:test_ffx_on_vim3",
    "transport_tests/test_fastboot:fastboot_using_serial_test($host_toolchain)",
    "transport_tests/test_ffx:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "transport_tests/test_serial:serial_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("core_vim3_unstable_tests") {
  testonly = true
  public_deps =
      [ "transport_tests/test_fastboot:fastboot_test($host_toolchain)" ]
}

# workbench.vim3
group_with_no_dir_target_deps("workbench_vim3_stable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests:test_screenshot_ffx",
    "affordance_tests:test_user_input_fc",
    "affordance_tests/test_inspect:inspect_test_ffx($host_toolchain)",
    "affordance_tests/test_netstack:netstack_test_fc($host_toolchain)",
    "affordance_tests/test_rtc:rtc_test_fc($host_toolchain)",
    "affordance_tests/test_tracing:tracing_test_fc($host_toolchain)",
    "auxiliary_device_tests/test_power_switch_dmc:power_switch_dmc_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:vim3_test($host_toolchain)",
    "transport_tests:test_ffx_on_vim3",
    "transport_tests/test_fastboot:fastboot_using_serial_test($host_toolchain)",
    "transport_tests/test_ffx:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "transport_tests/test_serial:serial_test($host_toolchain)",
    "//src/testing/end_to_end/honeydew/honeydew/affordances/session/tests/functional_tests:test_session_ffx",
  ]
}

group_with_no_dir_target_deps("workbench_vim3_unstable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests/test_location:location_test_fc($host_toolchain)",
    "transport_tests/test_fastboot:fastboot_test($host_toolchain)",
  ]
}

# starnix.arm64
# Note: This will be run on internal *.arm64 builder, hence using `starnix` here instead of internal `<PRODUCT>` name.
group_with_no_dir_target_deps("starnix_arm64_stable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests/test_inspect:inspect_test_ffx($host_toolchain)",
    "affordance_tests/test_netstack:netstack_test_fc($host_toolchain)",
    "auxiliary_device_tests/test_power_switch_dmc:power_switch_dmc_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:vim3_test($host_toolchain)",
    "transport_tests/test_fastboot:fastboot_test($host_toolchain)",
    "transport_tests/test_fastboot:fastboot_using_serial_test($host_toolchain)",
    "transport_tests/test_ffx:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
    "transport_tests/test_serial:serial_test($host_toolchain)",
  ]
}

group_with_no_dir_target_deps("starnix_arm64_unstable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests/test_rtc:rtc_test_fc($host_toolchain)",

    # TODO(b/393370031): Re-enable once fixed.
    "transport_tests:test_ffx_on_vim3",
  ]
}

# smart_display.nelson
group_with_no_dir_target_deps("smart_display_nelson_stable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests:test_screenshot_ffx",
    "affordance_tests/test_inspect:inspect_test_ffx($host_toolchain)",
    "affordance_tests/test_location:location_test_fc($host_toolchain)",
    "affordance_tests/test_netstack:netstack_test_fc($host_toolchain)",
    "auxiliary_device_tests/test_power_switch_dmc:power_switch_dmc_test($host_toolchain)",
    "fuchsia_device_tests/test_fuchsia_device:nelson_test($host_toolchain)",
    "transport_tests:test_ffx_on_nelson",
    "transport_tests/test_fastboot:fastboot_test($host_toolchain)",
    "transport_tests/test_fastboot:fastboot_using_serial_test($host_toolchain)",
    "//src/testing/end_to_end/honeydew/honeydew/affordances/session/tests/functional_tests:test_session_ffx",
  ]
}

group_with_no_dir_target_deps("smart_display_nelson_unstable_tests") {
  testonly = true
  public_deps = [
    "affordance_tests/test_tracing:tracing_test_fc($host_toolchain)",
    "transport_tests/test_ffx:ffx_wait_for_rcs_disconnection_test($host_toolchain)",
  ]
}

############################## Test groups - End ###############################

# All of the Honeydew functional tests and their dependencies.
group("tests") {
  testonly = true
  public_deps = [
    "affordance_tests:tests",
    "auxiliary_device_tests:tests",
    "fuchsia_device_tests:tests",
    "transport_tests:tests",
  ]
}
