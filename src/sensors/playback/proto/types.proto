// Copyright 2024 The Fuchsia Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package fuchsia.sensors;

// Labels for different types of sensors.
enum SensorType {
  // Unknown.
  UNKNOWN = 0;

  // Raw inertial measurement.
  ACCELEROMETER_UNCALIBRATED = 35;
  GYROSCOPE_UNCALIBRATED = 16;
  MAGNETIC_FIELD_UNCALIBRATED = 14;

  // Calibrated inertial measurement.
  ACCELEROMETER = 1;
  GYROSCOPE = 4;
  MAGNETIC_FIELD = 2;

  // Derived/fused from inertial measurement.
  ORIENTATION = 3;
  GRAVITY = 9;
  LINEAR_ACCELERATION = 10;
  ROTATION_VECTOR = 11;
  GAME_ROTATION_VECTOR = 15;
  SIGNIFICANT_MOTION = 17;
  STEP_DETECTOR = 18;
  STEP_COUNTER = 19;
  GEOMAGNETIC_ROTATION_VECTOR = 20;
  TILT_DETECTOR = 22;
  WAKE_GESTURE = 23;
  GLANCE_GESTURE = 24;
  PICK_UP_GESTURE = 25;
  WRIST_TILT_GESTURE = 26;
  DEVICE_ORIENTATION = 27;
  POSE_6DOF = 28;
  STATIONARY_DETECT = 29;
  MOTION_DETECT = 30;
  LOW_LATENCY_OFFBODY_DETECT = 34;

  // Environmental.
  LIGHT = 5;
  PRESSURE = 6;
  PROXIMITY = 8;
  RELATIVE_HUMIDITY = 12;
  AMBIENT_TEMPERATURE = 13;

  // Biometric.
  HEART_RATE = 21;
  HEART_BEAT = 31;

  // Base for device manufacturers' private sensor types.
  DEVICE_PRIVATE_BASE = 0x10000;
}

// Describes a sensor's wake-up behavior. A wake-up sensor will wake up the
// application processor when there is new data available. A non wake-up sensor
// will not.
enum SensorWakeUpType {
  NON_WAKE_UP = 0;

  WAKE_UP = 1;
}

// Describes a sensor's reporting mode.
enum SensorReportingMode {
  // Continuous reporting will continuously deliver samples, subject to the
  // requested sampling rate and maximum reporting latency.
  CONTINUOUS = 0;

  // On-change reporting will deliver a sample any time the sensor value
  // changes, subject to the requested sampling rate and max reporting
  // latency.
  ON_CHANGE = 1;

  // One-shot reporting will deliver a single sample and then disable the
  // sensor.
  ONE_SHOT = 2;
}

// All the information to describe a specific sensor and its output.
message SensorInfo {
  // Identifies this sensor.
  optional /*required*/ int32 sensor_id = 1;

  // Name of this sensor.
  // All sensors of the same "type" must have a different "name".
  optional /*required*/ string name = 2;

  // Vendor of the hardware part.
  optional /*required*/ string vendor = 3;

  // Version number. See documentation for SensorVersion.
  optional /*required*/ int32 version = 4;

  // This sensor's type.
  optional /*required*/ SensorType sensor_type = 5;

  // The wake-up behavior of this sensor.
  optional /*required*/ SensorWakeUpType wake_up = 6;

  // The reporting mode of this sensor.
  optional /*required*/ SensorReportingMode reporting_mode = 7;
}

message Vec3F {
  float x = 1;
  float y = 2;
  float z = 3;
}

// Uncalibrated samples from 3 axis sensors (eg. accelerometer, gyroscope,
// magnetometer) come with bias data for each axis.
message UncalibratedVec3FSample {
  Vec3F sample = 1;
  Vec3F biases = 2;
}

message QuaternionF {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

// A 6 degree of freedom (“6DOF”) pose describes a position and orientation in
// a 3D space.
message Pose {
  // A quaternion representing the orientation.
  QuaternionF rotation = 1;

  // A vector representing the position.
  Vec3F translation = 2;

  // A quaternion describing the rotation from the last known orientation.
  QuaternionF rotation_delta = 3;

  // A vector describing the translation from the last known position.
  Vec3F translation_delta = 4;
}

// A sample from a single sensor.
message SensorEvent {
  // The sample timestamp relative to device boot.
  optional /*required*/ int64 timestamp = 1;

  // The SensorId of the originating sensor.
  optional /*required*/ int32 sensor_id = 2;

  // The type of the originating sensor.
  optional /*required*/ SensorType sensor_type = 3;

  // A sequence number that will be incremented for every sensor event
  // emitted.
  optional /*required*/ uint64 sequence_number = 4;

  // All of the potential data types a SensorEvent may carry depending on the
  // sensor type.
  oneof payload {
    // The following sensors emit basic 3D float vectors:
    // ACCELEROMETER, MAGNETIC_FIELD, ORIENTATION, GYROSCOPE, GRAVITY,
    // LINEAR_ACCELERATION.
    Vec3F vec3 = 5;

    // The following sensors emit floating point quaternions:
    // ROTATION_VECTOR, GEOMAGNETIC_ROTATION_VECTOR, GAME_ROTATION_VECTOR.
    QuaternionF quaternion = 6;

    // The following sensors emit pairs of float vectors (see documentation for
    // UncalibratedImuSample):
    // MAGNETIC_FIELD_UNCALIBRATED, GYROSCOPE_UNCALIBRATED,
    // ACCELEROMETER_UNCALIBRATED.
    UncalibratedVec3FSample uncalibrated_vec3 = 7;

    // The following sensors emit a single float:
    // DEVICE_ORIENTATION, LIGHT, PRESSURE, TEMPERATURE, PROXIMITY,
    // RELATIVE_HUMIDITY, AMBIENT_TEMPERATURE, SIGNIFICANT_MOTION,
    // STEP_DETECTOR, TILT_DETECTOR, WAKE_GESTURE, GLANCE_GESTURE,
    // PICK_UP_GESTURE, WRIST_TILT_GESTURE, STATIONARY_DETECT, MOTION_DETECT,
    // HEART_BEAT, LOW_LATENCY_OFFBODY_DETECT, HEART_RATE.
    float float_value = 8;

    // The following senors emit an unsigned 64-bit integer:
    // STEP_COUNTER
    uint64 integer_value = 9;

    // The following sensor types emit a pose (see documentation for Pose):
    // POSE_6DOF.
    Pose pose = 10;
  }
}
