# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/board_configuration.gni")
import("//build/assembly/board_input_bundle.gni")

assert(
    current_toolchain == default_toolchain,
    "The power_testing_msd_arm_mali_vim3 board can only be defined in the default toolchain.")
assert(
    current_cpu == "arm64",
    "The power_testing_msd_arm_mali_vim3 board can only be defined in an arm64 toolchain.")

board_configuration("power_testing_msd_arm_mali_vim3") {
  provided_features = [
    "fuchsia::driver_framework_v2_support",
    "fuchsia::pmm_checker",
  ]
  devicetree = "//src/devices/board/drivers/vim3-devicetree:vim3"
  input_bundles = [
    ":drivers",
    ":board_driver",
  ]
  filesystems = {
    vbmeta = {
      key = "//src/firmware/avb_keys/vim3/vim3-dev-key/vim3_devkey_atx_psk.pem"
      key_metadata =
          "//src/firmware/avb_keys/vim3/vim3-dev-key/vim3_dev_atx_metadata.bin"
    }
    zbi = {
      compression = "zstd.max"
    }
  }

  kernel = {
    contiguous_physical_pages = true
  }

  platform = {
    development_support = {
      # Enable the Debug Access Port (DAP) for improved lockup/crash diagnostics.
      enable_debug_access_port_for_soc = "amlogic-a311d"
    }
    sysmem_defaults = {
      # The AMlogic display engine needs contiguous physical memory for each
      # frame buffer, because it does not have a page table walker.
      #
      # The maximum supported resolution is documented below.
      # * "A311D Quick Reference Manual" revision 01, pages 2-3
      # * "A311D Datasheet" revision 08, section 2.2 "Features", pages 4-5
      #
      # These pages can be loaned back to zircon for use in pager-backed VMOs,
      # but these pages won't be used in "anonymous" VMOs (at least for now).
      # Whether the loaned-back pages can be absorbed by pager-backed VMOs is
      # workload dependent. The "k ppb stats_on" command can be used to
      # determine whether all loaned pages are being used by pager-backed VMOs.
      #
      # This board-level default can be overriden by platform-level config.
      #
      # TODO(https://fxbug.dev/42072489): This should be overriden per product
      # config.
      contiguous_memory_size = {
        # 200 MiB
        fixed = 209715200
      }
      protected_memory_size = {
        fixed = 0
      }
      contiguous_guard_pages_unused = false
    }
  }
}

board_input_bundle("drivers") {
  drivers = [
    {
      package_target = "//src/devices/block/drivers/aml-sdmmc:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-sdmmc.cm" ]
    },
    {
      package_target = "//src/devices/block/drivers/bootpart:package"
      package_set = "bootfs"
      driver_components = [ "meta/bootpart.cm" ]
    },
    {
      package_target = "//src/devices/clock/drivers/vim3-clk:bazel_package"
      package_set = "bootfs"
      driver_components = [ "meta/vim3-clk.cm" ]
    },
    {
      package_target = "//src/devices/cpu/drivers/aml-cpu:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-cpu.cm" ]
    },
    {
      package_target = "//src/devices/gpio/drivers/aml-gpio:bazel_package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-gpio.cm" ]
    },
    {
      package_target = "//src/devices/gpio/drivers/ti-tca6408a:package"
      package_set = "bootfs"
      driver_components = [ "meta/ti-tca6408a.cm" ]
    },
    {
      package_target = "//src/devices/i2c/drivers/aml-i2c:bazel_package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-i2c.cm" ]
    },
    {
      package_target = "//src/devices/mcu/drivers/vim3-mcu:package"
      package_set = "bootfs"
      driver_components = [ "meta/vim3-mcu.cm" ]
    },
    {
      package_target = "//src/devices/power/drivers/aml-meson-power:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-meson-power.cm" ]
    },
    {
      package_target = "//src/devices/power/drivers/aml-pwm-regulator:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-pwm-regulator.cm" ]
    },
    {
      package_target = "//src/devices/power/drivers/fusb302:package"
      package_set = "bootfs"
      driver_components = [ "meta/fusb302.cm" ]
    },
    {
      package_target = "//src/devices/pwm/drivers/aml-pwm:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-pwm.cm" ]
    },
    {
      package_target = "//src/devices/pwm/drivers/aml-pwm-init:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-pwm-init.cm" ]
    },
    {
      package_target = "//src/devices/serial/drivers/aml-uart:package-dfv2"
      package_set = "bootfs"
      driver_components = [ "meta/aml-uart-dfv2.cm" ]
    },
    {
      package_target = "//src/devices/thermal/drivers/aml-thermal:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-thermal.cm" ]
    },
    {
      package_target = "//src/devices/temperature/drivers/aml-trip:package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-trip.cm" ]
    },
    {
      package_target = "//src/devices/usb/drivers/dwc2:package"
      package_set = "bootfs"
      driver_components = [ "meta/dwc2.cm" ]
    },
    {
      package_target = "//src/devices/usb/drivers/aml-usb-phy:bazel_package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-usb-phy.cm" ]
    },
    {
      package_target = "//src/ui/backlight/drivers/vim3-pwm-backlight:package"
      package_set = "bootfs"
      driver_components = [ "meta/vim3-pwm-backlight.cm" ]
    },
    {
      package_target = "//src/ui/input/drivers/adc-buttons:bazel_package"
      package_set = "bootfs"
      driver_components = [ "meta/adc-buttons.cm" ]
    },
    {
      package_target = "//src/ui/input/drivers/focaltech:package"
      package_set = "bootfs"
      driver_components = [ "meta/focaltech.cm" ]
    },
    {
      package_target = "//src/graphics/drivers/aml-gpu:aml-gpu-package"
      package_set = "bootfs"
      driver_components = [ "meta/aml-gpu.cm" ]
    },
    {
      package_target = "//src/graphics/drivers/msd-arm-mali:msd-arm-mali"
      package_set = "bootfs"
      driver_components = [ "meta/msd_arm.cm" ]
    },

    # arm64 common drivers
    {
      package_target = "//src/devices/bus/drivers/pci:package"
      package_set = "bootfs"
      driver_components = [ "meta/bus-pci.cm" ]
    },
    {
      package_target = "//src/devices/usb/drivers/xhci:package"
      package_set = "bootfs"
      driver_components = [ "meta/xhci.cm" ]
    },
  ]
}

board_input_bundle("board_driver") {
  configuration = {
    power_manager = "//src/power/power-manager/node_config/vim3_devicetree_node_config.json5"
    thermal = "//src/power/power-manager/thermal_config/vim3_devicetree.json5"
  }
  drivers = [
    {
      package_target =
          "//src/devices/board/drivers/vim3-devicetree:bazel_package"
      package_set = "bootfs"
      driver_components = [ "meta/vim3-devicetree.cm" ]
    },
  ]
}
