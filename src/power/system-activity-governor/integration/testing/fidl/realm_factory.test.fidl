// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library test.systemactivitygovernor;

using fuchsia.testing.harness;

/// RealmOptions tells the RealmFactory protocol how to create the test realm.
type RealmOptions = resource table {
    /// Specifies whether to use a fake SAG that exposes additional protocols
    /// to set/watch real SAG power element power levels. Defaults to false.
    1: use_fake_sag bool;

    /// Specifies whether to set the fuchsia.power.WaitForSuspendingToken config
    /// capability to true. If true, SAG will wait to receive a token through
    /// [`fuchsia.power.system/CpuElementManager.AddExectuionStateDependency`].
    /// If false, SAG will skip adding external Execution State dependencies.
    /// Defaults to false.
    2: wait_for_suspending_token bool;

    /// Specifies whether SAG will use a suspender or not. Defaults to true.
    3: use_suspender bool;
};

@discoverable
open protocol RealmFactory {
    /// Creates a new realm and binds the given RealmProxy server end to it.
    flexible CreateRealm(resource struct {
        realm_server server_end:fuchsia.testing.harness.RealmProxy;
    }) -> (struct {
        activity_governor_moniker string:MAX;
    }) error fuchsia.testing.harness.OperationError;

    /// Creates a new realm and accepts options.
    flexible CreateRealmExt(resource struct {
        options RealmOptions;
        realm_server server_end:fuchsia.testing.harness.RealmProxy;
    }) -> (struct {
        activity_governor_moniker string:MAX;
    }) error fuchsia.testing.harness.OperationError;
};
