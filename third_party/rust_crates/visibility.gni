# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

md5_visibility = [
  #  ________  _________  ________  ________
  # |\   ____\|\___   ___\\   __  \|\   __  \
  # \ \  \___|\|___ \  \_\ \  \|\  \ \  \|\  \
  #  \ \_____  \   \ \  \ \ \  \\\  \ \   ____\
  #   \|____|\  \   \ \  \ \ \  \\\  \ \  \___|
  #     ____\_\  \   \ \__\ \ \_______\ \__\
  #    |\_________\   \|__|  \|_______|\|__|
  #    \|_________|
  #
  # This is an allowlist of targets that use the `md-5` Rust library, which
  # implements the insecure and deprecated MD-5 hash function. Code should only
  # use this if it's implementing legacy protocols that require MD-5; it should
  # never be used for new cryptographic development.

  "//src/connectivity/wlan/lib/rsn:*",
]

sha1_visibility = [
  #  ________  _________  ________  ________
  # |\   ____\|\___   ___\\   __  \|\   __  \
  # \ \  \___|\|___ \  \_\ \  \|\  \ \  \|\  \
  #  \ \_____  \   \ \  \ \ \  \\\  \ \   ____\
  #   \|____|\  \   \ \  \ \ \  \\\  \ \  \___|
  #     ____\_\  \   \ \__\ \ \_______\ \__\
  #    |\_________\   \|__|  \|_______|\|__|
  #    \|_________|
  #
  # This is an allowlist of targets that use the `sha1` Rust library, which
  # implements the insecure and deprecated SHA-1 hash function. Code should only
  # use this if it's implementing legacy protocols that require SHA-1; it should
  # never be used for new cryptographic development.

  "//src/connectivity/wlan/lib/rsn:*",
]

lazy_static_visibility = [
  #  ________  _________  ________  ________
  # |\   ____\|\___   ___\\   __  \|\   __  \
  # \ \  \___|\|___ \  \_\ \  \|\  \ \  \|\  \
  #  \ \_____  \   \ \  \ \ \  \\\  \ \   ____\
  #   \|____|\  \   \ \  \ \ \  \\\  \ \  \___|
  #     ____\_\  \   \ \__\ \ \_______\ \__\
  #    |\_________\   \|__|  \|_______|\|__|
  #    \|_________|
  #
  # This is an allowlist of targets that use the `lazy_static` Rust library, as
  # of Rust 1.80, LazyLock is now stable which should cover most of the use
  # cases for `lazy_static`.
  #
  # Only add to this list if you have a use case that isn't supported by the
  # standard library APIs.
  #
  # To regenerate, run:
  # (cd $FUCHSIA_DIR && git grep  --files-with-matches '//third_party/rust_crates:lazy_static' -- '*BUILD.gn' | sed 's|\(.*\)/BUILD.gn|"\1:*",|')
  "//examples/components/storage:*",
  "//examples/fidl/new/key_value_store/add_iterator/rust/server:*",
  "//examples/fidl/new/key_value_store/add_read_item/rust/server:*",
  "//examples/fidl/new/key_value_store/baseline/rust/server:*",
  "//examples/fidl/new/key_value_store/support_exports/rust/server:*",
  "//examples/fidl/new/key_value_store/support_trees/rust/server:*",
  "//examples/fidl/new/key_value_store/use_generic_values/rust/server:*",
  "//src/connectivity/lowpan/drivers/lowpan-ot-driver:*",
  "//src/connectivity/lowpan/service:*",
  "//src/connectivity/network/netstack3/core:*",
  "//src/connectivity/policy/netcfg:*",
  "//src/connectivity/wlan/lib/common/rust:*",
  "//src/connectivity/wlan/lib/ieee80211-testutils:*",
  "//src/connectivity/wlan/lib/ieee80211:*",
  "//src/connectivity/wlan/lib/mlme/rust:*",
  "//src/connectivity/wlan/lib/rsn:*",
  "//src/connectivity/wlan/lib/sae:*",
  "//src/connectivity/wlan/lib/sme:*",
  "//src/connectivity/wlan/testing/hw-sim:*",
  "//src/connectivity/wlan/testing/hw-sim/test/connect_with_bad_password:*",
  "//src/connectivity/wlan/testing/hw-sim/test/connect_with_wrong_credential_type:*",
  "//src/connectivity/wlan/testing/hw-sim/test/ethernet_tx_rx:*",
  "//src/connectivity/wlan/testing/hw-sim/test/multiple_clients_ap:*",
  "//src/connectivity/wlan/testing/hw-sim/test/rate_selection:*",
  "//src/connectivity/wlan/testing/hw-sim/test/scan_contemporary_privacy:*",
  "//src/connectivity/wlan/testing/hw-sim/test/scan_legacy_privacy:*",
  "//src/connectivity/wlan/testing/hw-sim/test/simulate_scan:*",
  "//src/connectivity/wlan/testing/hw-sim/test/verify_wlan_inspect:*",
  "//src/connectivity/wlan/tests/drivers-only/common:*",
  "//src/connectivity/wlan/tests/helpers/fullmac-helpers:*",
  "//src/connectivity/wlan/wlancfg:*",
  "//src/developer/fastboot:*",
  "//src/developer/ffx/config:*",
  "//src/developer/ffx/daemon/protocols/mdns:*",
  "//src/developer/ffx/daemon/protocols/repo:*",
  "//src/developer/ffx/lib/mdns_discovery:*",
  "//src/developer/ffx/lib/netext:*",
  "//src/developer/ffx/plugins/audio/device:*",
  "//src/developer/ffx/plugins/fuzz:*",
  "//src/developer/ffx/plugins/platform/preflight:*",
  "//src/developer/ffx/plugins/process:*",
  "//src/developer/ffx/plugins/product/list:*",
  "//src/developer/ffx/plugins/profile/memory:*",
  "//src/developer/ffx/plugins/target/list:*",
  "//src/developer/ffx/plugins/test:*",
  "//src/developer/ffx/plugins/trace:*",
  "//src/developer/ffx/tools/starnix:*",
  "//src/developer/ffx/tools/triage:*",
  "//src/devices/ctap:*",
  "//src/devices/lib/bind:*",
  "//src/devices/lib/fidl-ir:*",
  "//src/devices/pci/bin/lspci:*",
  "//src/fonts:*",
  "//src/hwinfo/mock:*",
  "//src/lib/assembly/platform_configuration:*",
  "//src/lib/async-utils:*",
  "//src/lib/fuchsia-async:*",
  "//src/lib/fuchsia-component-test/realm_builder_server:*",
  "//src/lib/fuchsia-url:*",
  "//src/lib/icu_data/rust/icu_data:*",
  "//src/lib/intl/strings:*",
  "//src/lib/intl/unicode_utils/unicode_blocks:*",
  "//src/lib/process_builder:*",
  "//src/lib/scoped_task:*",
  "//src/lib/test_util:*",
  "//src/lib/ui/keymaps:*",
  "//src/lib/usb_bulk/rust:*",
  "//src/lib/webpki-roots-fuchsia:*",
  "//src/media/stream_processors/test:*",
  "//src/performance/memory/heapdump/instrumentation:*",
  "//src/power/broker:*",
  "//src/recovery/lib/recovery-ui:*",
  "//src/recovery/lib/recovery-util:*",
  "//src/session/bin/element_manager:*",
  "//src/session/bin/session_manager:*",
  "//src/session/lib/realm_management:*",
  "//src/settings/service:*",
  "//src/storage/fxfs/platform:*",
  "//src/storage/lib/block_client/rust:*",
  "//src/sys/component_manager:*",
  "//src/sys/component_manager/lib/builtins:*",
  "//src/sys/component_manager/lib/diagnostics:*",
  "//src/sys/component_manager/lib/sandbox:*",
  "//src/sys/lib/cm_fidl_validator:*",
  "//src/sys/lib/cm_fidl_validator/tests:*",
  "//src/sys/lib/cm_rust:*",
  "//src/sys/lib/cm_types:*",
  "//src/sys/lib/component-events:*",
  "//src/sys/lib/elf_runner:*",
  "//src/sys/lib/fuchsia-bootfs:*",
  "//src/sys/lib/fuchsia-zbi:*",
  "//src/sys/lib/routing:*",
  "//src/sys/lib/runner:*",
  "//src/sys/pkg/bin/system-update-checker:*",
  "//src/sys/pkg/lib/fuchsia-pkg:*",
  "//src/sys/pkg/lib/tuf:*",
  "//src/sys/test_manager:*",
  "//src/sys/test_runners/elf:*",
  "//src/sys/test_runners/gotests:*",
  "//src/sys/test_runners/gtest:*",
  "//src/sys/test_runners/rust:*",
  "//src/sys/time/httpsdate_time_source:*",
  "//src/sys/time/lib/httpdate-hyper:*",
  "//src/sys/time/testing:*",
  "//src/sys/time/testing/example:*",
  "//src/sys/time/time_test_client:*",
  "//src/sys/time/timekeeper:*",
  "//src/testing/fidl/intl_property_manager:*",
  "//src/testing/pkgstats:*",
  "//src/testing/sl4f:*",
  "//src/ui/bin/brightness_manager:*",
  "//src/ui/lib/input_pipeline:*",
  "//src/virtualization/bin/vmm/device/virtio_input:*",
  "//tools/clidoc:*",
  "//tools/create:*",
  "//tools/doc_checker:*",
  "//tools/fidl/fidldoc:*",
  "//tools/funnel:*",
  "//tools/lib/cml:*",
  "//tools/shush:*",

  # At this time we are not enforcing restrictions on the below.
  "//third_party/*",
  "//vendor/*",
]

once_cell_visibility = [
  #  ________  _________  ________  ________
  # |\   ____\|\___   ___\\   __  \|\   __  \
  # \ \  \___|\|___ \  \_\ \  \|\  \ \  \|\  \
  #  \ \_____  \   \ \  \ \ \  \\\  \ \   ____\
  #   \|____|\  \   \ \  \ \ \  \\\  \ \  \___|
  #     ____\_\  \   \ \__\ \ \_______\ \__\
  #    |\_________\   \|__|  \|_______|\|__|
  #    \|_________|
  #
  # This is an allowlist of targets that use the `once_cell` Rust library, as
  # of Rust 1.80, LazyLock and LazyCell are now stable which should cover most of the use
  # cases for `once_cell.
  #
  # Only add to this list if you have a use case that isn't supported by the
  # standard library APIs.
  #
  # To regenerate, run:
  # (cd $FUCHSIA_DIR && git grep  --files-with-matches '//third_party/rust_crates:once_cell' -- '*BUILD.gn' | sed 's|\(.*\)/BUILD.gn|"//\1:*",|')
  "//src/connectivity/network/netstack3:*",
  "//src/connectivity/network/netstack3/core/filter:*",
  "//src/developer/ffx/testing:*",
  "//src/fonts:*",
  "//src/graphics/lib/compute/rive-rs:*",
  "//src/lib/analytics/rust:*",
  "//src/lib/assembly/config_schema:*",
  "//src/lib/async-utils:*",
  "//src/lib/flyweights:*",
  "//src/lib/ui/carnelian:*",
  "//src/lib/ui/terminal:*",
  "//src/recovery/lib/recovery-ui:*",
  "//src/security/lib/scrutiny/collector:*",
  "//src/security/lib/scrutiny/testing:*",
  "//src/security/lib/scrutiny/utils:*",
  "//src/starnix/kernel:*",
  "//src/starnix/modules/*:*",
  "//src/starnix/lib/extended_pstate:*",
  "//src/starnix/lib/selinux/core:*",
  "//src/starnix/lib/starnix-uapi:*",
  "//src/starnix/lib/starnix-sync:*",
  "//src/starnix_lite/kernel:*",
  "//src/starnix_lite/lib/extended_pstate:*",
  "//src/starnix_lite/lib/selinux/core:*",
  "//src/starnix_lite/lib/starnix-uapi:*",
  "//src/storage/ext4/read-only:*",
  "//src/storage/fxfs:*",
  "//src/storage/fxfs/platform:*",
  "//src/storage/fxfs/tools:*",
  "//src/storage/stress-tests/genericfs:*",
  "//src/sys/lib/elf_runner:*",
  "//src/testing/sl4f:*",
  "//src/ui/testing/puppet:*",
  "//src/virtualization/bin/vmm/device/virtio_sound:*",
  "//tools/auto_owners:*",
  "//tools/shush:*",
  "//tools/update_crates/tests:*",

  # At this time we are not enforcing restrictions on the below.
  "//third_party/*",
  "//vendor/*",
]
