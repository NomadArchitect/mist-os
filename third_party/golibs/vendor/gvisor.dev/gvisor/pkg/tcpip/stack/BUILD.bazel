# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# AUTO-GENERATED - DO NOT EDIT.
#
# Auto-generated by //third_party/golibs/update.sh.

load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "stack",
    srcs = [
        "address_state_mutex.go",
        "address_state_refs.go",
        "addressable_endpoint_state.go",
        "addressable_endpoint_state_mutex.go",
        "bucket_mutex.go",
        "cleanup_endpoints_mutex.go",
        "conn_mutex.go",
        "conn_track_mutex.go",
        "conntrack.go",
        "endpoints_by_nic_mutex.go",
        "gro.go",
        "gro_packet_list.go",
        "headertype_string.go",
        "hook_string.go",
        "icmp_rate_limit.go",
        "iptables.go",
        "iptables_mutex.go",
        "iptables_targets.go",
        "iptables_types.go",
        "multi_port_endpoint_mutex.go",
        "neighbor_cache.go",
        "neighbor_cache_mutex.go",
        "neighbor_entry.go",
        "neighbor_entry_list.go",
        "neighbor_entry_mutex.go",
        "neighborstate_string.go",
        "nic.go",
        "nic_mutex.go",
        "nic_stats.go",
        "nud.go",
        "packet_buffer.go",
        "packet_buffer_list.go",
        "packet_buffer_refs.go",
        "packet_buffer_unsafe.go",
        "packet_endpoint_list_mutex.go",
        "packet_eps_mutex.go",
        "packets_pending_link_resolution_mutex.go",
        "pending_packets.go",
        "rand.go",
        "registration.go",
        "route.go",
        "route_mutex.go",
        "route_stack_mutex.go",
        "stack.go",
        "stack_mutex.go",
        "stack_options.go",
        "stack_state_autogen.go",
        "stack_unsafe_state_autogen.go",
        "state_conn_mutex.go",
        "tcp.go",
        "transport_demuxer.go",
        "transport_endpoints_mutex.go",
        "tuple_list.go",
    ],
    importmap = "go.fuchsia.dev/fuchsia/third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/stack",
    importpath = "gvisor.dev/gvisor/pkg/tcpip/stack",
    visibility = ["//visibility:public"],
    deps = [
        "//third_party/golibs/vendor/golang.org/x/time/rate",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/atomicbitops",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/buffer",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/log",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/rand",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/refs",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/state",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/sync",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/sync/locking",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/hash/jenkins",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/header",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/internal/tcp",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/ports",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/seqnum",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/tcpip/transport/tcpconntrack",
        "//third_party/golibs/vendor/gvisor.dev/gvisor/pkg/waiter",
    ],
)
