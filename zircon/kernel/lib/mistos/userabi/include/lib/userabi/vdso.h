// Copyright 2024 Mist Tecnologia LTDA
// Copyright 2016 The Fuchsia Authors
//
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT

#ifndef ZIRCON_KERNEL_LIB_MISTOS_USERABI_INCLUDE_LIB_USERABI_VDSO_H_
#define ZIRCON_KERNEL_LIB_MISTOS_USERABI_INCLUDE_LIB_USERABI_VDSO_H_

#include <lib/userabi/rodso.h>

#include <vm/vm_object.h>

class VmMapping;

class VDso : public RoDso {
 public:
  static bool vmo_is_vdso(const fbl::RefPtr<VmObject>& vmo) { return false; }

  static bool valid_code_mapping(uint64_t vmo_offset, size_t size) { return false; }

  // Given VmAspace::vdso_code_mapping_, return the vDSO base address.
  static uintptr_t base_address(const fbl::RefPtr<VmMapping>& code_mapping);

  // Forward declaration of generated class.
  // This class is defined in the file vdso-valid-sysret.h,
  // which is generated by scripts/gen-vdso-valid-sysret.sh.
  // It has a static method named after each syscall:
  //     static bool <syscall-name>(uintptr_t offset);
  // This tests whether <start of vDSO code>+offset is a valid PC
  // for entering the kernel with <syscall-name>'s syscall number.
  struct ValidSyscallPC;
};

#endif  // ZIRCON_KERNEL_LIB_MISTOS_USERABI_INCLUDE_LIB_USERABI_VDSO_H_
