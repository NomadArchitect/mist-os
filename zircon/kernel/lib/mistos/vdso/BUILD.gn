# Copyright 2024 Mist Tecnologia LTDA. All rights reserved.
# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/fidl/fidl.gni")

#import("//zircon/tools/zither/zither_golden_files.gni")
import("//zircon/vdso/vdso.gni")
group("vdso") {
  deps = [ ":linux($fidl_toolchain)" ]
}

# See //zircon/tools/zither:tests, which covers the files generation from
# library linux.
group("tests") {
  testonly = true
  deps = []
}

# This is the zx library used by internal FIDL backends to generate syscall
# definitions. For the library imported by `using zx;` in regular FIDL
# libraries, see //zircon/vdso/zx/BUILD.gn.
fidl("linux") {
  visibility = [
    ":*",
    "//zircon/tools/zither:tests",
  ]

  #versioned = "mistos"

  # Order matters! It needs to match linux syscall numbers.
  # NOSORT
  sources = [
    "syscall.fidl",
    #"syscall.test.fidl",
  ]

  #if (exclude_testonly_syscalls) {
  #sources -= [ "syscall.test.fidl" ]
  #}

  # TODO(https://fxbug.dev/42061412): Burn these down.
  experimental_flags = [
    "zx_c_types",
    "allow_arbitrary_error_types",
  ]

  enable_zither = true
  enable_cpp = false
  enable_rust = false

  zither = {
    asm = {
      # While "zx" headers are currently stratified across zircon/* and
      # zircon/syscalls/*, at this time we only use the assembly backend to
      # generate checked-in headers in the former include namespace (i.e.,
      # <zircon/errors.h>).
      output_namespace = "zircon"
    }
  }
}

#zither_golden_files("ifs") {
#  fidl = ":zx"
#  backend = "zircon_ifs"
#  sources = [
#    "//src/zircon/lib/zircon/libzircon.json",
#    "//src/zircon/lib/zircon/zircon.ifs",
#  ]
#}
#
## TODO(https://fxbug.dev/42128146): Consumption of this header in assembly should be
## migrated over to using the assembly backend directly, at which point this
## header should be generated by the C backend, complete with C-style casts.
#zither_golden_files("zx.asm.checked-in") {
#  fidl = ":zx"
#  backend = "asm"
#  sources = [ "//zircon/system/public/zircon/errors.h" ]
#}

# Depended on by //zircon/public/sysroot/sdk:sysroot_sdk.
#group("sysroot_sdk") {
#  deps = [ ":zx.asm.checked-in" ]
#}

# TODO(joshuaseaton): Do not let our use of a "library zx" here propagate up to
# SDK build logic that would then consider this an "SDK library": there is
# already another library zx in the SDK and so this prevents collision.
barrier_metadata = {
  fidl_json_barrier = []
}

# This provides the public headers that go with the vDSO API, which are
# seen as <zircon/...>.
group("public") {
  visibility = [
    "//src/zircon/lib/zircon/*",
    "//zircon/kernel/lib/mistos/userabi/vdso/*",
  ]
  public_deps = [ ":linux_zither.legacy_syscall_cdecl" ]
  metadata = barrier_metadata
}

# This provides the private headers used by the kernel
group("private") {
  visibility = [
    "//zircon/kernel/lib/mistos/syscalls/*",
    "//zircon/kernel/lib/mistos/userabi/*",
    "//zircon/kernel/lib/syscalls/*",
  ]
  public_deps = [ ":linux_zither.mistos" ]
  metadata = barrier_metadata
}

#group("fuchsia-zircon-sys") {
#  # //src/lib/zircon/rust:fuchsia-zircon re-exports the contents of the
#  # crate generated by the zither.rust_syscall backend.
#  visibility = [ "//src/lib/zircon/rust:*" ]
#  public_deps = [ ":zx_zither.rust_syscall" ]
#  metadata = barrier_metadata
#}

config("syscalls.config") {
  include_dirs = [ "private" ]
}

group("syscalls.headers") {
  public_configs = [ ":syscalls.config" ]
}
