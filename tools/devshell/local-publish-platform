#!/bin/bash
# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#### CATEGORY=Other
### Release platform artifacts to local CIPD instances.
## This is used for cross repository validation in emac repository.
## This release include:
##     - platform AIBs
##     - Bazel SDK

## usage: fx local-publish-platform -t <target>
##
##  Options:
##     -t <target> : Additional target to publish to local CIPD

set -o errexit

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"/lib/vars.sh
fx-config-read

readonly CIPD_LOCAL_BASE="/tmp/CIPD_LOCAL/fuchsia/packages"

create_build_bazel_file() {
    local platform_aibs_path=$1

    cat << "EOF" > "${platform_aibs_path}/BUILD.bazel"

package(default_visibility = ["//visibility:public"])

exports_files(
    glob(
        ["**/*"],
        exclude_directories = 0
    )
)

filegroup(
    name = "all_files",
    srcs = glob(
        ["**/*"],
    )
)
EOF
}


print_usage_message() {
    local bazel_sdk_path=$1
    local platform_aibs_path=$2

    cat << EOF
Local Platform Artifacts are ready to use. Use "--repo_env" to point to the local
platform artifacts and Bazel SDK.

Note: To make sure the versions align between platform AIBs, in-tree released
driver, and Bazel SDK, you have to overwrite them atomically.

Sample usage:

    bazel build \\
        --repo_env=fuchsia_sdk=${bazel_sdk_path} \\
        --repo_env=fuchsia_platform=${platform_aibs_path} \\
        --repo_env=emac=${CIPD_LOCAL_BASE} \\
        <your_build_target>

EOF
}

main() {
    local bazel_sdk_info_path="${FUCHSIA_BUILD_DIR}/bazel_sdk_info.json"
    local bazel_sdk_path="$(fx-command-run jq ".[0].location" "${bazel_sdk_info_path}")"
    local bazel_sdk_path="${FUCHSIA_BUILD_DIR}/${bazel_sdk_path//\"}"

    local platform_artifacts_path="${FUCHSIA_BUILD_DIR}/platform_artifacts.json"
    local platform_aibs_path="$(fx-command-run jq ".[0].path" "${platform_artifacts_path}")"
    local platform_aibs_path="${FUCHSIA_BUILD_DIR}/${platform_aibs_path//\"}"

    # Create a BUILD.bazel file for platform AIBs directory
    create_build_bazel_file "${platform_aibs_path}"

    # Remove previous `exported_package_labels` from the file before appending
    # new ones to the end.
    sed -i '/exported_package_labels = \[/,/\]/d' "${FUCHSIA_BUILD_DIR}/args.gn"

    # Append additional exported package labels to the end of args.gn
    local targets=()
    while [[ $# -ge 1 ]]; do
        case "$1" in
        -t)
            shift
            targets+=( "$1" )
            ;;
        esac
        shift
    done
    (
        echo "exported_package_labels = ["
        for target in  ${targets[@]}; do
            echo "    \"${target}\","
        done
        echo "]"
    ) >> "${FUCHSIA_BUILD_DIR}/args.gn"
    fx-command-run build final_fuchsia_sdk platform_artifacts package_archives

    # Parse the package_archives.json
    local package_archives_path="${FUCHSIA_BUILD_DIR}/package_archives.json"
    local package_archives="$(fx-command-run jq ".[]" "${package_archives_path}")"
    local package_archives_array=($(echo "${package_archives}" | tr ' ' '\n'))
    for package_archive in "${package_archives_array[@]}"; do
        # Parse packagee archieve metadata
        package_archive_path="${FUCHSIA_BUILD_DIR}/${package_archive//\"}"
        package_name="$(jq .name ${package_archive_path})"
        package_path="$(jq .path ${package_archive_path})"

        local local_cipd_path="${CIPD_LOCAL_BASE}/${package_name//\"}"
        mkdir -p "${local_cipd_path}"

        cp "${FUCHSIA_BUILD_DIR}/${package_path//\"}" "${local_cipd_path}"
    done

    print_usage_message "${bazel_sdk_path}" "${platform_aibs_path}"
}

main "$@"