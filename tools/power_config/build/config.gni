# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/dist/resource.gni")
import("//build/host.gni")
import("//build/rust/config.gni")

# Compile a power configuration JSON into the
# fuchsia.hardware.power/ComponentPowerConfiguration FIDL table.
# This FIDL persisted file will be placed into a package at "/pkg/data/{output_name}"
# and it can be read by the component using the libraries in //tools/power_config/lib/.
#
# Parameters
#
#   value_file (required)
#     A JSON5 file containing the configuration values to be compiled.
#     Type: path
#
#   deps (optional)
#   metadata (optional)
#   output_name (optional)
#   testonly (optional)
#   visibility (optional)
#     Standard GN meaning.
template("power_config") {
  value_file = invoker.value_file
  resource_target = "${target_name}"
  action_target = "${target_name}_action"
  file_output_name = target_name
  if (defined(invoker.output_name)) {
    file_output_name = invoker.output_name
  }

  compiled_action(action_target) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "metadata",
                             "output_name",
                             "testonly",
                             "visibility",
                           ])

    output_name = file_output_name

    tool = "//tools/power_config"
    tool_output_name = "power_config"
    mnemonic = "POWER_CONFIG"

    compiled_output = "${target_out_dir}/${output_name}"
    inputs = [ value_file ]
    outputs = [ compiled_output ]

    args = [
      "--values",
      rebase_path(value_file, root_build_dir),
      "--output",
      rebase_path(compiled_output, root_build_dir),
    ]
  }

  # package the value file
  resource(resource_target) {
    forward_variables_from(invoker,
                           [
                             "data_deps",
                             "deps",
                             "testonly",
                             "visibility",
                           ])
    sources = get_target_outputs(":${action_target}")
    if (!defined(deps)) {
      deps = []
    }
    deps += [ ":${action_target}" ]
    outputs = [ "data/$file_output_name" ]

    if (defined(visibility)) {
      # The group we create below for the non-default toolchains needs to depend on this target.
      # We can't explicitly list all of the toolchain suffixes that might dep on this, because not
      # all of them have variable shortcuts defined.
      visibility += [ ":${resource_target}" ]
    }

    # Avoid picking up transitive dependencies in the cm_label.
    metadata = {
      distribution_entries_barrier = []
    }
  }
}
