// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#include <fidl/test.time/cpp/natural_ostream.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

std::ostream& fidl::ostream::Formatter<::test_time::AllInstants>::Format(std::ostream& os, const ::test_time::AllInstants& value) {
  os << "test_time::AllInstants";
  os << "{ ";
  os << "monotonic";
  os << " = " << fidl::ostream::Formatted<::fidl::basic_time<ZX_CLOCK_MONOTONIC>>(value.monotonic()) << ", ";
  os << "boot";
  os << " = " << fidl::ostream::Formatted<::fidl::basic_time<ZX_CLOCK_BOOT>>(value.boot()) << ", ";
  os << "}";
  return os;
}
std::ostream& fidl::ostream::Formatter<::test_time::ComplexInstants>::Format(std::ostream& os, const ::test_time::ComplexInstants& value) {
  os << "test_time::ComplexInstants";
  os << "{ ";
  if (value.monotonic().has_value()) {
    os << "monotonic";
    os << " = " << fidl::ostream::Formatted<::std::array<::fidl::basic_time<ZX_CLOCK_MONOTONIC>, 10>>(value.monotonic().value()) << ", ";
  }
  if (value.boot().has_value()) {
    os << "boot";
    os << " = " << fidl::ostream::Formatted<::std::vector<::fidl::basic_time<ZX_CLOCK_BOOT>>>(value.boot().value()) << ", ";
  }
  os << "}";
  return os;
}

namespace test_time {

std::ostream& operator<<(std::ostream& os, const ::test_time::AllInstants& value) {
  return fidl::ostream::Formatter<::test_time::AllInstants>::Format(os, value);
}

std::ostream& operator<<(std::ostream& os, const ::test_time::ComplexInstants& value) {
  return fidl::ostream::Formatter<::test_time::ComplexInstants>::Format(os, value);
}

#pragma clang diagnostic pop

}  // namespace test_time
