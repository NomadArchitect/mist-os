// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <lib/fidl/cpp/wire/array.h>
#include <lib/fidl/cpp/wire/envelope.h>
#include <lib/fidl/cpp/wire/internal/framework_err.h>
#include <lib/fidl/cpp/wire/message.h>
#include <lib/fidl/cpp/wire/message_storage.h>
#include <lib/fidl/cpp/wire/object_view.h>
#include <lib/fidl/cpp/wire/string_view.h>
#include <lib/fidl/cpp/wire/traits.h>
#include <lib/fidl/cpp/wire/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/test.serializable/cpp/common_types.h>
#include <fidl/test.serializable/cpp/markers.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_serializable {

namespace wire {

struct SerializableStruct;

class SerializableTable;

class SerializableUnion;

struct SerializableStruct {
  static constexpr char kSerializableName[] = "test.serializable.SerializableStruct";

  uint8_t __reserved = {};
};

}  // namespace wire
}  // namespace test_serializable

template <>
class ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>;
template <>
class ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>;

template <>
struct ::fidl::WireTableFrame<::test_serializable::wire::SerializableTable> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  uint64_t ComputeMaxOrdinal() const;

  friend class ::test_serializable::wire::SerializableTable;
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>>;
};

namespace test_serializable {
namespace wire {

class SerializableTable {
 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableTable";
  SerializableTable() = default;
  SerializableTable(const SerializableTable& other) noexcept = default;
  SerializableTable& operator=(const SerializableTable& other) noexcept = default;
  SerializableTable(SerializableTable&& other) noexcept = default;
  SerializableTable& operator=(SerializableTable&& other) noexcept = default;

  ~SerializableTable() = default;

  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  // Return a builder that by defaults allocates of an arena.
  static ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable> Builder(::fidl::AnyArena& arena);

  // Return a builder that relies on explicitly allocating |fidl::ObjectView|s.
  static ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable> ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>> frame);
#if defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES) || false
 public:
#else   // !defined(FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES)
 private:
#endif  // FIDL_WIRE_ALLOW_DEPRECATED_MUTABLE_TABLES

  explicit SerializableTable(::fidl::AnyArena& allocator)
      : frame_ptr_(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>(allocator)) {}
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or for another table.
  explicit SerializableTable(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame)
      : frame_ptr_(std::move(frame)) {}

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>(allocator);
  }
  void Init(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

 private:
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>>;
  friend ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>>;

  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>> frame_ptr_;
};
}  // namespace wire
}  // namespace test_serializable

template <typename BuilderImpl>
class ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, BuilderImpl> {
 protected:
  // |Wrapper_Ignore_Me_| wraps a |fidl::ObjectView<T>| and reduces its
  // priority in overload resolution. When the user writes `{}` as the
  // setter argument, that would default construct the field instead of
  // constructing a NULL object view.
  template <typename U>
  struct Wrapper_Ignore_Me_ {
    Wrapper_Ignore_Me_(U v) : value(v) {}
    U value;
  };

 public:
  // Build and return the table. The builder should not be used after this.
  ::test_serializable::wire::SerializableTable Build() {
    ZX_DEBUG_ASSERT(table_.frame_ptr_ != nullptr);
    ::test_serializable::wire::SerializableTable t = std::move(table_);
    // Poison this builder to prevent accidental reuse.
    table_.frame_ptr_ = nullptr;
    return t;
  }

 protected:
  WireTableBaseBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>&& frame)
      : table_(std::move(frame)) {}

 private:
  ::test_serializable::wire::SerializableTable table_;
};

template <>
class ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>>;

 public:
 private:
  friend class ::test_serializable::wire::SerializableTable;
  WireTableBuilder(::fidl::AnyArena& arena)
      : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>(arena)),
        arena_(arena) {}

  [[maybe_unused]] std::reference_wrapper<::fidl::AnyArena> arena_;
};

template <>
class ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable> final : public ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>> {
  using Base = ::fidl::internal::WireTableBaseBuilder<::test_serializable::wire::SerializableTable, ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>>;

 private:
  friend class ::test_serializable::wire::SerializableTable;
  using Base::Base;
  WireTableExternalBuilder(::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>* frame)
      : Base(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>>::FromExternal(frame)) {}
};
namespace test_serializable {
namespace wire {

inline ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable> SerializableTable::Builder(::fidl::AnyArena& arena) {
  return ::fidl::WireTableBuilder<::test_serializable::wire::SerializableTable>(arena);
}
inline ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable> SerializableTable::ExternalBuilder(::fidl::ObjectView<::fidl::WireTableFrame<::test_serializable::wire::SerializableTable>> frame) {
  return ::fidl::WireTableExternalBuilder<::test_serializable::wire::SerializableTable>(std::move(frame));
}

class SerializableUnion {
 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableUnion";

  SerializableUnion() : ordinal_(::test_serializable::wire::SerializableUnion::Ordinal::Invalid), envelope_{} {}

  SerializableUnion(const SerializableUnion&) = default;
  SerializableUnion& operator=(const SerializableUnion&) = default;
  SerializableUnion(SerializableUnion&&) = default;
  SerializableUnion& operator=(SerializableUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kUnused = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::Invalid; }

  bool is_unused() const { return ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::kUnused; }

  static SerializableUnion WithUnused(bool val) {
    SerializableUnion result;
    result.ordinal_ = ::test_serializable::wire::SerializableUnion::Ordinal::kUnused;
    result.envelope_.As<bool>().set_data(std::move(val));
    return result;
  }

  bool& unused() {
    ZX_ASSERT(ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::kUnused);
    return envelope_.As<bool>().get_data();
  }
  const bool& unused() const {
    ZX_ASSERT(ordinal_ == ::test_serializable::wire::SerializableUnion::Ordinal::kUnused);
    return envelope_.As<bool>().get_data();
  }
  ::test_serializable::wire::SerializableUnion::Tag Which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<::test_serializable::wire::SerializableUnion::Tag>(ordinal_);
  }

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kUnused = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_serializable::wire::SerializableUnion::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

}  // namespace wire
}  // namespace test_serializable
namespace fidl {

template <>
struct TypeTraits<::test_serializable::wire::SerializableStruct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_serializable::wire::SerializableStruct> : public std::true_type {};
template <>
struct IsWire<::test_serializable::wire::SerializableStruct> : public std::true_type {};
template <>
struct IsStruct<::test_serializable::wire::SerializableStruct> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_serializable::wire::SerializableStruct>);
static_assert(offsetof(::test_serializable::wire::SerializableStruct, __reserved) == 0);
static_assert(sizeof(::test_serializable::wire::SerializableStruct) == TypeTraits<::test_serializable::wire::SerializableStruct>::kPrimarySize);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive> {
  static constexpr size_t kInlineSize = 1;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::WireStructMemberCodingInfo<uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>());
  static constexpr bool kHasPadding = false;
  using Base = WireStructCodingTraitsBase<::test_serializable::wire::SerializableStruct, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>;
  static constexpr bool kIsMemcpyCompatible = Base::kIsMemcpyCompatible;

  static void Encode(
      internal::WireEncoder* encoder, ::test_serializable::wire::SerializableStruct* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (kIsMemcpyCompatible) {
      memcpy(position.As<void>(), value, sizeof(::test_serializable::wire::SerializableStruct));
    } else {
      internal::WireCodingTraits<uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Encode(encoder, &value->__reserved, position + 0, recursion_depth);
    }
  }
  static void Decode(
      internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    if constexpr (!Base::are_members_memcpy_compatible) {
      internal::WireCodingTraits<uint8_t, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::Decode(
          decoder, position + 0, recursion_depth);
    }
    if (*position.As<uint8_t>() != 0) {
      decoder->SetError(kCodingErrorInvalidPaddingBytes);
    }
  }
};

template <>
struct TypeTraits<::test_serializable::wire::SerializableTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = true;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_serializable::wire::SerializableTable> : public std::true_type {};
template <>
struct IsWire<::test_serializable::wire::SerializableTable> : public std::true_type {};
template <>
struct IsTable<::test_serializable::wire::SerializableTable> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_serializable::wire::SerializableTable>);

template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableTable, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : ::fidl::internal::WireTableCodingTraitsBase<IsRecursive> {
  using Base = ::fidl::internal::WireTableCodingTraitsBase<IsRecursive>;
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_serializable::wire::SerializableTable* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 2);
    if (!inner_depth.IsValid()) {
      return;
    }

    ::fidl::internal::WirePosition vector_position;
    if (Base::PreworkResult::kEarlyExit ==
        Base::PrepareForBodyEncode(encoder, value, position, &vector_position)) {
      return;
    }

    fidl_vector_t* vec = reinterpret_cast<fidl_vector_t*>(value);
    fidl_envelope_t* envelopes = static_cast<fidl_envelope_t*>(vec->data);
    for (size_t i = 0; i < vec->count; i++) {
      size_t encode_inline_size = 0;
      switch (i) {
      }
      ::fidl::internal::EncodeFn<IsRecursive> encode_fn = nullptr;
      switch (i) {
      }
      WirePosition envelope_position = vector_position + i * sizeof(fidl_envelope_t);
      WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &envelopes[i], envelope_position, inner_depth);
    }
  }
  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 2);
    if (!inner_depth.IsValid()) {
      return;
    }

    ::fidl::internal::WirePosition vector_position;
    if (Base::PreworkResult::kEarlyExit == Base::DecodePrework(decoder, position, &vector_position)) {
      return;
    }

    fidl_vector_t* vec = position.As<fidl_vector_t>();
    for (size_t i = 0; i < vec->count; i++) {
      size_t decode_inline_size = 0;
      switch (i) {
      }
      DecodeFn<IsRecursive> decode_fn = nullptr;
      switch (i) {
      }
      ::fidl::internal::WireDecodeOptionalEnvelope(decode_inline_size, decode_fn, decoder, vector_position + i * sizeof(fidl_envelope_t), inner_depth);
    }
  }
};

template <>
struct TypeTraits<::test_serializable::wire::SerializableUnion> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_serializable::wire::SerializableUnion> : public std::true_type {};
template <>
struct IsWire<::test_serializable::wire::SerializableUnion> : public std::true_type {};
template <>
struct IsUnion<::test_serializable::wire::SerializableUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_serializable::wire::SerializableUnion>);

template <typename Constraint, bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, Constraint, IsRecursive> {
  static constexpr size_t kInlineSize = 16;
  static constexpr bool kIsMemcpyCompatible = false;

  static void Encode(internal::WireEncoder* encoder, ::test_serializable::wire::SerializableUnion* value, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    fidl_union_t* u = reinterpret_cast<fidl_union_t*>(value);

    if (unlikely(u->tag == 0)) {
      if constexpr (Constraint::is_optional) {
        *position.As<fidl_union_t>() = {};
        return;
      }
      encoder->SetError(kCodingErrorInvalidUnionTag);
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(encoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    *position.As<fidl_xunion_tag_t>() = u->tag;

    size_t encode_inline_size;
    switch (u->tag) {
      case 1:  // ::test_serializable::wire::SerializableUnion::Tag::kUnused
        encode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      default:
        encode_inline_size = 0;
        break;
    }
    ::fidl::internal::EncodeFn<IsRecursive> encode_fn;
    switch (u->tag) {
      case 1:  // ::test_serializable::wire::SerializableUnion::Tag::kUnused
        encode_fn = ::fidl::internal::MakeEncodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      default:
        encode_fn = nullptr;
        break;
    }
    WireEncodeEnvelope(encode_inline_size, encode_fn, encoder, &u->envelope, position + sizeof(fidl_xunion_tag_t), inner_depth);
  }

  static void Decode(internal::WireDecoder* decoder, ::fidl::internal::WirePosition position, RecursionDepth<IsRecursive> recursion_depth) {
    ::test_serializable::wire::SerializableUnion::Tag tag = *position.As<::test_serializable::wire::SerializableUnion::Tag>();
    if (unlikely(static_cast<uint64_t>(tag) == 0)) {
      if constexpr (!Constraint::is_optional) {
        decoder->SetError(kCodingErrorInvalidUnionTag);
        return;
      }
      static_assert(sizeof(fidl_envelope_t) == sizeof(uint64_t));
      if (*(position + sizeof(fidl_xunion_tag_t)).As<uint64_t>() != 0) {
        decoder->SetError(kCodingErrorZeroTagButNonZeroEnvelope);
      }
      return;
    }

    RecursionDepth<IsRecursive> inner_depth = recursion_depth.Add(decoder, 1);
    if (!inner_depth.IsValid()) {
      return;
    }

    size_t decode_inline_size;
    switch (tag) {
      case ::test_serializable::wire::SerializableUnion::Tag::kUnused:
        decode_inline_size = ::fidl::internal::WireCodingTraits<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>::kInlineSize;
        break;
      default:
        decode_inline_size = 0;
        break;
    }
    DecodeFn<IsRecursive> decode_fn;
    switch (tag) {
      case ::test_serializable::wire::SerializableUnion::Tag::kUnused:
        decode_fn = ::fidl::internal::MakeDecodeFn<bool, fidl::internal::WireCodingConstraintEmpty, IsRecursive>();
        break;
      default:
        decode_fn = nullptr;
        break;
    }
    ::fidl::internal::WireDecodeStrictEnvelope(decode_inline_size, decode_fn, decoder, position + sizeof(fidl_xunion_tag_t), inner_depth);
  }
};

// Top-level union.
template <bool IsRecursive>
struct ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintEmpty, IsRecursive>
    : public ::fidl::internal::WireCodingTraits<::test_serializable::wire::SerializableUnion, ::fidl::internal::WireCodingConstraintUnion<false>, IsRecursive> {};

#pragma clang diagnostic pop

}  // namespace fidl
