// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.serializable/cpp/natural_types.h>
#include <lib/fidl/cpp/hlcpp_conversion.h>
#include <lib/fidl/cpp/wire/service_handler.h>
#include <test/serializable/cpp/fidl.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace fidl {
namespace internal {

template <>
struct NaturalToHLCPPTraits<::test_serializable::SerializableStruct> {
  using HLCPPType = ::test::serializable::SerializableStruct;
  static inline ::test::serializable::SerializableStruct Convert(::test_serializable::SerializableStruct&&);
};
template <>
struct HLCPPToNaturalTraits<::test::serializable::SerializableStruct> {
  using NaturalType = ::test_serializable::SerializableStruct;
  static inline ::test_serializable::SerializableStruct Convert(::test::serializable::SerializableStruct&&);
};
template <>
struct NaturalToHLCPPTraits<::test_serializable::SerializableTable> {
  using HLCPPType = ::test::serializable::SerializableTable;
  static inline ::test::serializable::SerializableTable Convert(::test_serializable::SerializableTable&&);
};
template <>
struct HLCPPToNaturalTraits<::test::serializable::SerializableTable> {
  using NaturalType = ::test_serializable::SerializableTable;
  static inline ::test_serializable::SerializableTable Convert(::test::serializable::SerializableTable&&);
};
template <>
struct NaturalToHLCPPTraits<::test_serializable::SerializableUnion> {
  using HLCPPType = ::test::serializable::SerializableUnion;
  static inline ::test::serializable::SerializableUnion Convert(::test_serializable::SerializableUnion&&);
};
template <>
struct HLCPPToNaturalTraits<::test::serializable::SerializableUnion> {
  using NaturalType = ::test_serializable::SerializableUnion;
  static inline ::test_serializable::SerializableUnion Convert(::test::serializable::SerializableUnion&&);
};

::test::serializable::SerializableStruct NaturalToHLCPPTraits<::test_serializable::SerializableStruct>::Convert(::test_serializable::SerializableStruct&& value) {
  ::test::serializable::SerializableStruct hlcpp;
  hlcpp.__reserved = ::fidl::NaturalToHLCPP(std::move(value.__reserved()));
  return hlcpp;
}

::test_serializable::SerializableStruct HLCPPToNaturalTraits<::test::serializable::SerializableStruct>::Convert(::test::serializable::SerializableStruct&& value) {
  return ::test_serializable::SerializableStruct{{
      .__reserved = ::fidl::HLCPPToNatural(std::move(value.__reserved)),
  }};
}
::test::serializable::SerializableTable NaturalToHLCPPTraits<::test_serializable::SerializableTable>::Convert(::test_serializable::SerializableTable&& value) {
  ::test::serializable::SerializableTable hlcpp;
  return hlcpp;
}

::test_serializable::SerializableTable HLCPPToNaturalTraits<::test::serializable::SerializableTable>::Convert(::test::serializable::SerializableTable&& value) {
  ::test_serializable::SerializableTable natural;
  return natural;
}

::test::serializable::SerializableUnion NaturalToHLCPPTraits<::test_serializable::SerializableUnion>::Convert(::test_serializable::SerializableUnion&& value) {
  ::test::serializable::SerializableUnion hlcpp;
  switch (value.Which()) {
    case ::test_serializable::SerializableUnion::Tag::kUnused:
      hlcpp.set_unused(::fidl::NaturalToHLCPP(std::move(value.unused().value())));
      break;
    default:
      break;
  }
  return hlcpp;
}

::test_serializable::SerializableUnion HLCPPToNaturalTraits<::test::serializable::SerializableUnion>::Convert(::test::serializable::SerializableUnion&& value) {
  using _NaturalUnion = ::test_serializable::SerializableUnion;
  switch (value.Which()) {
    case ::test::serializable::SerializableUnion::Tag::kUnused:
      return _NaturalUnion::WithUnused(
          ::fidl::HLCPPToNatural(std::move(value.unused())));
    default:
      ZX_PANIC("Can't convert invalid strict union %s from HLCPP to Natural", "::test::serializable::SerializableUnion");
  }
}

#pragma clang diagnostic pop

}  // namespace internal
}  // namespace fidl
