// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.serializable/cpp/common_types.h>
#include <fidl/test.serializable/cpp/markers.h>
#include <lib/fidl/cpp/natural_coding_traits.h>
#include <lib/fidl/cpp/natural_types.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

namespace test_serializable {

class SerializableStruct;

class SerializableTable;

class SerializableUnion;

class SerializableStruct {
 private:
  struct Storage_;

 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableStruct";
  SerializableStruct(Storage_ storage) noexcept;
  SerializableStruct(uint8_t __reserved) noexcept;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdefaulted-function-deleted"
  // Default constructs a |SerializableStruct| only if all of its members are default constructible.
  SerializableStruct() = default;
#pragma clang diagnostic pop

  SerializableStruct(SerializableStruct&&) noexcept = default;
  SerializableStruct& operator=(SerializableStruct&&) noexcept = default;
  SerializableStruct(const SerializableStruct& other) noexcept;
  SerializableStruct& operator=(const SerializableStruct& other) noexcept;

  bool operator==(const SerializableStruct& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_serializable::SerializableStruct, 1>::Equal(this, &other);
  }
  bool operator!=(const SerializableStruct& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_serializable::SerializableStruct, 1>::Equal(this, &other);
  }

  uint8_t
  __reserved() const {
    return storage_.__reserved;
  }

  uint8_t& __reserved() {
    return storage_.__reserved;
  }

  // Setter for __reserved.
  //

  SerializableStruct& __reserved(uint8_t value);

  SerializableStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
    uint8_t __reserved = 0u;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<::test_serializable::SerializableStruct, 1>;
  friend struct ::fidl::internal::MemberVisitor<::test_serializable::SerializableStruct>;
  static constexpr auto kMembers = std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint8_t, fidl::internal::NaturalCodingConstraintEmpty>{
      &Storage_::__reserved, 0});
  static constexpr auto kPadding = std::make_tuple();
};

class SerializableTable {
 private:
  struct Storage_;

 public:
  static constexpr char kSerializableName[] = "test.serializable.SerializableTable";
  SerializableTable(Storage_ storage) noexcept;
  SerializableTable() noexcept = default;
  SerializableTable(SerializableTable&&) noexcept = default;
  SerializableTable& operator=(SerializableTable&&) noexcept = default;
  SerializableTable(const SerializableTable& other) noexcept;
  SerializableTable& operator=(const SerializableTable& other) noexcept;
  bool operator==(const SerializableTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<::test_serializable::SerializableTable>::Equal(this, &other);
  }
  bool operator!=(const SerializableTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<::test_serializable::SerializableTable>::Equal(this, &other);
  }

  bool IsEmpty() const {
    return true;
  }

  SerializableTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag);

 private:
  struct Storage_ final {
  };

  // TODO(https://fxbug.dev/42172795): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<::test_serializable::SerializableTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_serializable::SerializableTable>;
  static constexpr auto kMembers = std::make_tuple();
};

class SerializableUnion {
 private:
  using Storage_ =
      std::variant<
          std::monostate, bool>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_xunion_tag_t {
    kUnused = 1,  // 0x1
  };
  static constexpr char kSerializableName[] = "test.serializable.SerializableUnion";

  SerializableUnion(SerializableUnion&& other) noexcept
      : SerializableUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag{}) {
    *storage_ = std::move(*other.storage_);
  }
  SerializableUnion& operator=(SerializableUnion&& other) noexcept {
    if (this != &other) {
      *storage_ = std::move(*other.storage_);
    }
    return *this;
  }
  SerializableUnion(const SerializableUnion& other) noexcept : SerializableUnion(other.CloneStorage_()) {}
  SerializableUnion& operator=(const SerializableUnion& other) noexcept {
    if (this != &other) {
      storage_ = other.CloneStorage_();
    }
    return *this;
  }

  bool operator==(const SerializableUnion& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const SerializableUnion& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_serializable::SerializableUnion::Tag Which() const {
    return SerializableUnion::IndexToTag(storage_->index()).value();
  }
  static SerializableUnion WithUnused(bool val) {
    return SerializableUnion(std::make_shared<Storage_>(
        std::in_place_index_t<1>{},
        std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> unused() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  ::fidl::internal::UnionMemberView<1, Storage_> unused() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

  // Sets the union to hold the unused member.
  //

  SerializableUnion& unused(bool value) {
    storage_->emplace<1>(std::move(value));
    return *this;
  }

  SerializableUnion(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag)
      : storage_(std::make_shared<Storage_>()) {}

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<::test_serializable::SerializableUnion>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalUnionMember<::fidl::internal::NaturalCodingConstraintEmpty>(), ::fidl::internal::NaturalUnionMember<fidl::internal::NaturalCodingConstraintEmpty>());

  explicit SerializableUnion(std::shared_ptr<Storage_> storage) : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::fidl::internal::NaturalDecoder* decoder, ::test_serializable::SerializableUnion::Tag tag) {
    switch (tag) {
      case ::test_serializable::SerializableUnion::Tag::kUnused:
        return 1;
      default: {
        decoder->SetError(::fidl::internal::kCodingErrorUnknownUnionTag);
        return 0;
      }
    }
  }

  static constexpr std::optional<::test_serializable::SerializableUnion::Tag> IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_serializable::SerializableUnion::Tag::kUnused;
      default:
        return std::nullopt;
    }
  }
};

inline SerializableStruct::SerializableStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline SerializableStruct::SerializableStruct(uint8_t __reserved) noexcept
    : storage_({.__reserved = std::move(__reserved)}) {}
inline SerializableStruct::SerializableStruct(const ::test_serializable::SerializableStruct& other) noexcept : ::test_serializable::SerializableStruct(other.CloneStorage_()) {}
inline SerializableStruct& ::test_serializable::SerializableStruct::operator=(const ::test_serializable::SerializableStruct& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline SerializableStruct::SerializableStruct(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SerializableStruct(Storage_{
                                                                                                                .__reserved = 0u,
                                                                                                            }) {}
inline SerializableStruct& SerializableStruct::__reserved(uint8_t value) {
  storage_.__reserved = std::move(value);
  return *this;
}

inline SerializableTable::SerializableTable(Storage_ storage) noexcept : storage_(std::move(storage)) {}
inline SerializableTable::SerializableTable(const ::test_serializable::SerializableTable& other) noexcept : SerializableTable(other.CloneStorage_()) {}
inline SerializableTable& ::test_serializable::SerializableTable::operator=(const SerializableTable& other) noexcept {
  storage_ = other.CloneStorage_();
  return *this;
}

inline SerializableTable::SerializableTable(::fidl::internal::DefaultConstructPossiblyInvalidObjectTag) : SerializableTable(Storage_{}) {}

}  // namespace test_serializable
namespace fidl {

template <>
struct IsFidlType<::test_serializable::SerializableStruct> : public std::true_type {};

template <>
struct TypeTraits<::test_serializable::SerializableStruct> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 0;
  static constexpr uint32_t kPrimarySize = 1;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsStruct<::test_serializable::SerializableStruct> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_serializable::SerializableStruct, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalEmptyStructCodingTraits<::test_serializable::SerializableStruct> {};

template <>
struct IsFidlType<::test_serializable::SerializableTable> : public std::true_type {};

template <>
struct TypeTraits<::test_serializable::SerializableTable> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsTable<::test_serializable::SerializableTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_serializable::SerializableTable, ::fidl::internal::NaturalCodingConstraintEmpty> : public ::fidl::internal::NaturalTableCodingTraits<::test_serializable::SerializableTable> {};

template <>
struct IsFidlType<::test_serializable::SerializableUnion> : public std::true_type {};

template <>
struct TypeTraits<::test_serializable::SerializableUnion> {
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kMaxDepth = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsUnion<::test_serializable::SerializableUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_serializable::SerializableUnion, ::fidl::internal::NaturalCodingConstraintEmpty> final
    : public ::fidl::internal::NaturalUnionCodingTraits<::test_serializable::SerializableUnion> {};

#pragma clang diagnostic pop

}  // namespace fidl
