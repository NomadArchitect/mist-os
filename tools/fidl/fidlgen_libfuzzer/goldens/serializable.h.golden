// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <test/serializable/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using SerializableStruct = ::test::serializable::SerializableStruct;
using SerializableTable = ::test::serializable::SerializableTable;
using SerializableUnion = ::test::serializable::SerializableUnion;

template <>
struct MinSize<SerializableStruct> {
  operator size_t() {
    return MinSize<uint8_t>();
  }
};
template <>
struct Allocate<SerializableStruct> {
  SerializableStruct operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<SerializableStruct>());
    SerializableStruct out;
    const size_t slack_per_member = (*size - MinSize<SerializableStruct>()) / 1;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.__reserved = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<SerializableTable> {
  operator size_t() {
    return 0;
  }
};
template <>
struct Allocate<SerializableTable> {
  SerializableTable operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<SerializableTable>());
    SerializableTable out;
    return out;
  }
};
template <>
struct MinSize<SerializableUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<bool>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template <>
struct Allocate<SerializableUnion> {
  static_assert(1 > 0, "xunion must have at least one member");

  SerializableUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<SerializableUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    SerializableUnion out;
    switch (selector % 1) {
      case 0: {
        out.set_unused(Allocate<bool>{}(src, size));
        break;
      }
    }

    return out;
  }
};

}  // namespace fuzzing
