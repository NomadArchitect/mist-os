// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <test/time/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using AllInstants = ::test::time::AllInstants;

template <>
struct MinSize<AllInstants> {
  operator size_t() {
    return MinSize<::zx::basic_time<ZX_CLOCK_MONOTONIC>>() + MinSize<::zx::basic_time<ZX_CLOCK_MONOTONIC>>();
  }
};
template <>
struct Allocate<AllInstants> {
  AllInstants operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<AllInstants>());
    AllInstants out;
    const size_t slack_per_member = (*size - MinSize<AllInstants>()) / 2;
    size_t out_size;
    out_size = MinSize<::zx::basic_time<ZX_CLOCK_MONOTONIC>>() + slack_per_member;
    out.monotonic = Allocate<::zx::basic_time<ZX_CLOCK_MONOTONIC>>{}(src, &out_size);
    out_size = MinSize<::zx::basic_time<ZX_CLOCK_MONOTONIC>>() + slack_per_member;
    out.boot = Allocate<::zx::basic_time<ZX_CLOCK_MONOTONIC>>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
