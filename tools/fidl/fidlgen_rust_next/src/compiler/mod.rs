// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

mod natural;
mod resource_binding;
mod util;
mod wire;

use std::io::{Error, Write};

use crate::ir::{DeclType, Schema};

pub use self::resource_binding::ResourceBindings;

pub struct Config {
    pub emit_debug_impls: bool,
    pub resource_bindings: ResourceBindings,
}

pub struct Compiler<'a> {
    schema: &'a Schema,
    config: Config,
}

impl<'a> Compiler<'a> {
    pub fn new(schema: &'a Schema, config: Config) -> Self {
        Self { schema, config }
    }

    pub fn emit<W: Write>(&mut self, out: &mut W) -> Result<(), Error> {
        writeln!(
            out,
            r#"
            // DO NOT EDIT: This file is machine-generated by fidlgen
            #![warn(clippy::all)]
            #![allow(
                unused_parens,
                unused_variables,
                unused_mut,
                unused_imports,
                unreachable_code,
            )]
            "#,
        )?;

        for ident in &self.schema.declaration_order {
            match self.schema.declarations[ident] {
                DeclType::Struct => {
                    natural::emit_struct(self, out, ident)?;
                    wire::emit_struct(self, out, ident)?;
                }
                DeclType::Table => {
                    natural::emit_table(self, out, ident)?;
                    wire::emit_table(self, out, ident)?;
                }
                DeclType::Enum => {
                    natural::emit_enum(self, out, ident)?;
                    wire::emit_enum(self, out, ident)?;
                }
                DeclType::Union => {
                    natural::emit_union(self, out, ident)?;
                    wire::emit_union(self, out, ident)?;
                }
                DeclType::Alias => {
                    natural::emit_alias(self, out, ident)?;
                    wire::emit_alias(self, out, ident)?;
                }
                DeclType::Bits => {
                    natural::emit_bits(self, out, ident)?;
                    wire::emit_bits(self, out, ident)?;
                }
                DeclType::Const => {
                    natural::emit_const(self, out, ident)?;
                }
                // Custom resources are currently treated as the underlying type
                DeclType::Resource => (),
                DeclType::NewType => todo!(),
                DeclType::Overlay => todo!(),
                // Skip protocols rather than panic because many basic tests have protocols in them
                DeclType::Protocol => (),
                DeclType::Service => todo!(),
            }
        }

        Ok(())
    }
}
