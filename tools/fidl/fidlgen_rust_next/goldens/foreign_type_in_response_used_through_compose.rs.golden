// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

/// The type corresponding to the Top protocol.
#[derive(Debug)]
pub struct Top;

pub mod top {

    pub struct GetFoo;

    impl ::fidl_next::bind::Method for GetFoo {
        const ORDINAL: u64 = 4619180266423108403;

        type Protocol = crate::Top;

        type Request<'buf> = ();

        type Response<'buf> = fidl_next_test_middle::WireMiddleGetFooResponse;
    }
}

/// A helper trait for the `Top` client protocol.
pub trait TopClient<___T: ::fidl_next::protocol::Transport> {
    fn get_foo(
        &self,
    ) -> Result<::fidl_next::bind::TransactionFuture<'_, ___T, top::GetFoo>, ::fidl_next::EncodeError>;
}

impl<___T> TopClient<___T> for ::fidl_next::bind::Client<___T, Top>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn get_foo(
        &self,
    ) -> Result<::fidl_next::bind::TransactionFuture<'_, ___T, top::GetFoo>, ::fidl_next::EncodeError>
    {
        self.untyped()
            .send_transaction(4619180266423108403, &mut ())
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
}

/// A client handler for the Top protocol.

pub trait TopClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for Top
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: TopClientHandler<___T>,

    for<'buf> fidl_next_test_middle::WireMiddleGetFooResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            ordinal => todo!(),
        }
    }
}

/// A helper trait for the `Top` server protocol.
pub trait TopServer<___T: ::fidl_next::protocol::Transport> {}

impl<___T> TopServer<___T> for ::fidl_next::bind::Server<___T, Top> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the Top protocol.

pub trait TopServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn get_foo(&mut self, responder: ::fidl_next::bind::Responder<top::GetFoo>);
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for Top
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: TopServerHandler<___T>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            ordinal => todo!(),
        }
    }

    fn on_transaction(
        handler: &mut ___H,
        ordinal: u64,
        mut buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            4619180266423108403 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                handler.get_foo(responder);
            }

            ordinal => todo!(),
        }
    }
}
