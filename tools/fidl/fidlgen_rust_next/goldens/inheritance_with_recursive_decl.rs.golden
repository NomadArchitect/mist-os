// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Debug)]
pub struct ParentFirstRequest {
    pub request: ::fidl_next::bind::ServerEnd<::fidl_next::zx::Handle, crate::Parent>,
}

impl ::fidl_next::Encodable for ParentFirstRequest {
    type Encoded<'buf> = WireParentFirstRequest;
}

impl<___E> ::fidl_next::Encode<___E> for ParentFirstRequest
where
    ::fidl_next::bind::ServerEnd<::fidl_next::zx::Handle, crate::Parent>: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                request,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.request, encoder, request)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ParentFirstRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireParentFirstRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ParentFirstRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ParentFirstRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireParentFirstRequest> for ParentFirstRequest {
    fn take_from(from: &mut WireParentFirstRequest) -> Self {
        Self { request: ::fidl_next::TakeFrom::take_from(&mut from.request) }
    }
}

/// The wire type corersponding to [`ParentFirstRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireParentFirstRequest {
    pub request: ::fidl_next::bind::ServerEnd<::fidl_next::WireHandle, crate::Parent>,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireParentFirstRequest
where
    ___D: ?Sized,

    ::fidl_next::bind::ServerEnd<::fidl_next::WireHandle, crate::Parent>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut request,

            } = slot;
        }

        ::fidl_next::Decode::decode(request.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Parent protocol.
#[derive(Debug)]
pub struct Parent;

pub mod parent {

    pub struct First;

    impl ::fidl_next::bind::Method for First {
        const ORDINAL: u64 = 3973163707930985819;

        type Protocol = crate::Parent;

        type Request<'buf> = crate::WireParentFirstRequest;

        type Response<'buf> = ::fidl_next::bind::Never;
    }
}

/// A helper trait for the `Parent` client sender.
pub trait ParentClientSender<___T: ::fidl_next::protocol::Transport> {
    fn first<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireParentFirstRequest>;
}

impl<___T> ParentClientSender<___T> for ::fidl_next::bind::ClientSender<___T, Parent>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn first<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireParentFirstRequest>,
    {
        self.as_untyped().send_one_way(3973163707930985819, request)
    }
}

/// A client handler for the Parent protocol.

pub trait ParentClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for Parent
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ParentClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Parent` server sender.
pub trait ParentServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> ParentServerSender<___T> for ::fidl_next::bind::ServerSender<___T, Parent> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the Parent protocol.

pub trait ParentServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn first(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, Parent>,

        request: ::fidl_next::bind::RequestBuffer<___T, parent::First>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for Parent
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ParentServerHandler<___T>,

    for<'buf> crate::WireParentFirstRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            3973163707930985819 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.first(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
pub struct ChildSecondRequest {
    pub request: ::fidl_next::bind::ServerEnd<::fidl_next::zx::Handle, crate::Parent>,
}

impl ::fidl_next::Encodable for ChildSecondRequest {
    type Encoded<'buf> = WireChildSecondRequest;
}

impl<___E> ::fidl_next::Encode<___E> for ChildSecondRequest
where
    ::fidl_next::bind::ServerEnd<::fidl_next::zx::Handle, crate::Parent>: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                request,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.request, encoder, request)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ChildSecondRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireChildSecondRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ChildSecondRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ChildSecondRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireChildSecondRequest> for ChildSecondRequest {
    fn take_from(from: &mut WireChildSecondRequest) -> Self {
        Self { request: ::fidl_next::TakeFrom::take_from(&mut from.request) }
    }
}

/// The wire type corersponding to [`ChildSecondRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireChildSecondRequest {
    pub request: ::fidl_next::bind::ServerEnd<::fidl_next::WireHandle, crate::Parent>,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireChildSecondRequest
where
    ___D: ?Sized,

    ::fidl_next::bind::ServerEnd<::fidl_next::WireHandle, crate::Parent>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut request,

            } = slot;
        }

        ::fidl_next::Decode::decode(request.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the Child protocol.
#[derive(Debug)]
pub struct Child;

pub mod child {

    pub struct First;

    impl ::fidl_next::bind::Method for First {
        const ORDINAL: u64 = 3973163707930985819;

        type Protocol = crate::Child;

        type Request<'buf> = crate::WireParentFirstRequest;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct Second;

    impl ::fidl_next::bind::Method for Second {
        const ORDINAL: u64 = 2545123272820824165;

        type Protocol = crate::Child;

        type Request<'buf> = crate::WireChildSecondRequest;

        type Response<'buf> = ::fidl_next::bind::Never;
    }
}

/// A helper trait for the `Child` client sender.
pub trait ChildClientSender<___T: ::fidl_next::protocol::Transport> {
    fn first<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireParentFirstRequest>;

    fn second<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireChildSecondRequest>;
}

impl<___T> ChildClientSender<___T> for ::fidl_next::bind::ClientSender<___T, Child>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn first<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireParentFirstRequest>,
    {
        self.as_untyped().send_one_way(3973163707930985819, request)
    }

    fn second<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireChildSecondRequest>,
    {
        self.as_untyped().send_one_way(2545123272820824165, request)
    }
}

/// A client handler for the Child protocol.

pub trait ChildClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for Child
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ChildClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Child` server sender.
pub trait ChildServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> ChildServerSender<___T> for ::fidl_next::bind::ServerSender<___T, Child> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the Child protocol.

pub trait ChildServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn first(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, Child>,

        request: ::fidl_next::bind::RequestBuffer<___T, child::First>,
    );

    fn second(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, Child>,

        request: ::fidl_next::bind::RequestBuffer<___T, child::Second>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for Child
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ChildServerHandler<___T>,

    for<'buf> crate::WireParentFirstRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireChildSecondRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            3973163707930985819 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.first(sender, buffer);
            }

            2545123272820824165 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.second(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}
