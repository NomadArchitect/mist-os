// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct LocalTablePayload {
    pub a: Option<u16>,
}

impl LocalTablePayload {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for LocalTablePayload {
    type Encoded<'buf> = WireLocalTablePayload<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for LocalTablePayload
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireLocalTablePayload { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireLocalTablePayload<'buf>> for LocalTablePayload {
    fn take_from(from: &mut WireLocalTablePayload<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`LocalTablePayload`].
#[repr(C)]
pub struct WireLocalTablePayload<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireLocalTablePayload<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireLocalTablePayload<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireLocalTablePayload<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("LocalTablePayload").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum LocalUnionPayload {
    B(bool),

    UnknownOrdinal(u64),
}

impl ::fidl_next::Encodable for LocalUnionPayload {
    type Encoded<'buf> = WireLocalUnionPayload;
}

impl<___E> ::fidl_next::Encode<___E> for LocalUnionPayload
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireLocalUnionPayload { raw, _phantom: _ } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<LocalUnionPayload> {
    type EncodedOption<'buf> = WireOptionalLocalUnionPayload;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<LocalUnionPayload>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    LocalUnionPayload: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalLocalUnionPayload { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireLocalUnionPayload> for LocalUnionPayload {
    fn take_from(from: &mut WireLocalUnionPayload) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalLocalUnionPayload> for Option<Box<LocalUnionPayload>> {
    fn take_from(from: &mut WireOptionalLocalUnionPayload) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`LocalUnionPayload`].
#[repr(transparent)]
pub struct WireLocalUnionPayload {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod local_union_payload {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal(u64),
    }

    pub enum Mut<'union> {
        B(&'union mut bool),

        UnknownOrdinal(u64),
    }
}

impl WireLocalUnionPayload {
    pub fn as_ref(&self) -> crate::local_union_payload::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::local_union_payload::Ref::B(unsafe { self.raw.get().deref_unchecked() }),

            unknown => crate::local_union_payload::Ref::UnknownOrdinal(unknown),
        }
    }

    pub fn as_mut(&mut self) -> crate::local_union_payload::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::local_union_payload::Mut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            unknown => crate::local_union_payload::Mut::UnknownOrdinal(unknown),
        }
    }
}

impl Clone for WireLocalUnionPayload {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireLocalUnionPayload
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireLocalUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalLocalUnionPayload {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalLocalUnionPayload {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireLocalUnionPayload> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireLocalUnionPayload> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireLocalUnionPayload> {
        if self.is_some() {
            Some(WireLocalUnionPayload {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalLocalUnionPayload {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

impl Clone for WireOptionalLocalUnionPayload {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalLocalUnionPayload {
                raw: ::fidl_next::RawWireUnion::null(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalLocalUnionPayload
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalLocalUnionPayload {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayImportWithErrorResult {
    Response(fidl_next_test_protocollayouts_imported::ImportUnionPayload),

    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayImportWithErrorResult {
    type Encoded<'buf> = WireMainProtocolTwoWayImportWithErrorResult<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayImportWithErrorResult
where
    ___E: ::fidl_next::Encoder + ?Sized,

    fidl_next_test_protocollayouts_imported::ImportUnionPayload: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayImportWithErrorResult { raw, _phantom: _ } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                fidl_next_test_protocollayouts_imported::ImportUnionPayload,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayImportWithErrorResult> {
    type EncodedOption<'buf> = WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayImportWithErrorResult>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayImportWithErrorResult: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayImportWithErrorResult { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayImportWithErrorResult<'buf>>
    for MainProtocolTwoWayImportWithErrorResult
{
    fn take_from(from: &mut WireMainProtocolTwoWayImportWithErrorResult<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf>>
    for Option<Box<MainProtocolTwoWayImportWithErrorResult>>
{
    fn take_from(from: &mut WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayImportWithErrorResult`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayImportWithErrorResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod main_protocol_two_way_import_with_error_result {
    pub enum Ref<'union> {
        Response(&'union fidl_next_test_protocollayouts_imported::WireImportUnionPayload),

        Err(&'union ::fidl_next::u32_le),
    }

    pub enum Mut<'union> {
        Response(&'union mut fidl_next_test_protocollayouts_imported::WireImportUnionPayload),

        Err(&'union mut ::fidl_next::u32_le),
    }
}

impl<'buf> WireMainProtocolTwoWayImportWithErrorResult<'buf> {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_import_with_error_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_import_with_error_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::main_protocol_two_way_import_with_error_result::Ref::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::main_protocol_two_way_import_with_error_result::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_import_with_error_result::Mut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => crate::main_protocol_two_way_import_with_error_result::Mut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireMainProtocolTwoWayImportWithErrorResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    fidl_next_test_protocollayouts_imported::WireImportUnionPayload: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocolTwoWayImportWithErrorResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<
                            fidl_next_test_protocollayouts_imported::WireImportUnionPayload
                        >().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayImportWithErrorResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolTwoWayImportWithErrorResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolTwoWayImportWithErrorResult<'buf>> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayImportWithErrorResult {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    fidl_next_test_protocollayouts_imported::WireImportUnionPayload: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocolTwoWayImportWithErrorResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayLocalWithErrorResult {
    Response(crate::LocalUnionPayload),

    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayLocalWithErrorResult {
    type Encoded<'buf> = WireMainProtocolTwoWayLocalWithErrorResult<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayLocalWithErrorResult
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::LocalUnionPayload: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayLocalWithErrorResult { raw, _phantom: _ } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::LocalUnionPayload,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayLocalWithErrorResult> {
    type EncodedOption<'buf> = WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayLocalWithErrorResult>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayLocalWithErrorResult: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayLocalWithErrorResult { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayLocalWithErrorResult<'buf>>
    for MainProtocolTwoWayLocalWithErrorResult
{
    fn take_from(from: &mut WireMainProtocolTwoWayLocalWithErrorResult<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf>>
    for Option<Box<MainProtocolTwoWayLocalWithErrorResult>>
{
    fn take_from(from: &mut WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayLocalWithErrorResult`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayLocalWithErrorResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod main_protocol_two_way_local_with_error_result {
    pub enum Ref<'union> {
        Response(&'union crate::WireLocalUnionPayload),

        Err(&'union ::fidl_next::u32_le),
    }

    pub enum Mut<'union> {
        Response(&'union mut crate::WireLocalUnionPayload),

        Err(&'union mut ::fidl_next::u32_le),
    }
}

impl<'buf> WireMainProtocolTwoWayLocalWithErrorResult<'buf> {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_local_with_error_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_local_with_error_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::main_protocol_two_way_local_with_error_result::Ref::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::main_protocol_two_way_local_with_error_result::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_local_with_error_result::Mut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => crate::main_protocol_two_way_local_with_error_result::Mut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireMainProtocolTwoWayLocalWithErrorResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireLocalUnionPayload: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireLocalUnionPayload>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocolTwoWayLocalWithErrorResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<crate::WireLocalUnionPayload>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayLocalWithErrorResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolTwoWayLocalWithErrorResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolTwoWayLocalWithErrorResult<'buf>> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayLocalWithErrorResult {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireLocalUnionPayload: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireLocalUnionPayload>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocolTwoWayLocalWithErrorResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolOneWayAnonRequest {
    pub a: Option<u16>,
}

impl MainProtocolOneWayAnonRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolOneWayAnonRequest {
    type Encoded<'buf> = WireMainProtocolOneWayAnonRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOneWayAnonRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolOneWayAnonRequest<'buf>>
    for MainProtocolOneWayAnonRequest
{
    fn take_from(from: &mut WireMainProtocolOneWayAnonRequest<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolOneWayAnonRequest`].
#[repr(C)]
pub struct WireMainProtocolOneWayAnonRequest<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireMainProtocolOneWayAnonRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireMainProtocolOneWayAnonRequest<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolOneWayAnonRequest<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolOneWayAnonRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonRequest {
    B(bool),

    UnknownOrdinal(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonRequest {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonRequest;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonRequest { raw, _phantom: _ } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonRequest> {
    type EncodedOption<'buf> = WireOptionalMainProtocolTwoWayAnonRequest;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonRequest { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonRequest> for MainProtocolTwoWayAnonRequest {
    fn take_from(from: &mut WireMainProtocolTwoWayAnonRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonRequest>
    for Option<Box<MainProtocolTwoWayAnonRequest>>
{
    fn take_from(from: &mut WireOptionalMainProtocolTwoWayAnonRequest) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod main_protocol_two_way_anon_request {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal(u64),
    }

    pub enum Mut<'union> {
        B(&'union mut bool),

        UnknownOrdinal(u64),
    }
}

impl WireMainProtocolTwoWayAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked()
            }),

            unknown => crate::main_protocol_two_way_anon_request::Ref::UnknownOrdinal(unknown),
        }
    }

    pub fn as_mut(&mut self) -> crate::main_protocol_two_way_anon_request::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_request::Mut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            unknown => crate::main_protocol_two_way_anon_request::Mut::UnknownOrdinal(unknown),
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonRequest
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalMainProtocolTwoWayAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolTwoWayAnonRequest> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolTwoWayAnonRequest> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayAnonRequest {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalMainProtocolTwoWayAnonRequest {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonRequest {
                raw: ::fidl_next::RawWireUnion::null(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalMainProtocolTwoWayAnonRequest
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonResponse {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonResponse {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonResponse<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonResponse { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonResponse<'buf>>
    for MainProtocolTwoWayAnonResponse
{
    fn take_from(from: &mut WireMainProtocolTwoWayAnonResponse<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonResponse`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonResponse<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonResponse<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireMainProtocolTwoWayAnonResponse<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonResponse<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonWithErrorRequest {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorRequest {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonWithErrorRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorRequest<'buf>>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    fn take_from(from: &mut WireMainProtocolTwoWayAnonWithErrorRequest<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorRequest`].
#[repr(C)]
pub struct WireMainProtocolTwoWayAnonWithErrorRequest<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireMainProtocolTwoWayAnonWithErrorRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireMainProtocolTwoWayAnonWithErrorRequest<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorRequest<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonWithErrorRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonWithErrorResponse {
    B(bool),

    UnknownOrdinal(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorResponse {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonWithErrorResponse;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorResponse { raw, _phantom: _ } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonWithErrorResponse> {
    type EncodedOption<'buf> = WireOptionalMainProtocolTwoWayAnonWithErrorResponse;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonWithErrorResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonWithErrorResponse { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorResponse>
    for MainProtocolTwoWayAnonWithErrorResponse
{
    fn take_from(from: &mut WireMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonWithErrorResponse>
    for Option<Box<MainProtocolTwoWayAnonWithErrorResponse>>
{
    fn take_from(from: &mut WireOptionalMainProtocolTwoWayAnonWithErrorResponse) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorResponse`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod main_protocol_two_way_anon_with_error_response {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal(u64),
    }

    pub enum Mut<'union> {
        B(&'union mut bool),

        UnknownOrdinal(u64),
    }
}

impl WireMainProtocolTwoWayAnonWithErrorResponse {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_with_error_response::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_response::Ref::B(unsafe {
                self.raw.get().deref_unchecked()
            }),

            unknown => {
                crate::main_protocol_two_way_anon_with_error_response::Ref::UnknownOrdinal(unknown)
            }
        }
    }

    pub fn as_mut(&mut self) -> crate::main_protocol_two_way_anon_with_error_response::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_response::Mut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            unknown => {
                crate::main_protocol_two_way_anon_with_error_response::Mut::UnknownOrdinal(unknown)
            }
        }
    }
}

impl Clone for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonWithErrorResponse> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolTwoWayAnonWithErrorResponse> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolTwoWayAnonWithErrorResponse> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayAnonWithErrorResponse {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

impl Clone for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
                raw: ::fidl_next::RawWireUnion::null(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocolTwoWayAnonWithErrorResponse
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonWithErrorResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolTwoWayAnonWithErrorResult {
    Response(crate::MainProtocolTwoWayAnonWithErrorResponse),

    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorResult {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonWithErrorResult<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorResult
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::MainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorResult { raw, _phantom: _ } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::MainProtocolTwoWayAnonWithErrorResponse,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonWithErrorResult> {
    type EncodedOption<'buf> = WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonWithErrorResult>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonWithErrorResult: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonWithErrorResult { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorResult<'buf>>
    for MainProtocolTwoWayAnonWithErrorResult
{
    fn take_from(from: &mut WireMainProtocolTwoWayAnonWithErrorResult<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf>>
    for Option<Box<MainProtocolTwoWayAnonWithErrorResult>>
{
    fn take_from(from: &mut WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolTwoWayAnonWithErrorResult`].
#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonWithErrorResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod main_protocol_two_way_anon_with_error_result {
    pub enum Ref<'union> {
        Response(&'union crate::WireMainProtocolTwoWayAnonWithErrorResponse),

        Err(&'union ::fidl_next::u32_le),
    }

    pub enum Mut<'union> {
        Response(&'union mut crate::WireMainProtocolTwoWayAnonWithErrorResponse),

        Err(&'union mut ::fidl_next::u32_le),
    }
}

impl<'buf> WireMainProtocolTwoWayAnonWithErrorResult<'buf> {
    pub fn as_ref(&self) -> crate::main_protocol_two_way_anon_with_error_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::main_protocol_two_way_anon_with_error_result::Ref::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::main_protocol_two_way_anon_with_error_result::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_two_way_anon_with_error_result::Mut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => crate::main_protocol_two_way_anon_with_error_result::Mut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireMainProtocolTwoWayAnonWithErrorResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireMainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireMainProtocolTwoWayAnonWithErrorResponse,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw
                    .get()
                    .deref_unchecked::<crate::WireMainProtocolTwoWayAnonWithErrorResponse>()
                    .fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonWithErrorResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolTwoWayAnonWithErrorResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolTwoWayAnonWithErrorResult<'buf>> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayAnonWithErrorResult {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireMainProtocolTwoWayAnonWithErrorResponse: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireMainProtocolTwoWayAnonWithErrorResponse,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonWithErrorResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub enum MainProtocolOnAnonRequest {
    B(bool),

    UnknownOrdinal(u64),
}

impl ::fidl_next::Encodable for MainProtocolOnAnonRequest {
    type Encoded<'buf> = WireMainProtocolOnAnonRequest;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOnAnonRequest { raw, _phantom: _ } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::UnknownOrdinal(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolOnAnonRequest> {
    type EncodedOption<'buf> = WireOptionalMainProtocolOnAnonRequest;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolOnAnonRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolOnAnonRequest { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMainProtocolOnAnonRequest> for MainProtocolOnAnonRequest {
    fn take_from(from: &mut WireMainProtocolOnAnonRequest) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalMainProtocolOnAnonRequest>
    for Option<Box<MainProtocolOnAnonRequest>>
{
    fn take_from(from: &mut WireOptionalMainProtocolOnAnonRequest) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`MainProtocolOnAnonRequest`].
#[repr(transparent)]
pub struct WireMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod main_protocol_on_anon_request {
    pub enum Ref<'union> {
        B(&'union bool),

        UnknownOrdinal(u64),
    }

    pub enum Mut<'union> {
        B(&'union mut bool),

        UnknownOrdinal(u64),
    }
}

impl WireMainProtocolOnAnonRequest {
    pub fn as_ref(&self) -> crate::main_protocol_on_anon_request::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_on_anon_request::Ref::B(unsafe {
                self.raw.get().deref_unchecked()
            }),

            unknown => crate::main_protocol_on_anon_request::Ref::UnknownOrdinal(unknown),
        }
    }

    pub fn as_mut(&mut self) -> crate::main_protocol_on_anon_request::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::main_protocol_on_anon_request::Mut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            unknown => crate::main_protocol_on_anon_request::Mut::UnknownOrdinal(unknown),
        }
    }
}

impl Clone for WireMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireMainProtocolOnAnonRequest
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolOnAnonRequest {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalMainProtocolOnAnonRequest {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolOnAnonRequest> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolOnAnonRequest> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolOnAnonRequest> {
        if self.is_some() {
            Some(WireMainProtocolOnAnonRequest {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalMainProtocolOnAnonRequest {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

impl Clone for WireOptionalMainProtocolOnAnonRequest {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalMainProtocolOnAnonRequest {
                raw: ::fidl_next::RawWireUnion::null(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<bool>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => Self {
                raw: unsafe { self.raw.clone_unchecked::<()>() },
                _phantom: ::core::marker::PhantomData,
            },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalMainProtocolOnAnonRequest
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalMainProtocolOnAnonRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the MainProtocol protocol.
#[derive(Debug)]
pub struct MainProtocol;

pub mod main_protocol {

    pub struct OneWayAnonComposed;

    impl ::fidl_next::bind::Method for OneWayAnonComposed {
        const ORDINAL: u64 = 467706262354916833;

        type Protocol = crate::MainProtocol;

        type Request<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest<
                'buf,
            >;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct TwoWayAnonComposed;

    impl ::fidl_next::bind::Method for TwoWayAnonComposed {
        const ORDINAL: u64 = 1634702755099390832;

        type Protocol = crate::MainProtocol;

        type Request<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest;

        type Response<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedResponse<
                'buf,
            >;
    }

    pub struct TwoWayAnonComposedWithError;

    impl ::fidl_next::bind::Method for TwoWayAnonComposedWithError {
        const ORDINAL: u64 = 3374101322700362141;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf>;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorResult<'buf>;
    }

    pub struct OnAnonComposed;

    impl ::fidl_next::bind::Method for OnAnonComposed {
        const ORDINAL: u64 = 9198778981238868491;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedProtocolOnAnonComposedRequest;
    }

    pub struct OneWayNamedComposed;

    impl ::fidl_next::bind::Method for OneWayNamedComposed {
        const ORDINAL: u64 = 6735359826241449560;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct TwoWayNamedComposed;

    impl ::fidl_next::bind::Method for TwoWayNamedComposed {
        const ORDINAL: u64 = 1110122450485917712;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>;
    }

    pub struct TwoWayNamedComposedWithError;

    impl ::fidl_next::bind::Method for TwoWayNamedComposedWithError {
        const ORDINAL: u64 = 3520341666774118271;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayNamedComposedWithErrorResult<'buf>;
    }

    pub struct OnNamedComposed;

    impl ::fidl_next::bind::Method for OnNamedComposed {
        const ORDINAL: u64 = 6802961197456477674;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload;
    }

    pub struct OneWayImport;

    impl ::fidl_next::bind::Method for OneWayImport {
        const ORDINAL: u64 = 374039999976906043;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct TwoWayImport;

    impl ::fidl_next::bind::Method for TwoWayImport {
        const ORDINAL: u64 = 3167860988423964164;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>;
    }

    pub struct TwoWayImportWithError;

    impl ::fidl_next::bind::Method for TwoWayImportWithError {
        const ORDINAL: u64 = 4837028007581646602;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>;

        type Response<'buf> = crate::WireMainProtocolTwoWayImportWithErrorResult<'buf>;
    }

    pub struct OnImport;

    impl ::fidl_next::bind::Method for OnImport {
        const ORDINAL: u64 = 6584793811321990352;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload;
    }

    pub struct OneWayLocal;

    impl ::fidl_next::bind::Method for OneWayLocal {
        const ORDINAL: u64 = 6085941264859402051;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = crate::WireLocalTablePayload<'buf>;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct TwoWayLocal;

    impl ::fidl_next::bind::Method for TwoWayLocal {
        const ORDINAL: u64 = 7763901300032164763;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = crate::WireLocalUnionPayload;

        type Response<'buf> = crate::WireLocalTablePayload<'buf>;
    }

    pub struct TwoWayLocalWithError;

    impl ::fidl_next::bind::Method for TwoWayLocalWithError {
        const ORDINAL: u64 = 5609487496960056151;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = crate::WireLocalTablePayload<'buf>;

        type Response<'buf> = crate::WireMainProtocolTwoWayLocalWithErrorResult<'buf>;
    }

    pub struct OnLocal;

    impl ::fidl_next::bind::Method for OnLocal {
        const ORDINAL: u64 = 4199259762307646332;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> = crate::WireLocalUnionPayload;
    }

    pub struct OneWayAnon;

    impl ::fidl_next::bind::Method for OneWayAnon {
        const ORDINAL: u64 = 4203317713771984620;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = crate::WireMainProtocolOneWayAnonRequest<'buf>;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct TwoWayAnon;

    impl ::fidl_next::bind::Method for TwoWayAnon {
        const ORDINAL: u64 = 7435080039097281487;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = crate::WireMainProtocolTwoWayAnonRequest;

        type Response<'buf> = crate::WireMainProtocolTwoWayAnonResponse<'buf>;
    }

    pub struct TwoWayAnonWithError;

    impl ::fidl_next::bind::Method for TwoWayAnonWithError {
        const ORDINAL: u64 = 7770394869745610225;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = crate::WireMainProtocolTwoWayAnonWithErrorRequest<'buf>;

        type Response<'buf> = crate::WireMainProtocolTwoWayAnonWithErrorResult<'buf>;
    }

    pub struct OnAnon;

    impl ::fidl_next::bind::Method for OnAnon {
        const ORDINAL: u64 = 7275479350674227467;

        type Protocol = crate::MainProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> = crate::WireMainProtocolOnAnonRequest;
    }
}

/// A helper trait for the `MainProtocol` client protocol.
pub trait MainProtocolClient<___T: ::fidl_next::protocol::Transport> {
    fn one_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest<'buf>,
                        >;

    fn two_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<
                            '_,
                            ___T,
                            main_protocol::TwoWayAnonComposed,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest,
                        >;

    fn two_way_anon_composed_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<
                            '_,
                            ___T,
                            main_protocol::TwoWayAnonComposedWithError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf>,
                        >;

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >;

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >;

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayNamedComposedWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >;

    fn one_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >;

    fn two_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayImport>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >;

    fn two_way_import_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayImportWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >;

    fn one_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireLocalTablePayload<'buf>,
        >;

    fn two_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireLocalUnionPayload>;

    fn two_way_local_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireLocalTablePayload<'buf>,
        >;

    fn one_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireMainProtocolOneWayAnonRequest<'buf>,
        >;

    fn two_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireMainProtocolTwoWayAnonRequest,
        >;

    fn two_way_anon_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireMainProtocolTwoWayAnonWithErrorRequest<'buf>,
        >;
}

impl<___T> MainProtocolClient<___T> for ::fidl_next::bind::Client<___T, MainProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn one_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest<'buf>,
                        >,
                    {
        self.untyped().send_request(467706262354916833, request)
    }
                
            
    
        
        

        
        
                
                    fn two_way_anon_composed<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayAnonComposed>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest,
                        >,
                    {
        self.untyped()
            .send_transaction(1634702755099390832, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
                
            
    
        
        

        
        
                
                    fn two_way_anon_composed_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayAnonComposedWithError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf>,
                        >,
                    {
        self.untyped()
            .send_transaction(3374101322700362141, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn one_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >,
    {
        self.untyped().send_request(6735359826241449560, request)
    }

    fn two_way_named_composed<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayNamedComposed>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >,
    {
        self.untyped()
            .send_transaction(1110122450485917712, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn two_way_named_composed_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayNamedComposedWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >,
    {
        self.untyped()
            .send_transaction(3520341666774118271, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn one_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >,
    {
        self.untyped().send_request(374039999976906043, request)
    }

    fn two_way_import<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayImport>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportUnionPayload,
        >,
    {
        self.untyped()
            .send_transaction(3167860988423964164, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn two_way_import_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayImportWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>,
        >,
    {
        self.untyped()
            .send_transaction(4837028007581646602, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn one_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireLocalTablePayload<'buf>,
        >,
    {
        self.untyped().send_request(6085941264859402051, request)
    }

    fn two_way_local<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayLocal>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireLocalUnionPayload>,
    {
        self.untyped()
            .send_transaction(7763901300032164763, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn two_way_local_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayLocalWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireLocalTablePayload<'buf>,
        >,
    {
        self.untyped()
            .send_transaction(5609487496960056151, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn one_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireMainProtocolOneWayAnonRequest<'buf>,
        >,
    {
        self.untyped().send_request(4203317713771984620, request)
    }

    fn two_way_anon<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayAnon>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireMainProtocolTwoWayAnonRequest,
        >,
    {
        self.untyped()
            .send_transaction(7435080039097281487, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn two_way_anon_with_error<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, main_protocol::TwoWayAnonWithError>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireMainProtocolTwoWayAnonWithErrorRequest<'buf>,
        >,
    {
        self.untyped()
            .send_transaction(7770394869745610225, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
}

/// A client handler for the MainProtocol protocol.

pub trait MainProtocolClientHandler<___T: ::fidl_next::protocol::Transport> {
    fn on_anon_composed(
        &mut self,
        message: ::fidl_next::bind::ResponseBuffer<___T, main_protocol::OnAnonComposed>,
    );

    fn on_named_composed(
        &mut self,
        message: ::fidl_next::bind::ResponseBuffer<___T, main_protocol::OnNamedComposed>,
    );

    fn on_import(
        &mut self,
        message: ::fidl_next::bind::ResponseBuffer<___T, main_protocol::OnImport>,
    );

    fn on_local(
        &mut self,
        message: ::fidl_next::bind::ResponseBuffer<___T, main_protocol::OnLocal>,
    );

    fn on_anon(&mut self, message: ::fidl_next::bind::ResponseBuffer<___T, main_protocol::OnAnon>);
}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: MainProtocolClientHandler<___T>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedResponse<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorResult<
        'buf,
    >: ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedProtocolOnAnonComposedRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayNamedComposedWithErrorResult<
        'buf,
    >: ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolTwoWayImportWithErrorResult<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireLocalTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolTwoWayLocalWithErrorResult<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireLocalUnionPayload:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolTwoWayAnonResponse<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolTwoWayAnonWithErrorResult<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolOnAnonRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            9198778981238868491 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.on_anon_composed(buffer);
            }

            6802961197456477674 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.on_named_composed(buffer);
            }

            6584793811321990352 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.on_import(buffer);
            }

            4199259762307646332 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.on_local(buffer);
            }

            7275479350674227467 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.on_anon(buffer);
            }

            ordinal => todo!(),
        }
    }
}

/// A helper trait for the `MainProtocol` server protocol.
pub trait MainProtocolServer<___T: ::fidl_next::protocol::Transport> {
    fn on_anon_composed(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;

    fn on_named_composed(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;

    fn on_import(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;

    fn on_local(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;

    fn on_anon(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;
}

impl<___T> MainProtocolServer<___T> for ::fidl_next::bind::Server<___T, MainProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn on_anon_composed(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(9198778981238868491, &mut ())
    }

    fn on_named_composed(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(6802961197456477674, &mut ())
    }

    fn on_import(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(6584793811321990352, &mut ())
    }

    fn on_local(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(4199259762307646332, &mut ())
    }

    fn on_anon(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(7275479350674227467, &mut ())
    }
}

/// A server handler for the MainProtocol protocol.

pub trait MainProtocolServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn one_way_anon_composed(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::OneWayAnonComposed>,
    );

    fn two_way_anon_composed(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayAnonComposed>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayAnonComposed>,
    );

    fn two_way_anon_composed_with_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayAnonComposedWithError>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayAnonComposedWithError>,
    );

    fn one_way_named_composed(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::OneWayNamedComposed>,
    );

    fn two_way_named_composed(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayNamedComposed>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayNamedComposed>,
    );

    fn two_way_named_composed_with_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<
            ___T,
            main_protocol::TwoWayNamedComposedWithError,
        >,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayNamedComposedWithError>,
    );

    fn one_way_import(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::OneWayImport>,
    );

    fn two_way_import(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayImport>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayImport>,
    );

    fn two_way_import_with_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayImportWithError>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayImportWithError>,
    );

    fn one_way_local(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::OneWayLocal>,
    );

    fn two_way_local(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayLocal>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayLocal>,
    );

    fn two_way_local_with_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayLocalWithError>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayLocalWithError>,
    );

    fn one_way_anon(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::OneWayAnon>,
    );

    fn two_way_anon(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayAnon>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayAnon>,
    );

    fn two_way_anon_with_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, main_protocol::TwoWayAnonWithError>,
        responder: ::fidl_next::bind::Responder<main_protocol::TwoWayAnonWithError>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for MainProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: MainProtocolServerHandler<___T>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedProtocolOneWayAnonComposedRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedProtocolTwoWayAnonComposedWithErrorRequest<
        'buf,
    >: ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportUnionPayload:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireLocalTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireLocalUnionPayload:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireLocalTablePayload<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolOneWayAnonRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolTwoWayAnonRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireMainProtocolTwoWayAnonWithErrorRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            467706262354916833 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.one_way_anon_composed(buffer);
            }

            6735359826241449560 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.one_way_named_composed(buffer);
            }

            374039999976906043 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.one_way_import(buffer);
            }

            6085941264859402051 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.one_way_local(buffer);
            }

            4203317713771984620 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.one_way_anon(buffer);
            }

            ordinal => todo!(),
        }
    }

    fn on_transaction(
        handler: &mut ___H,
        ordinal: u64,
        mut buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            1634702755099390832 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_composed(buffer, responder);
            }

            3374101322700362141 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_composed_with_error(buffer, responder);
            }

            1110122450485917712 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_named_composed(buffer, responder);
            }

            3520341666774118271 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_named_composed_with_error(buffer, responder);
            }

            3167860988423964164 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_import(buffer, responder);
            }

            4837028007581646602 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_import_with_error(buffer, responder);
            }

            7763901300032164763 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_local(buffer, responder);
            }

            5609487496960056151 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_local_with_error(buffer, responder);
            }

            7435080039097281487 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon(buffer, responder);
            }

            7770394869745610225 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.two_way_anon_with_error(buffer, responder);
            }

            ordinal => todo!(),
        }
    }
}

/// The type corresponding to the OpenProtocol protocol.
#[derive(Debug)]
pub struct OpenProtocol;

pub mod open_protocol {

    pub struct FlexibleOneWay;

    impl ::fidl_next::bind::Method for FlexibleOneWay {
        const ORDINAL: u64 = 3516779973873009953;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct FlexibleTwoWayNoError;

    impl ::fidl_next::bind::Method for FlexibleTwoWayNoError {
        const ORDINAL: u64 = 5572735551219638488;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorResult;
    }

    pub struct FlexibleTwoWayWithError;

    impl ::fidl_next::bind::Method for FlexibleTwoWayWithError {
        const ORDINAL: u64 = 3504132377779779458;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorResult;
    }

    pub struct FlexibleEvent;

    impl ::fidl_next::bind::Method for FlexibleEvent {
        const ORDINAL: u64 = 9152311661656086484;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleEventRequest;
    }

    pub struct StrictOneWay;

    impl ::fidl_next::bind::Method for StrictOneWay {
        const ORDINAL: u64 = 8790149921168801703;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct StrictTwoWayNoError;

    impl ::fidl_next::bind::Method for StrictTwoWayNoError {
        const ORDINAL: u64 = 3690935745864999300;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorResponse;
    }

    pub struct StrictTwoWayWithError;

    impl ::fidl_next::bind::Method for StrictTwoWayWithError {
        const ORDINAL: u64 = 5364624536440098871;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest;

        type Response<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorResult;
    }

    pub struct StrictEvent;

    impl ::fidl_next::bind::Method for StrictEvent {
        const ORDINAL: u64 = 3921073878922106269;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> =
            fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictEventRequest;
    }

    pub struct FlexibleOneWayNamedPayload;

    impl ::fidl_next::bind::Method for FlexibleOneWayNamedPayload {
        const ORDINAL: u64 = 1525606789639046512;

        type Protocol = crate::OpenProtocol;

        type Request<'buf> = fidl_next_test_protocollayouts_imported::WireImportStructPayload;

        type Response<'buf> = ::fidl_next::bind::Never;
    }
}

/// A helper trait for the `OpenProtocol` client protocol.
pub trait OpenProtocolClient<___T: ::fidl_next::protocol::Transport> {
    fn flexible_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest,
                        >;

    fn flexible_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<
                            '_,
                            ___T,
                            open_protocol::FlexibleTwoWayNoError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest,
                        >;

    fn flexible_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<
                            '_,
                            ___T,
                            open_protocol::FlexibleTwoWayWithError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest,
                        >;

    fn strict_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest,
                        >;

    fn strict_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<
                            '_,
                            ___T,
                            open_protocol::StrictTwoWayNoError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest,
                        >;

    fn strict_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<
                            '_,
                            ___T,
                            open_protocol::StrictTwoWayWithError,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest,
                        >;

    fn flexible_one_way_named_payload<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportStructPayload,
        >;
}

impl<___T> OpenProtocolClient<___T> for ::fidl_next::bind::Client<___T, OpenProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn flexible_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest,
                        >,
                    {
        self.untyped().send_request(3516779973873009953, request)
    }
                
            
    
        
        

        
        
                
                    fn flexible_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<'_, ___T, open_protocol::FlexibleTwoWayNoError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest,
                        >,
                    {
        self.untyped()
            .send_transaction(5572735551219638488, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
                
            
    
        
        

        
        
                
                    fn flexible_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<'_, ___T, open_protocol::FlexibleTwoWayWithError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest,
                        >,
                    {
        self.untyped()
            .send_transaction(3504132377779779458, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
                
            
    
        
        

        
        
        
    
        
        

        
        
                
                    fn strict_one_way<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest,
                        >,
                    {
        self.untyped().send_request(8790149921168801703, request)
    }
                
            
    
        
        

        
        
                
                    fn strict_two_way_no_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<'_, ___T, open_protocol::StrictTwoWayNoError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest,
                        >,
                    {
        self.untyped()
            .send_transaction(3690935745864999300, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
                
            
    
        
        

        
        
                
                    fn strict_two_way_with_error<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::TransactionFuture<'_, ___T, open_protocol::StrictTwoWayWithError>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest,
                        >,
                    {
        self.untyped()
            .send_transaction(5364624536440098871, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }

    fn flexible_one_way_named_payload<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = fidl_next_test_protocollayouts_imported::WireImportStructPayload,
        >,
    {
        self.untyped().send_request(1525606789639046512, request)
    }
}

/// A client handler for the OpenProtocol protocol.

pub trait OpenProtocolClientHandler<___T: ::fidl_next::protocol::Transport> {
    fn flexible_event(
        &mut self,
        message: ::fidl_next::bind::ResponseBuffer<___T, open_protocol::FlexibleEvent>,
    );

    fn strict_event(
        &mut self,
        message: ::fidl_next::bind::ResponseBuffer<___T, open_protocol::StrictEvent>,
    );

    fn handle_unknown_interaction(&mut self, ordinal: u64);
}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for OpenProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: OpenProtocolClientHandler<___T>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorResult:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorResult:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleEventRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorResult:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictEventRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            9152311661656086484 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.flexible_event(buffer);
            }

            3921073878922106269 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.strict_event(buffer);
            }

            ordinal => handler.handle_unknown_interaction(ordinal),
        }
    }
}

/// A helper trait for the `OpenProtocol` server protocol.
pub trait OpenProtocolServer<___T: ::fidl_next::protocol::Transport> {
    fn flexible_event(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;

    fn strict_event(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;
}

impl<___T> OpenProtocolServer<___T> for ::fidl_next::bind::Server<___T, OpenProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn flexible_event(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(9152311661656086484, &mut ())
    }

    fn strict_event(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(3921073878922106269, &mut ())
    }
}

/// A server handler for the OpenProtocol protocol.

pub trait OpenProtocolServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn flexible_one_way(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, open_protocol::FlexibleOneWay>,
    );

    fn flexible_two_way_no_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, open_protocol::FlexibleTwoWayNoError>,
        responder: ::fidl_next::bind::Responder<open_protocol::FlexibleTwoWayNoError>,
    );

    fn flexible_two_way_with_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, open_protocol::FlexibleTwoWayWithError>,
        responder: ::fidl_next::bind::Responder<open_protocol::FlexibleTwoWayWithError>,
    );

    fn strict_one_way(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, open_protocol::StrictOneWay>,
    );

    fn strict_two_way_no_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, open_protocol::StrictTwoWayNoError>,
        responder: ::fidl_next::bind::Responder<open_protocol::StrictTwoWayNoError>,
    );

    fn strict_two_way_with_error(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, open_protocol::StrictTwoWayWithError>,
        responder: ::fidl_next::bind::Responder<open_protocol::StrictTwoWayWithError>,
    );

    fn flexible_one_way_named_payload(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, open_protocol::FlexibleOneWayNamedPayload>,
    );

    fn handle_unknown_interaction(&mut self, ordinal: u64);
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for OpenProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: OpenProtocolServerHandler<___T>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleOneWayRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayNoErrorRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolFlexibleTwoWayWithErrorRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictOneWayRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayNoErrorRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireComposedOpenProtocolStrictTwoWayWithErrorRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> fidl_next_test_protocollayouts_imported::WireImportStructPayload:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            3516779973873009953 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.flexible_one_way(buffer);
            }

            8790149921168801703 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.strict_one_way(buffer);
            }

            1525606789639046512 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.flexible_one_way_named_payload(buffer);
            }

            ordinal => handler.handle_unknown_interaction(ordinal),
        }
    }

    fn on_transaction(
        handler: &mut ___H,
        ordinal: u64,
        mut buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            5572735551219638488 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.flexible_two_way_no_error(buffer, responder);
            }

            3504132377779779458 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.flexible_two_way_with_error(buffer, responder);
            }

            3690935745864999300 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.strict_two_way_no_error(buffer, responder);
            }

            5364624536440098871 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.strict_two_way_with_error(buffer, responder);
            }

            ordinal => handler.handle_unknown_interaction(ordinal),
        }
    }
}
