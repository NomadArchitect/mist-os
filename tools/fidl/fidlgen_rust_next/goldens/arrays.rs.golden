// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct StructLargeArray {
    pub a: [u32; 100],
}

impl ::fidl_next::Encodable for StructLargeArray {
    type Encoded<'buf> = WireStructLargeArray;
}

impl<___E> ::fidl_next::Encode<___E> for StructLargeArray
where
    [u32; 100]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructLargeArray> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructLargeArray>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructLargeArray>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructLargeArray: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructLargeArray> for StructLargeArray {
    fn take_from(from: &mut WireStructLargeArray) -> Self {
        Self { a: ::fidl_next::TakeFrom::take_from(&mut from.a) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructLargeArray {
    pub a: [::fidl_next::u32_le; 100],
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructLargeArray
where
    ___D: ?Sized,

    [::fidl_next::u32_le; 100]: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
            } = slot;
        }
        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructSmallArray {
    pub a: [u32; 2],
}

impl ::fidl_next::Encodable for StructSmallArray {
    type Encoded<'buf> = WireStructSmallArray;
}

impl<___E> ::fidl_next::Encode<___E> for StructSmallArray
where
    [u32; 2]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructSmallArray> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructSmallArray>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructSmallArray>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructSmallArray: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructSmallArray> for StructSmallArray {
    fn take_from(from: &mut WireStructSmallArray) -> Self {
        Self { a: ::fidl_next::TakeFrom::take_from(&mut from.a) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructSmallArray {
    pub a: [::fidl_next::u32_le; 2],
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructSmallArray
where
    ___D: ?Sized,

    [::fidl_next::u32_le; 2]: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
            } = slot;
        }
        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct TableLargeArray {
    pub a: Option<[u32; 100]>,
}

impl TableLargeArray {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for TableLargeArray {
    type Encoded<'buf> = WireTableLargeArray<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for TableLargeArray
where
    ___E: ::fidl_next::Encoder + ?Sized,

    [u32; 100]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTableLargeArray { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireTableLargeArray<'buf>> for TableLargeArray {
    fn take_from(from: &mut WireTableLargeArray<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireTableLargeArray<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireTableLargeArray<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    [::fidl_next::u32_le; 100]: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, [::fidl_next::u32_le; 100]>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireTableLargeArray<'buf> {
    pub fn a(&self) -> Option<&[::fidl_next::u32_le; 100]> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut [::fidl_next::u32_le; 100]> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<[::fidl_next::u32_le; 100]> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTableLargeArray<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("TableLargeArray").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub struct TableSmallArray {
    pub a: Option<[u32; 2]>,
}

impl TableSmallArray {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for TableSmallArray {
    type Encoded<'buf> = WireTableSmallArray<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for TableSmallArray
where
    ___E: ::fidl_next::Encoder + ?Sized,

    [u32; 2]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTableSmallArray { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireTableSmallArray<'buf>> for TableSmallArray {
    fn take_from(from: &mut WireTableSmallArray<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireTableSmallArray<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireTableSmallArray<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    [::fidl_next::u32_le; 2]: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, [::fidl_next::u32_le; 2]>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireTableSmallArray<'buf> {
    pub fn a(&self) -> Option<&[::fidl_next::u32_le; 2]> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut [::fidl_next::u32_le; 2]> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<[::fidl_next::u32_le; 2]> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTableSmallArray<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("TableSmallArray").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]

pub enum UnionLargeArray {
    A([u32; 100]),
}

impl ::fidl_next::Encodable for UnionLargeArray {
    type Encoded<'buf> = WireUnionLargeArray<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for UnionLargeArray
where
    ___E: ::fidl_next::Encoder + ?Sized,

    [u32; 100]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionLargeArray { raw } = slot);

        match self {
            Self::A(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u32; 100]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionLargeArray> {
    type EncodedOption<'buf> = WireOptionalUnionLargeArray<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionLargeArray>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionLargeArray: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionLargeArray { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireUnionLargeArray<'buf>> for UnionLargeArray {
    fn take_from(from: &mut WireUnionLargeArray<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::A(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalUnionLargeArray<'buf>>
    for Option<Box<UnionLargeArray>>
{
    fn take_from(from: &mut WireOptionalUnionLargeArray<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionLargeArray<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireUnionLargeArrayRef<'buf> {
    A(&'buf [::fidl_next::u32_le; 100]),
}

pub enum WireUnionLargeArrayMut<'buf> {
    A(&'buf mut [::fidl_next::u32_le; 100]),
}

impl WireUnionLargeArray<'_> {
    pub fn as_ref(&self) -> WireUnionLargeArrayRef<'_> {
        match self.raw.ordinal() {
            1 => WireUnionLargeArrayRef::A(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireUnionLargeArrayMut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionLargeArrayMut::A(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireUnionLargeArray<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    [::fidl_next::u32_le; 100]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [::fidl_next::u32_le; 100]>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionLargeArray<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[::fidl_next::u32_le; 100]>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionLargeArray<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionLargeArray<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionLargeArray<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionLargeArray<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionLargeArray<'buf>> {
        if self.is_some() {
            Some(WireUnionLargeArray {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionLargeArray<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireOptionalUnionLargeArray<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    [::fidl_next::u32_le; 100]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [::fidl_next::u32_le; 100]>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionLargeArray<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum UnionSmallArray {
    A([u32; 2]),
}

impl ::fidl_next::Encodable for UnionSmallArray {
    type Encoded<'buf> = WireUnionSmallArray<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSmallArray
where
    ___E: ::fidl_next::Encoder + ?Sized,

    [u32; 2]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSmallArray { raw } = slot);

        match self {
            Self::A(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u32; 2]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSmallArray> {
    type EncodedOption<'buf> = WireOptionalUnionSmallArray<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSmallArray>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionSmallArray: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSmallArray { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireUnionSmallArray<'buf>> for UnionSmallArray {
    fn take_from(from: &mut WireUnionSmallArray<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::A(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalUnionSmallArray<'buf>>
    for Option<Box<UnionSmallArray>>
{
    fn take_from(from: &mut WireOptionalUnionSmallArray<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionSmallArray<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireUnionSmallArrayRef<'buf> {
    A(&'buf [::fidl_next::u32_le; 2]),
}

pub enum WireUnionSmallArrayMut<'buf> {
    A(&'buf mut [::fidl_next::u32_le; 2]),
}

impl WireUnionSmallArray<'_> {
    pub fn as_ref(&self) -> WireUnionSmallArrayRef<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSmallArrayRef::A(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireUnionSmallArrayMut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSmallArrayMut::A(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireUnionSmallArray<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    [::fidl_next::u32_le; 2]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [::fidl_next::u32_le; 2]>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSmallArray<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[::fidl_next::u32_le; 2]>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSmallArray<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionSmallArray<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSmallArray<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSmallArray<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSmallArray<'buf>> {
        if self.is_some() {
            Some(WireUnionSmallArray {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSmallArray<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireOptionalUnionSmallArray<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    [::fidl_next::u32_le; 2]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [::fidl_next::u32_le; 2]>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSmallArray<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}
