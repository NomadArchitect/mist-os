// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct Empty {}

impl ::fidl_next::Encodable for Empty {
    type Encoded<'buf> = WireEmpty;
}

impl<___E> ::fidl_next::Encode<___E> for Empty {
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {

            } = slot;
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Empty> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireEmpty>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Empty>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Empty: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireEmpty> for Empty {
    fn take_from(from: &mut WireEmpty) -> Self {
        Self {}
    }
}

/// The wire type corersponding to [`Empty`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmpty {}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmpty
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {

            } = slot;
        }

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendRequest {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolSendRequest {
    type Encoded<'buf> = WireEmptyProtocolSendRequest;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolSendRequest
where
    crate::Empty: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<EmptyProtocolSendRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireEmptyProtocolSendRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<EmptyProtocolSendRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireEmptyProtocolSendRequest> for EmptyProtocolSendRequest {
    fn take_from(from: &mut WireEmptyProtocolSendRequest) -> Self {
        Self { e: ::fidl_next::TakeFrom::take_from(&mut from.e) }
    }
}

/// The wire type corersponding to [`EmptyProtocolSendRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolSendRequest
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolReceiveRequest {
    type Encoded<'buf> = WireEmptyProtocolReceiveRequest;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolReceiveRequest
where
    crate::Empty: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<EmptyProtocolReceiveRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireEmptyProtocolReceiveRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<EmptyProtocolReceiveRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolReceiveRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireEmptyProtocolReceiveRequest> for EmptyProtocolReceiveRequest {
    fn take_from(from: &mut WireEmptyProtocolReceiveRequest) -> Self {
        Self { e: ::fidl_next::TakeFrom::take_from(&mut from.e) }
    }
}

/// The wire type corersponding to [`EmptyProtocolReceiveRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolReceiveRequest
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendAndReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolSendAndReceiveRequest {
    type Encoded<'buf> = WireEmptyProtocolSendAndReceiveRequest;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolSendAndReceiveRequest
where
    crate::Empty: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<EmptyProtocolSendAndReceiveRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireEmptyProtocolSendAndReceiveRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<EmptyProtocolSendAndReceiveRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireEmptyProtocolSendAndReceiveRequest>
    for EmptyProtocolSendAndReceiveRequest
{
    fn take_from(from: &mut WireEmptyProtocolSendAndReceiveRequest) -> Self {
        Self { e: ::fidl_next::TakeFrom::take_from(&mut from.e) }
    }
}

/// The wire type corersponding to [`EmptyProtocolSendAndReceiveRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolSendAndReceiveRequest
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendAndReceiveResponse {
    pub e: crate::Empty,
}

impl ::fidl_next::Encodable for EmptyProtocolSendAndReceiveResponse {
    type Encoded<'buf> = WireEmptyProtocolSendAndReceiveResponse;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyProtocolSendAndReceiveResponse
where
    crate::Empty: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                e,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.e, encoder, e)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<EmptyProtocolSendAndReceiveResponse> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireEmptyProtocolSendAndReceiveResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<EmptyProtocolSendAndReceiveResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyProtocolSendAndReceiveResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireEmptyProtocolSendAndReceiveResponse>
    for EmptyProtocolSendAndReceiveResponse
{
    fn take_from(from: &mut WireEmptyProtocolSendAndReceiveResponse) -> Self {
        Self { e: ::fidl_next::TakeFrom::take_from(&mut from.e) }
    }
}

/// The wire type corersponding to [`EmptyProtocolSendAndReceiveResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveResponse {
    pub e: crate::WireEmpty,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyProtocolSendAndReceiveResponse
where
    ___D: ?Sized,

    crate::WireEmpty: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut e,

            } = slot;
        }

        ::fidl_next::Decode::decode(e.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the EmptyProtocol protocol.
#[derive(Debug)]
pub struct EmptyProtocol;

pub mod empty_protocol {

    pub struct Send;

    impl ::fidl_next::bind::Method for Send {
        const ORDINAL: u64 = 1378773277029173000;

        type Protocol = crate::EmptyProtocol;

        type Request<'buf> = crate::WireEmptyProtocolSendRequest;

        type Response<'buf> = ::fidl_next::bind::Never;
    }

    pub struct Receive;

    impl ::fidl_next::bind::Method for Receive {
        const ORDINAL: u64 = 2301564782476583487;

        type Protocol = crate::EmptyProtocol;

        type Request<'buf> = ::fidl_next::bind::Never;

        type Response<'buf> = crate::WireEmptyProtocolReceiveRequest;
    }

    pub struct SendAndReceive;

    impl ::fidl_next::bind::Method for SendAndReceive {
        const ORDINAL: u64 = 534401212734647530;

        type Protocol = crate::EmptyProtocol;

        type Request<'buf> = crate::WireEmptyProtocolSendAndReceiveRequest;

        type Response<'buf> = crate::WireEmptyProtocolSendAndReceiveResponse;
    }
}

/// A helper trait for the `EmptyProtocol` client protocol.
pub trait EmptyProtocolClient<___T: ::fidl_next::protocol::Transport> {
    fn send<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireEmptyProtocolSendRequest,
        >;

    fn send_and_receive<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, empty_protocol::SendAndReceive>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireEmptyProtocolSendAndReceiveRequest,
        >;
}

impl<___T> EmptyProtocolClient<___T> for ::fidl_next::bind::Client<___T, EmptyProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn send<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireEmptyProtocolSendRequest,
        >,
    {
        self.untyped().send_request(1378773277029173000, request)
    }

    fn send_and_receive<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, empty_protocol::SendAndReceive>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireEmptyProtocolSendAndReceiveRequest,
        >,
    {
        self.untyped()
            .send_transaction(534401212734647530, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
}

/// A client handler for the EmptyProtocol protocol.

pub trait EmptyProtocolClientHandler<___T: ::fidl_next::protocol::Transport> {
    fn receive(
        &mut self,
        message: ::fidl_next::bind::ResponseBuffer<___T, empty_protocol::Receive>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for EmptyProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: EmptyProtocolClientHandler<___T>,

    for<'buf> crate::WireEmptyProtocolReceiveRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireEmptyProtocolSendAndReceiveResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            2301564782476583487 => {
                let buffer = ::fidl_next::bind::ResponseBuffer::from_untyped(buffer);
                handler.receive(buffer);
            }

            ordinal => todo!(),
        }
    }
}

/// A helper trait for the `EmptyProtocol` server protocol.
pub trait EmptyProtocolServer<___T: ::fidl_next::protocol::Transport> {
    fn receive(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>;
}

impl<___T> EmptyProtocolServer<___T> for ::fidl_next::bind::Server<___T, EmptyProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn receive(&self) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError> {
        self.untyped().send_event(2301564782476583487, &mut ())
    }
}

/// A server handler for the EmptyProtocol protocol.

pub trait EmptyProtocolServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn send(&mut self, request: ::fidl_next::bind::RequestBuffer<___T, empty_protocol::Send>);

    fn send_and_receive(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, empty_protocol::SendAndReceive>,
        responder: ::fidl_next::bind::Responder<empty_protocol::SendAndReceive>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for EmptyProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: EmptyProtocolServerHandler<___T>,

    for<'buf> crate::WireEmptyProtocolSendRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireEmptyProtocolSendAndReceiveRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            1378773277029173000 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.send(buffer);
            }

            ordinal => todo!(),
        }
    }

    fn on_transaction(
        handler: &mut ___H,
        ordinal: u64,
        mut buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            534401212734647530 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.send_and_receive(buffer, responder);
            }

            ordinal => todo!(),
        }
    }
}
