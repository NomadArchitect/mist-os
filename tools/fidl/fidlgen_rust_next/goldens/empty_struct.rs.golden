// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct Empty {}

impl ::fidl::Encode for Empty {
    type Encoded<'buf> = WireEmpty;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
            } = slot;
        }

        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Empty> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmpty>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmpty> for Empty {
    fn take_from(from: &mut WireEmpty) -> Self {
        Self {}
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmpty {}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmpty {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
            } = slot;
        }

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendRequest {
    pub e: crate::Empty,
}

impl ::fidl::Encode for EmptyProtocolSendRequest {
    type Encoded<'buf> = WireEmptyProtocolSendRequest;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<EmptyProtocolSendRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolSendRequest>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolSendRequest> for EmptyProtocolSendRequest {
    fn take_from(from: &mut WireEmptyProtocolSendRequest) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmptyProtocolSendRequest {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl::Encode for EmptyProtocolReceiveRequest {
    type Encoded<'buf> = WireEmptyProtocolReceiveRequest;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<EmptyProtocolReceiveRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolReceiveRequest>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolReceiveRequest> for EmptyProtocolReceiveRequest {
    fn take_from(from: &mut WireEmptyProtocolReceiveRequest) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmptyProtocolReceiveRequest {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendAndReceiveRequest {
    pub e: crate::Empty,
}

impl ::fidl::Encode for EmptyProtocolSendAndReceiveRequest {
    type Encoded<'buf> = WireEmptyProtocolSendAndReceiveRequest;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<EmptyProtocolSendAndReceiveRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolSendAndReceiveRequest>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolSendAndReceiveRequest>
    for EmptyProtocolSendAndReceiveRequest
{
    fn take_from(from: &mut WireEmptyProtocolSendAndReceiveRequest) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveRequest {
    pub e: crate::WireEmpty,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmptyProtocolSendAndReceiveRequest {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct EmptyProtocolSendAndReceiveResponse {
    pub e: crate::Empty,
}

impl ::fidl::Encode for EmptyProtocolSendAndReceiveResponse {
    type Encoded<'buf> = WireEmptyProtocolSendAndReceiveResponse;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                e,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.e, encoder, e)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<EmptyProtocolSendAndReceiveResponse> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyProtocolSendAndReceiveResponse>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyProtocolSendAndReceiveResponse>
    for EmptyProtocolSendAndReceiveResponse
{
    fn take_from(from: &mut WireEmptyProtocolSendAndReceiveResponse) -> Self {
        Self { e: ::fidl::TakeFrom::take_from(&mut from.e) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireEmptyProtocolSendAndReceiveResponse {
    pub e: crate::WireEmpty,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmptyProtocolSendAndReceiveResponse {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut e,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(e.as_mut(), decoder)?;
        Ok(())
    }
}
