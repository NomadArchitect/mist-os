// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct Payload {
    pub value: u32,
}

impl ::fidl::Encode for Payload {
    type Encoded<'buf> = WirePayload;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                value,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.value, encoder, value)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Payload> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePayload>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePayload> for Payload {
    fn take_from(from: &mut WirePayload) -> Self {
        Self { value: ::fidl::TakeFrom::take_from(&mut from.value) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePayload {
    pub value: ::fidl::u32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePayload {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut value,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(value.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct OneWaySendRequest {
    pub payload: crate::Payload,
}

impl ::fidl::Encode for OneWaySendRequest {
    type Encoded<'buf> = WireOneWaySendRequest;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                payload,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.payload, encoder, payload)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<OneWaySendRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireOneWaySendRequest>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireOneWaySendRequest> for OneWaySendRequest {
    fn take_from(from: &mut WireOneWaySendRequest) -> Self {
        Self { payload: ::fidl::TakeFrom::take_from(&mut from.payload) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireOneWaySendRequest {
    pub payload: crate::WirePayload,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOneWaySendRequest {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut payload,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(payload.as_mut(), decoder)?;
        Ok(())
    }
}
