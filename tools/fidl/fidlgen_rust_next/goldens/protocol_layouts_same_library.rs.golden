// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct ComposedProtocolOneWayAnonComposedRequest {
    pub a: Option<u16>,
}

impl ComposedProtocolOneWayAnonComposedRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolOneWayAnonComposedRequest {
    type Encoded<'buf> = WireComposedProtocolOneWayAnonComposedRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolOneWayAnonComposedRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOneWayAnonComposedRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocolOneWayAnonComposedRequest<'buf>>
    for ComposedProtocolOneWayAnonComposedRequest
{
    fn take_from(from: &mut WireComposedProtocolOneWayAnonComposedRequest<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireComposedProtocolOneWayAnonComposedRequest<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolOneWayAnonComposedRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireComposedProtocolOneWayAnonComposedRequest<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireComposedProtocolOneWayAnonComposedRequest<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolOneWayAnonComposedRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]

pub enum ComposedProtocolTwoWayAnonComposedRequest {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedRequest {
    type Encoded<'buf> = WireComposedProtocolTwoWayAnonComposedRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedRequest { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocolTwoWayAnonComposedRequest> {
    type EncodedOption<'buf> = WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ComposedProtocolTwoWayAnonComposedRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ComposedProtocolTwoWayAnonComposedRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolTwoWayAnonComposedRequest { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocolTwoWayAnonComposedRequest<'buf>>
    for ComposedProtocolTwoWayAnonComposedRequest
{
    fn take_from(from: &mut WireComposedProtocolTwoWayAnonComposedRequest<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf>>
    for Option<Box<ComposedProtocolTwoWayAnonComposedRequest>>
{
    fn take_from(from: &mut WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireComposedProtocolTwoWayAnonComposedRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireComposedProtocolTwoWayAnonComposedRequestRef<'buf> {
    B(&'buf bool),
}

pub enum WireComposedProtocolTwoWayAnonComposedRequestMut<'buf> {
    B(&'buf mut bool),
}

impl WireComposedProtocolTwoWayAnonComposedRequest<'_> {
    pub fn as_ref(&self) -> WireComposedProtocolTwoWayAnonComposedRequestRef<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocolTwoWayAnonComposedRequestRef::B(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireComposedProtocolTwoWayAnonComposedRequestMut<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocolTwoWayAnonComposedRequestMut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolTwoWayAnonComposedRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireComposedProtocolTwoWayAnonComposedRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireComposedProtocolTwoWayAnonComposedRequest<'buf>> {
        if self.is_some() {
            Some(WireComposedProtocolTwoWayAnonComposedRequest {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalComposedProtocolTwoWayAnonComposedRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct ComposedProtocolTwoWayAnonComposedResponse {
    pub a: Option<u16>,
}

impl ComposedProtocolTwoWayAnonComposedResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedResponse {
    type Encoded<'buf> = WireComposedProtocolTwoWayAnonComposedResponse<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedResponse { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocolTwoWayAnonComposedResponse<'buf>>
    for ComposedProtocolTwoWayAnonComposedResponse
{
    fn take_from(from: &mut WireComposedProtocolTwoWayAnonComposedResponse<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireComposedProtocolTwoWayAnonComposedResponse<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedResponse<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireComposedProtocolTwoWayAnonComposedResponse<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedResponse<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolTwoWayAnonComposedResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub struct ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    pub a: Option<u16>,
}

impl ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ComposedProtocolTwoWayAnonComposedWithErrorRequest {
    type Encoded<'buf> = WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolTwoWayAnonComposedWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolTwoWayAnonComposedWithErrorRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf>>
    for ComposedProtocolTwoWayAnonComposedWithErrorRequest
{
    fn take_from(from: &mut WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireComposedProtocolTwoWayAnonComposedWithErrorRequest<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ComposedProtocolTwoWayAnonComposedWithErrorRequest")
            .field("a", &self.a())
            .finish()
    }
}

#[derive(Clone, Debug)]

pub enum ComposedProtocol_TwoWayAnonComposedWithError_Response {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocol_TwoWayAnonComposedWithError_Response {
    type Encoded<'buf> = WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocol_TwoWayAnonComposedWithError_Response
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocol_TwoWayAnonComposedWithError_Response { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocol_TwoWayAnonComposedWithError_Response> {
    type EncodedOption<'buf> =
        WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E>
    for Box<ComposedProtocol_TwoWayAnonComposedWithError_Response>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ComposedProtocol_TwoWayAnonComposedWithError_Response: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>>
    for ComposedProtocol_TwoWayAnonComposedWithError_Response
{
    fn take_from(
        from: &mut WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>,
    ) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf>
    ::fidl_next::TakeFrom<WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>>
    for Option<Box<ComposedProtocol_TwoWayAnonComposedWithError_Response>>
{
    fn take_from(
        from: &mut WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>,
    ) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireComposedProtocol_TwoWayAnonComposedWithError_ResponseRef<'buf> {
    B(&'buf bool),
}

pub enum WireComposedProtocol_TwoWayAnonComposedWithError_ResponseMut<'buf> {
    B(&'buf mut bool),
}

impl WireComposedProtocol_TwoWayAnonComposedWithError_Response<'_> {
    pub fn as_ref(&self) -> WireComposedProtocol_TwoWayAnonComposedWithError_ResponseRef<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocol_TwoWayAnonComposedWithError_ResponseRef::B(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireComposedProtocol_TwoWayAnonComposedWithError_ResponseMut<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocol_TwoWayAnonComposedWithError_ResponseMut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(
        &self,
    ) -> Option<&WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(
        &mut self,
    ) -> Option<&mut WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(
        &mut self,
    ) -> Option<WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>> {
        if self.is_some() {
            Some(WireComposedProtocol_TwoWayAnonComposedWithError_Response {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug
    for WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>
{
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum ComposedProtocol_TwoWayAnonComposedWithError_Result {
    Response(crate::ComposedProtocol_TwoWayAnonComposedWithError_Response),
    Err(u32),
}

impl ::fidl_next::Encodable for ComposedProtocol_TwoWayAnonComposedWithError_Result {
    type Encoded<'buf> = WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocol_TwoWayAnonComposedWithError_Result
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::ComposedProtocol_TwoWayAnonComposedWithError_Response: ::fidl_next::Encode<___E>,
    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocol_TwoWayAnonComposedWithError_Result { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::ComposedProtocol_TwoWayAnonComposedWithError_Response,
            >(value, 1, encoder, raw)?,
            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocol_TwoWayAnonComposedWithError_Result> {
    type EncodedOption<'buf> =
        WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E>
    for Box<ComposedProtocol_TwoWayAnonComposedWithError_Result>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ComposedProtocol_TwoWayAnonComposedWithError_Result: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>>
    for ComposedProtocol_TwoWayAnonComposedWithError_Result
{
    fn take_from(from: &mut WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf>
    ::fidl_next::TakeFrom<WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>>
    for Option<Box<ComposedProtocol_TwoWayAnonComposedWithError_Result>>
{
    fn take_from(
        from: &mut WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>,
    ) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireComposedProtocol_TwoWayAnonComposedWithError_ResultRef<'buf> {
    Response(&'buf crate::WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>),
    Err(&'buf ::fidl_next::u32_le),
}

pub enum WireComposedProtocol_TwoWayAnonComposedWithError_ResultMut<'buf> {
    Response(&'buf mut crate::WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>),
    Err(&'buf mut ::fidl_next::u32_le),
}

impl WireComposedProtocol_TwoWayAnonComposedWithError_Result<'_> {
    pub fn as_ref(&self) -> WireComposedProtocol_TwoWayAnonComposedWithError_ResultRef<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocol_TwoWayAnonComposedWithError_ResultRef::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => WireComposedProtocol_TwoWayAnonComposedWithError_ResultRef::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireComposedProtocol_TwoWayAnonComposedWithError_ResultMut<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocol_TwoWayAnonComposedWithError_ResultMut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => WireComposedProtocol_TwoWayAnonComposedWithError_ResultMut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>:
        ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>,
            >(raw, decoder)?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<
crate::WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(
        &mut self,
    ) -> Option<&mut WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(
        &mut self,
    ) -> Option<WireComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>> {
        if self.is_some() {
            Some(WireComposedProtocol_TwoWayAnonComposedWithError_Result {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>:
        ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireComposedProtocol_TwoWayAnonComposedWithError_Response<'buf>,
            >(raw, decoder)?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug
    for WireOptionalComposedProtocol_TwoWayAnonComposedWithError_Result<'buf>
{
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum ComposedProtocolOnAnonComposedRequest {
    B(bool),
}

impl ::fidl_next::Encodable for ComposedProtocolOnAnonComposedRequest {
    type Encoded<'buf> = WireComposedProtocolOnAnonComposedRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocolOnAnonComposedRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocolOnAnonComposedRequest { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocolOnAnonComposedRequest> {
    type EncodedOption<'buf> = WireOptionalComposedProtocolOnAnonComposedRequest<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ComposedProtocolOnAnonComposedRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ComposedProtocolOnAnonComposedRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocolOnAnonComposedRequest { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocolOnAnonComposedRequest<'buf>>
    for ComposedProtocolOnAnonComposedRequest
{
    fn take_from(from: &mut WireComposedProtocolOnAnonComposedRequest<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalComposedProtocolOnAnonComposedRequest<'buf>>
    for Option<Box<ComposedProtocolOnAnonComposedRequest>>
{
    fn take_from(from: &mut WireOptionalComposedProtocolOnAnonComposedRequest<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireComposedProtocolOnAnonComposedRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireComposedProtocolOnAnonComposedRequestRef<'buf> {
    B(&'buf bool),
}

pub enum WireComposedProtocolOnAnonComposedRequestMut<'buf> {
    B(&'buf mut bool),
}

impl WireComposedProtocolOnAnonComposedRequest<'_> {
    pub fn as_ref(&self) -> WireComposedProtocolOnAnonComposedRequestRef<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocolOnAnonComposedRequestRef::B(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireComposedProtocolOnAnonComposedRequestMut<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocolOnAnonComposedRequestMut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocolOnAnonComposedRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireComposedProtocolOnAnonComposedRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocolOnAnonComposedRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalComposedProtocolOnAnonComposedRequest<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireComposedProtocolOnAnonComposedRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireComposedProtocolOnAnonComposedRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireComposedProtocolOnAnonComposedRequest<'buf>> {
        if self.is_some() {
            Some(WireComposedProtocolOnAnonComposedRequest {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalComposedProtocolOnAnonComposedRequest<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocolOnAnonComposedRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalComposedProtocolOnAnonComposedRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct TablePayload {
    pub a: Option<u16>,
}

impl TablePayload {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for TablePayload {
    type Encoded<'buf> = WireTablePayload<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for TablePayload
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTablePayload { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireTablePayload<'buf>> for TablePayload {
    fn take_from(from: &mut WireTablePayload<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireTablePayload<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireTablePayload<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireTablePayload<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTablePayload<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("TablePayload").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]

pub enum UnionPayload {
    B(bool),
}

impl ::fidl_next::Encodable for UnionPayload {
    type Encoded<'buf> = WireUnionPayload<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for UnionPayload
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionPayload { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionPayload> {
    type EncodedOption<'buf> = WireOptionalUnionPayload<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionPayload>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionPayload: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionPayload { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireUnionPayload<'buf>> for UnionPayload {
    fn take_from(from: &mut WireUnionPayload<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalUnionPayload<'buf>> for Option<Box<UnionPayload>> {
    fn take_from(from: &mut WireOptionalUnionPayload<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionPayload<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireUnionPayloadRef<'buf> {
    B(&'buf bool),
}

pub enum WireUnionPayloadMut<'buf> {
    B(&'buf mut bool),
}

impl WireUnionPayload<'_> {
    pub fn as_ref(&self) -> WireUnionPayloadRef<'_> {
        match self.raw.ordinal() {
            1 => WireUnionPayloadRef::B(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireUnionPayloadMut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionPayloadMut::B(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireUnionPayload<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionPayload<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionPayload<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionPayload<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionPayload<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionPayload<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionPayload<'buf>> {
        if self.is_some() {
            Some(WireUnionPayload {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionPayload<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireOptionalUnionPayload<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionPayload<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum ComposedProtocol_TwoWayNamedComposedWithError_Result {
    Response(crate::UnionPayload),
    Err(u32),
}

impl ::fidl_next::Encodable for ComposedProtocol_TwoWayNamedComposedWithError_Result {
    type Encoded<'buf> = WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ComposedProtocol_TwoWayNamedComposedWithError_Result
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::UnionPayload: ::fidl_next::Encode<___E>,
    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireComposedProtocol_TwoWayNamedComposedWithError_Result { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::UnionPayload,
            >(value, 1, encoder, raw)?,
            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ComposedProtocol_TwoWayNamedComposedWithError_Result> {
    type EncodedOption<'buf> =
        WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E>
    for Box<ComposedProtocol_TwoWayNamedComposedWithError_Result>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ComposedProtocol_TwoWayNamedComposedWithError_Result: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>>
    for ComposedProtocol_TwoWayNamedComposedWithError_Result
{
    fn take_from(
        from: &mut WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>,
    ) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf>
    ::fidl_next::TakeFrom<WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>>
    for Option<Box<ComposedProtocol_TwoWayNamedComposedWithError_Result>>
{
    fn take_from(
        from: &mut WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>,
    ) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireComposedProtocol_TwoWayNamedComposedWithError_ResultRef<'buf> {
    Response(&'buf crate::WireUnionPayload<'buf>),
    Err(&'buf ::fidl_next::u32_le),
}

pub enum WireComposedProtocol_TwoWayNamedComposedWithError_ResultMut<'buf> {
    Response(&'buf mut crate::WireUnionPayload<'buf>),
    Err(&'buf mut ::fidl_next::u32_le),
}

impl WireComposedProtocol_TwoWayNamedComposedWithError_Result<'_> {
    pub fn as_ref(&self) -> WireComposedProtocol_TwoWayNamedComposedWithError_ResultRef<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocol_TwoWayNamedComposedWithError_ResultRef::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => WireComposedProtocol_TwoWayNamedComposedWithError_ResultRef::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireComposedProtocol_TwoWayNamedComposedWithError_ResultMut<'_> {
        match self.raw.ordinal() {
            1 => WireComposedProtocol_TwoWayNamedComposedWithError_ResultMut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => WireComposedProtocol_TwoWayNamedComposedWithError_ResultMut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireUnionPayload<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireUnionPayload<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireUnionPayload<'buf>>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(
        &self,
    ) -> Option<&WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(
        &mut self,
    ) -> Option<&mut WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(
        &mut self,
    ) -> Option<WireComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>> {
        if self.is_some() {
            Some(WireComposedProtocol_TwoWayNamedComposedWithError_Result {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireUnionPayload<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireUnionPayload<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug
    for WireOptionalComposedProtocol_TwoWayNamedComposedWithError_Result<'buf>
{
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum MainProtocol_TwoWayLocalWithError_Result {
    Response(crate::UnionPayload),
    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocol_TwoWayLocalWithError_Result {
    type Encoded<'buf> = WireMainProtocol_TwoWayLocalWithError_Result<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocol_TwoWayLocalWithError_Result
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::UnionPayload: ::fidl_next::Encode<___E>,
    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocol_TwoWayLocalWithError_Result { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::UnionPayload,
            >(value, 1, encoder, raw)?,
            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocol_TwoWayLocalWithError_Result> {
    type EncodedOption<'buf> = WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocol_TwoWayLocalWithError_Result>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocol_TwoWayLocalWithError_Result: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocol_TwoWayLocalWithError_Result { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocol_TwoWayLocalWithError_Result<'buf>>
    for MainProtocol_TwoWayLocalWithError_Result
{
    fn take_from(from: &mut WireMainProtocol_TwoWayLocalWithError_Result<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf>>
    for Option<Box<MainProtocol_TwoWayLocalWithError_Result>>
{
    fn take_from(from: &mut WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireMainProtocol_TwoWayLocalWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireMainProtocol_TwoWayLocalWithError_ResultRef<'buf> {
    Response(&'buf crate::WireUnionPayload<'buf>),
    Err(&'buf ::fidl_next::u32_le),
}

pub enum WireMainProtocol_TwoWayLocalWithError_ResultMut<'buf> {
    Response(&'buf mut crate::WireUnionPayload<'buf>),
    Err(&'buf mut ::fidl_next::u32_le),
}

impl WireMainProtocol_TwoWayLocalWithError_Result<'_> {
    pub fn as_ref(&self) -> WireMainProtocol_TwoWayLocalWithError_ResultRef<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocol_TwoWayLocalWithError_ResultRef::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => WireMainProtocol_TwoWayLocalWithError_ResultRef::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireMainProtocol_TwoWayLocalWithError_ResultMut<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocol_TwoWayLocalWithError_ResultMut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => WireMainProtocol_TwoWayLocalWithError_ResultMut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireMainProtocol_TwoWayLocalWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireUnionPayload<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireUnionPayload<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocol_TwoWayLocalWithError_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireUnionPayload<'buf>>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocol_TwoWayLocalWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocol_TwoWayLocalWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocol_TwoWayLocalWithError_Result<'buf>> {
        if self.is_some() {
            Some(WireMainProtocol_TwoWayLocalWithError_Result {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireUnionPayload<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireUnionPayload<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocol_TwoWayLocalWithError_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolOneWayAnonRequest {
    pub a: Option<u16>,
}

impl MainProtocolOneWayAnonRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolOneWayAnonRequest {
    type Encoded<'buf> = WireMainProtocolOneWayAnonRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolOneWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOneWayAnonRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolOneWayAnonRequest<'buf>>
    for MainProtocolOneWayAnonRequest
{
    fn take_from(from: &mut WireMainProtocolOneWayAnonRequest<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireMainProtocolOneWayAnonRequest<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireMainProtocolOneWayAnonRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireMainProtocolOneWayAnonRequest<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolOneWayAnonRequest<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolOneWayAnonRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]

pub enum MainProtocolTwoWayAnonRequest {
    B(bool),
    Unknown(u64),
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonRequest {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonRequest { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::Unknown(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolTwoWayAnonRequest> {
    type EncodedOption<'buf> = WireOptionalMainProtocolTwoWayAnonRequest<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolTwoWayAnonRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolTwoWayAnonRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolTwoWayAnonRequest { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonRequest<'buf>>
    for MainProtocolTwoWayAnonRequest
{
    fn take_from(from: &mut WireMainProtocolTwoWayAnonRequest<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocolTwoWayAnonRequest<'buf>>
    for Option<Box<MainProtocolTwoWayAnonRequest>>
{
    fn take_from(from: &mut WireOptionalMainProtocolTwoWayAnonRequest<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireMainProtocolTwoWayAnonRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireMainProtocolTwoWayAnonRequestRef<'buf> {
    B(&'buf bool),
    Unknown(u64),
}

pub enum WireMainProtocolTwoWayAnonRequestMut<'buf> {
    B(&'buf mut bool),
    Unknown(u64),
}

impl WireMainProtocolTwoWayAnonRequest<'_> {
    pub fn as_ref(&self) -> WireMainProtocolTwoWayAnonRequestRef<'_> {
        match self.raw.ordinal() {
            1 => {
                WireMainProtocolTwoWayAnonRequestRef::B(unsafe { self.raw.get().deref_unchecked() })
            }
            unknown => WireMainProtocolTwoWayAnonRequestRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireMainProtocolTwoWayAnonRequestMut<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocolTwoWayAnonRequestMut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            unknown => WireMainProtocolTwoWayAnonRequestMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocolTwoWayAnonRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolTwoWayAnonRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalMainProtocolTwoWayAnonRequest<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolTwoWayAnonRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolTwoWayAnonRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolTwoWayAnonRequest<'buf>> {
        if self.is_some() {
            Some(WireMainProtocolTwoWayAnonRequest {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocolTwoWayAnonRequest<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocolTwoWayAnonRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocolTwoWayAnonRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonResponse {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonResponse {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonResponse {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonResponse<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonResponse
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonResponse { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonResponse<'buf>>
    for MainProtocolTwoWayAnonResponse
{
    fn take_from(from: &mut WireMainProtocolTwoWayAnonResponse<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireMainProtocolTwoWayAnonResponse<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireMainProtocolTwoWayAnonResponse<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireMainProtocolTwoWayAnonResponse<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonResponse<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonResponse").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]
pub struct MainProtocolTwoWayAnonWithErrorRequest {
    pub a: Option<u16>,
}

impl MainProtocolTwoWayAnonWithErrorRequest {
    fn __max_ordinal(&self) -> usize {
        if self.a.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for MainProtocolTwoWayAnonWithErrorRequest {
    type Encoded<'buf> = WireMainProtocolTwoWayAnonWithErrorRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolTwoWayAnonWithErrorRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolTwoWayAnonWithErrorRequest { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(a) = &mut self.a {
                        ::fidl_next::WireEnvelope::encode_value(
                            a,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolTwoWayAnonWithErrorRequest<'buf>>
    for MainProtocolTwoWayAnonWithErrorRequest
{
    fn take_from(from: &mut WireMainProtocolTwoWayAnonWithErrorRequest<'buf>) -> Self {
        Self { a: from.a_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireMainProtocolTwoWayAnonWithErrorRequest<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireMainProtocolTwoWayAnonWithErrorRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u16_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireMainProtocolTwoWayAnonWithErrorRequest<'buf> {
    pub fn a(&self) -> Option<&::fidl_next::u16_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn a_mut(&mut self) -> Option<&mut ::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_a(&mut self) -> Option<::fidl_next::u16_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireMainProtocolTwoWayAnonWithErrorRequest<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("MainProtocolTwoWayAnonWithErrorRequest").field("a", &self.a()).finish()
    }
}

#[derive(Clone, Debug)]

pub enum MainProtocol_TwoWayAnonWithError_Response {
    B(bool),
    Unknown(u64),
}

impl ::fidl_next::Encodable for MainProtocol_TwoWayAnonWithError_Response {
    type Encoded<'buf> = WireMainProtocol_TwoWayAnonWithError_Response<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocol_TwoWayAnonWithError_Response
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocol_TwoWayAnonWithError_Response { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::Unknown(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocol_TwoWayAnonWithError_Response> {
    type EncodedOption<'buf> = WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocol_TwoWayAnonWithError_Response>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocol_TwoWayAnonWithError_Response: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocol_TwoWayAnonWithError_Response { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocol_TwoWayAnonWithError_Response<'buf>>
    for MainProtocol_TwoWayAnonWithError_Response
{
    fn take_from(from: &mut WireMainProtocol_TwoWayAnonWithError_Response<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf>>
    for Option<Box<MainProtocol_TwoWayAnonWithError_Response>>
{
    fn take_from(from: &mut WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireMainProtocol_TwoWayAnonWithError_Response<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireMainProtocol_TwoWayAnonWithError_ResponseRef<'buf> {
    B(&'buf bool),
    Unknown(u64),
}

pub enum WireMainProtocol_TwoWayAnonWithError_ResponseMut<'buf> {
    B(&'buf mut bool),
    Unknown(u64),
}

impl WireMainProtocol_TwoWayAnonWithError_Response<'_> {
    pub fn as_ref(&self) -> WireMainProtocol_TwoWayAnonWithError_ResponseRef<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocol_TwoWayAnonWithError_ResponseRef::B(unsafe {
                self.raw.get().deref_unchecked()
            }),
            unknown => WireMainProtocol_TwoWayAnonWithError_ResponseRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireMainProtocol_TwoWayAnonWithError_ResponseMut<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocol_TwoWayAnonWithError_ResponseMut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            unknown => WireMainProtocol_TwoWayAnonWithError_ResponseMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireMainProtocol_TwoWayAnonWithError_Response<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocol_TwoWayAnonWithError_Response<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocol_TwoWayAnonWithError_Response<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocol_TwoWayAnonWithError_Response<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocol_TwoWayAnonWithError_Response<'buf>> {
        if self.is_some() {
            Some(WireMainProtocol_TwoWayAnonWithError_Response {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocol_TwoWayAnonWithError_Response<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum MainProtocol_TwoWayAnonWithError_Result {
    Response(crate::MainProtocol_TwoWayAnonWithError_Response),
    Err(u32),
}

impl ::fidl_next::Encodable for MainProtocol_TwoWayAnonWithError_Result {
    type Encoded<'buf> = WireMainProtocol_TwoWayAnonWithError_Result<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocol_TwoWayAnonWithError_Result
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::MainProtocol_TwoWayAnonWithError_Response: ::fidl_next::Encode<___E>,
    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocol_TwoWayAnonWithError_Result { raw } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::MainProtocol_TwoWayAnonWithError_Response,
            >(value, 1, encoder, raw)?,
            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocol_TwoWayAnonWithError_Result> {
    type EncodedOption<'buf> = WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocol_TwoWayAnonWithError_Result>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocol_TwoWayAnonWithError_Result: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocol_TwoWayAnonWithError_Result { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocol_TwoWayAnonWithError_Result<'buf>>
    for MainProtocol_TwoWayAnonWithError_Result
{
    fn take_from(from: &mut WireMainProtocol_TwoWayAnonWithError_Result<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf>>
    for Option<Box<MainProtocol_TwoWayAnonWithError_Result>>
{
    fn take_from(from: &mut WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireMainProtocol_TwoWayAnonWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireMainProtocol_TwoWayAnonWithError_ResultRef<'buf> {
    Response(&'buf crate::WireMainProtocol_TwoWayAnonWithError_Response<'buf>),
    Err(&'buf ::fidl_next::u32_le),
}

pub enum WireMainProtocol_TwoWayAnonWithError_ResultMut<'buf> {
    Response(&'buf mut crate::WireMainProtocol_TwoWayAnonWithError_Response<'buf>),
    Err(&'buf mut ::fidl_next::u32_le),
}

impl WireMainProtocol_TwoWayAnonWithError_Result<'_> {
    pub fn as_ref(&self) -> WireMainProtocol_TwoWayAnonWithError_ResultRef<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocol_TwoWayAnonWithError_ResultRef::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => WireMainProtocol_TwoWayAnonWithError_ResultRef::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireMainProtocol_TwoWayAnonWithError_ResultMut<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocol_TwoWayAnonWithError_ResultMut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => WireMainProtocol_TwoWayAnonWithError_ResultMut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireMainProtocol_TwoWayAnonWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireMainProtocol_TwoWayAnonWithError_Response<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireMainProtocol_TwoWayAnonWithError_Response<'buf>,
            >(raw, decoder)?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocol_TwoWayAnonWithError_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw
                    .get()
                    .deref_unchecked::<crate::WireMainProtocol_TwoWayAnonWithError_Response<'buf>>()
                    .fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocol_TwoWayAnonWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocol_TwoWayAnonWithError_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocol_TwoWayAnonWithError_Result<'buf>> {
        if self.is_some() {
            Some(WireMainProtocol_TwoWayAnonWithError_Result {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    crate::WireMainProtocol_TwoWayAnonWithError_Response<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireMainProtocol_TwoWayAnonWithError_Response<'buf>,
            >(raw, decoder)?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocol_TwoWayAnonWithError_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum MainProtocolOnAnonRequest {
    B(bool),
    Unknown(u64),
}

impl ::fidl_next::Encodable for MainProtocolOnAnonRequest {
    type Encoded<'buf> = WireMainProtocolOnAnonRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for MainProtocolOnAnonRequest
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMainProtocolOnAnonRequest { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::Unknown(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MainProtocolOnAnonRequest> {
    type EncodedOption<'buf> = WireOptionalMainProtocolOnAnonRequest<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MainProtocolOnAnonRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MainProtocolOnAnonRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalMainProtocolOnAnonRequest { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireMainProtocolOnAnonRequest<'buf>>
    for MainProtocolOnAnonRequest
{
    fn take_from(from: &mut WireMainProtocolOnAnonRequest<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalMainProtocolOnAnonRequest<'buf>>
    for Option<Box<MainProtocolOnAnonRequest>>
{
    fn take_from(from: &mut WireOptionalMainProtocolOnAnonRequest<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireMainProtocolOnAnonRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireMainProtocolOnAnonRequestRef<'buf> {
    B(&'buf bool),
    Unknown(u64),
}

pub enum WireMainProtocolOnAnonRequestMut<'buf> {
    B(&'buf mut bool),
    Unknown(u64),
}

impl WireMainProtocolOnAnonRequest<'_> {
    pub fn as_ref(&self) -> WireMainProtocolOnAnonRequestRef<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocolOnAnonRequestRef::B(unsafe { self.raw.get().deref_unchecked() }),
            unknown => WireMainProtocolOnAnonRequestRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireMainProtocolOnAnonRequestMut<'_> {
        match self.raw.ordinal() {
            1 => WireMainProtocolOnAnonRequestMut::B(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            unknown => WireMainProtocolOnAnonRequestMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireMainProtocolOnAnonRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireMainProtocolOnAnonRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalMainProtocolOnAnonRequest<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalMainProtocolOnAnonRequest<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireMainProtocolOnAnonRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireMainProtocolOnAnonRequest<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireMainProtocolOnAnonRequest<'buf>> {
        if self.is_some() {
            Some(WireMainProtocolOnAnonRequest {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalMainProtocolOnAnonRequest<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireOptionalMainProtocolOnAnonRequest<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalMainProtocolOnAnonRequest<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}
