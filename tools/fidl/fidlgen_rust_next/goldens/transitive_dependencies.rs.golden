// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct Baz {
    pub g: fidl_test_middle::Bar,
}

impl ::fidl_next::Encodable for Baz {
    type Encoded<'buf> = WireBaz;
}

impl<___E> ::fidl_next::Encode<___E> for Baz
where
    fidl_test_middle::Bar: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                g,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.g, encoder, g)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Baz> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireBaz>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Baz>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Baz: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireBaz> for Baz {
    fn take_from(from: &mut WireBaz) -> Self {
        Self { g: ::fidl_next::TakeFrom::take_from(&mut from.g) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireBaz {
    pub g: fidl_test_middle::WireBar,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireBaz
where
    ___D: ?Sized,

    fidl_test_middle::WireBar: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut g,
            } = slot;
        }
        ::fidl_next::Decode::decode(g.as_mut(), decoder)?;
        Ok(())
    }
}
