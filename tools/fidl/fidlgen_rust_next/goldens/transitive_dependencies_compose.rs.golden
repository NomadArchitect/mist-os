// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

/// The type corresponding to the Top protocol.
#[derive(Debug)]
pub struct Top;

pub mod top {

    pub struct GetFoo;

    impl ::fidl_next::bind::Method for GetFoo {
        const ORDINAL: u64 = 2618685789258237543;

        type Protocol = crate::Top;

        type Request<'buf> = ();

        type Response<'buf> = fidl_next_test_bottom::WireBottomGetFooResponse;
    }
}

/// A helper trait for the `Top` client sender.
pub trait TopClientSender<___T: ::fidl_next::protocol::Transport> {
    fn get_foo(
        &self,
    ) -> Result<::fidl_next::bind::ResponseFuture<'_, ___T, top::GetFoo>, ::fidl_next::EncodeError>;
}

impl<___T> TopClientSender<___T> for ::fidl_next::bind::ClientSender<___T, Top>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn get_foo(
        &self,
    ) -> Result<::fidl_next::bind::ResponseFuture<'_, ___T, top::GetFoo>, ::fidl_next::EncodeError>
    {
        self.as_untyped()
            .send_two_way(2618685789258237543, &mut ())
            .map(::fidl_next::bind::ResponseFuture::from_untyped)
    }
}

/// A client handler for the Top protocol.
///
/// See [`Top`] for more details.
pub trait TopClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for Top
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: TopClientHandler<___T>,

    for<'buf> fidl_next_test_bottom::WireBottomGetFooResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `Top` server sender.
pub trait TopServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> TopServerSender<___T> for ::fidl_next::bind::ServerSender<___T, Top> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the Top protocol.
///
/// See [`Top`] for more details.
pub trait TopServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn get_foo(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, Top>,

        responder: ::fidl_next::bind::Responder<top::GetFoo>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for Top
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: TopServerHandler<___T>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            2618685789258237543 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                handler.get_foo(sender, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}
