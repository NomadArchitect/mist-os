// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct SuperFooRequest {
    pub s: String,
}

impl ::fidl::Encode for SuperFooRequest {
    type Encoded<'buf> = WireSuperFooRequest<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                s,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.s, encoder, s)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<SuperFooRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireSuperFooRequest<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireSuperFooRequest<'buf>> for SuperFooRequest {
    fn take_from(from: &mut WireSuperFooRequest<'buf>) -> Self {
        Self { s: ::fidl::TakeFrom::take_from(&mut from.s) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireSuperFooRequest<'buf> {
    pub s: ::fidl::WireString<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireSuperFooRequest<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut s,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(s.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct SuperFooResponse {
    pub y: i64,
}

impl ::fidl::Encode for SuperFooResponse {
    type Encoded<'buf> = WireSuperFooResponse;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                y,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.y, encoder, y)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<SuperFooResponse> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireSuperFooResponse>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireSuperFooResponse> for SuperFooResponse {
    fn take_from(from: &mut WireSuperFooResponse) -> Self {
        Self { y: ::fidl::TakeFrom::take_from(&mut from.y) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSuperFooResponse {
    pub y: ::fidl::i64_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireSuperFooResponse {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut y,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(y.as_mut(), decoder)?;
        Ok(())
    }
}
