// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct SuperFooRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for SuperFooRequest {
    type Encoded<'buf> = WireSuperFooRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for SuperFooRequest
where
    String: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SuperFooRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSuperFooRequest<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SuperFooRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SuperFooRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireSuperFooRequest<'buf>> for SuperFooRequest {
    fn take_from(from: &mut WireSuperFooRequest<'buf>) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&mut from.s) }
    }
}

/// The wire type corersponding to [`SuperFooRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSuperFooRequest<'buf> {
    pub s: ::fidl_next::WireString<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireSuperFooRequest<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct SuperFooResponse {
    pub y: i64,
}

impl ::fidl_next::Encodable for SuperFooResponse {
    type Encoded<'buf> = WireSuperFooResponse;
}

impl<___E> ::fidl_next::Encode<___E> for SuperFooResponse
where
    i64: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                y,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.y, encoder, y)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SuperFooResponse> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSuperFooResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SuperFooResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SuperFooResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSuperFooResponse> for SuperFooResponse {
    fn take_from(from: &mut WireSuperFooResponse) -> Self {
        Self { y: ::fidl_next::TakeFrom::take_from(&mut from.y) }
    }
}

/// The wire type corersponding to [`SuperFooResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSuperFooResponse {
    pub y: ::fidl_next::i64_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSuperFooResponse
where
    ___D: ?Sized,

    ::fidl_next::i64_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut y,

            } = slot;
        }

        ::fidl_next::Decode::decode(y.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the super protocol.
#[derive(Debug)]
pub struct Super;

pub mod super_ {

    pub struct Foo;

    impl ::fidl_next::bind::Method for Foo {
        const ORDINAL: u64 = 7540745593380780216;

        type Protocol = crate::Super;

        type Request<'buf> = crate::WireSuperFooRequest<'buf>;

        type Response<'buf> = crate::WireSuperFooResponse;
    }
}

/// A helper trait for the `super` client sender.
pub trait SuperClientSender<___T: ::fidl_next::protocol::Transport> {
    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::bind::ResponseFuture<'_, ___T, super_::Foo>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireSuperFooRequest<'buf>,
        >;
}

impl<___T> SuperClientSender<___T> for ::fidl_next::bind::ClientSender<___T, Super>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::bind::ResponseFuture<'_, ___T, super_::Foo>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireSuperFooRequest<'buf>,
        >,
    {
        self.as_untyped()
            .send_two_way(7540745593380780216, request)
            .map(::fidl_next::bind::ResponseFuture::from_untyped)
    }
}

/// A client handler for the super protocol.

pub trait SuperClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for Super
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: SuperClientHandler<___T>,

    for<'buf> crate::WireSuperFooResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `super` server sender.
pub trait SuperServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> SuperServerSender<___T> for ::fidl_next::bind::ServerSender<___T, Super> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the super protocol.

pub trait SuperServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn foo(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, Super>,

        request: ::fidl_next::bind::RequestBuffer<___T, super_::Foo>,

        responder: ::fidl_next::bind::Responder<super_::Foo>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for Super
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: SuperServerHandler<___T>,

    for<'buf> crate::WireSuperFooRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            7540745593380780216 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.foo(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

/// The type corresponding to the sub protocol.
#[derive(Debug)]
pub struct Sub;

pub mod sub {

    pub struct Foo;

    impl ::fidl_next::bind::Method for Foo {
        const ORDINAL: u64 = 7540745593380780216;

        type Protocol = crate::Sub;

        type Request<'buf> = crate::WireSuperFooRequest<'buf>;

        type Response<'buf> = crate::WireSuperFooResponse;
    }
}

/// A helper trait for the `sub` client sender.
pub trait SubClientSender<___T: ::fidl_next::protocol::Transport> {
    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::bind::ResponseFuture<'_, ___T, sub::Foo>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireSuperFooRequest<'buf>,
        >;
}

impl<___T> SubClientSender<___T> for ::fidl_next::bind::ClientSender<___T, Sub>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<::fidl_next::bind::ResponseFuture<'_, ___T, sub::Foo>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireSuperFooRequest<'buf>,
        >,
    {
        self.as_untyped()
            .send_two_way(7540745593380780216, request)
            .map(::fidl_next::bind::ResponseFuture::from_untyped)
    }
}

/// A client handler for the sub protocol.

pub trait SubClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for Sub
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: SubClientHandler<___T>,

    for<'buf> crate::WireSuperFooResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `sub` server sender.
pub trait SubServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> SubServerSender<___T> for ::fidl_next::bind::ServerSender<___T, Sub> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the sub protocol.

pub trait SubServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn foo(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, Sub>,

        request: ::fidl_next::bind::RequestBuffer<___T, sub::Foo>,

        responder: ::fidl_next::bind::Responder<sub::Foo>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for Sub
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: SubServerHandler<___T>,

    for<'buf> crate::WireSuperFooRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            7540745593380780216 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.foo(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}
