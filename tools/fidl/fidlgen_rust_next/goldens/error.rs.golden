// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct ExampleFooRequest {
    pub s: String,
}

impl ::fidl::Encode for ExampleFooRequest {
    type Encoded<'buf> = WireExampleFooRequest<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                s,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.s, encoder, s)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<ExampleFooRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireExampleFooRequest<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireExampleFooRequest<'buf>> for ExampleFooRequest {
    fn take_from(from: &mut WireExampleFooRequest<'buf>) -> Self {
        Self { s: ::fidl::TakeFrom::take_from(&mut from.s) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireExampleFooRequest<'buf> {
    pub s: ::fidl::WireString<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireExampleFooRequest<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut s,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(s.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Example_foo_Response {
    pub y: i64,
}

impl ::fidl::Encode for Example_foo_Response {
    type Encoded<'buf> = WireExample_foo_Response;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                y,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.y, encoder, y)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Example_foo_Response> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireExample_foo_Response>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireExample_foo_Response> for Example_foo_Response {
    fn take_from(from: &mut WireExample_foo_Response) -> Self {
        Self { y: ::fidl::TakeFrom::take_from(&mut from.y) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExample_foo_Response {
    pub y: ::fidl::i64_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireExample_foo_Response {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut y,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(y.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]

pub enum Example_foo_Result {
    Response(crate::Example_foo_Response),
    Err(u32),
}

impl ::fidl::Encode for Example_foo_Result {
    type Encoded<'buf> = WireExample_foo_Result<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireExample_foo_Result { raw } = slot);

        match self {
            Self::Response(value) => {
                ::fidl::RawWireUnion::encode_as::<crate::Example_foo_Response>(
                    value, 1, encoder, raw,
                )?
            }
            Self::Err(value) => ::fidl::RawWireUnion::encode_as::<u32>(value, 2, encoder, raw)?,
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<Example_foo_Result> {
    type EncodedOption<'buf> = WireOptionalExample_foo_Result<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalExample_foo_Result { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireExample_foo_Result<'buf>> for Example_foo_Result {
    fn take_from(from: &mut WireExample_foo_Result<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalExample_foo_Result<'buf>>
    for Option<Box<Example_foo_Result>>
{
    fn take_from(from: &mut WireOptionalExample_foo_Result<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireExample_foo_Result<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireExample_foo_ResultRef<'buf> {
    Response(&'buf crate::WireExample_foo_Response),
    Err(&'buf ::fidl::u32_le),
}

pub enum WireExample_foo_ResultMut<'buf> {
    Response(&'buf mut crate::WireExample_foo_Response),
    Err(&'buf mut ::fidl::u32_le),
}

impl WireExample_foo_Result<'_> {
    pub fn as_ref(&self) -> WireExample_foo_ResultRef<'_> {
        match self.raw.ordinal() {
            1 => WireExample_foo_ResultRef::Response(unsafe { self.raw.get().deref_unchecked() }),

            2 => WireExample_foo_ResultRef::Err(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireExample_foo_ResultMut<'_> {
        match self.raw.ordinal() {
            1 => WireExample_foo_ResultMut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => {
                WireExample_foo_ResultMut::Err(unsafe { self.raw.get_mut().deref_mut_unchecked() })
            }
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireExample_foo_Result<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<crate::WireExample_foo_Response>(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<::fidl::u32_le>(raw, decoder)?,

            ord => return Err(fidl::decode::Error::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireExample_foo_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireExample_foo_Response>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl::u32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalExample_foo_Result<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalExample_foo_Result<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireExample_foo_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireExample_foo_Result<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireExample_foo_Result<'buf>> {
        if self.is_some() {
            Some(WireExample_foo_Result {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalExample_foo_Result<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalExample_foo_Result<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<crate::WireExample_foo_Response>(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<::fidl::u32_le>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalExample_foo_Result<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}
