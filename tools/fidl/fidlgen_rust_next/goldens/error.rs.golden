// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ExampleFooRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for ExampleFooRequest {
    type Encoded<'buf> = WireExampleFooRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleFooRequest
where
    String: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleFooRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireExampleFooRequest<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleFooRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireExampleFooRequest<'buf>> for ExampleFooRequest {
    fn take_from(from: &mut WireExampleFooRequest<'buf>) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&mut from.s) }
    }
}

/// The wire type corersponding to [`ExampleFooRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireExampleFooRequest<'buf> {
    pub s: ::fidl_next::WireString<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireExampleFooRequest<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ExampleFooResponse {
    pub y: i64,
}

impl ::fidl_next::Encodable for ExampleFooResponse {
    type Encoded<'buf> = WireExampleFooResponse;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleFooResponse
where
    i64: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                y,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.y, encoder, y)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleFooResponse> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireExampleFooResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleFooResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleFooResponse> for ExampleFooResponse {
    fn take_from(from: &mut WireExampleFooResponse) -> Self {
        Self { y: ::fidl_next::TakeFrom::take_from(&mut from.y) }
    }
}

/// The wire type corersponding to [`ExampleFooResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleFooResponse {
    pub y: ::fidl_next::i64_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleFooResponse
where
    ___D: ?Sized,

    ::fidl_next::i64_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut y,

            } = slot;
        }

        ::fidl_next::Decode::decode(y.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum ExampleFooResult {
    Response(crate::ExampleFooResponse),

    Err(u32),
}

impl ::fidl_next::Encodable for ExampleFooResult {
    type Encoded<'buf> = WireExampleFooResult<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleFooResult
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::ExampleFooResponse: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireExampleFooResult { raw, _phantom: _ } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::ExampleFooResponse,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleFooResult> {
    type EncodedOption<'buf> = WireOptionalExampleFooResult<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleFooResult>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleFooResult: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalExampleFooResult { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireExampleFooResult<'buf>> for ExampleFooResult {
    fn take_from(from: &mut WireExampleFooResult<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalExampleFooResult<'buf>>
    for Option<Box<ExampleFooResult>>
{
    fn take_from(from: &mut WireOptionalExampleFooResult<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ExampleFooResult`].
#[repr(transparent)]
pub struct WireExampleFooResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod example_foo_result {
    pub enum Ref<'union> {
        Response(&'union crate::WireExampleFooResponse),

        Err(&'union ::fidl_next::u32_le),
    }

    pub enum Mut<'union> {
        Response(&'union mut crate::WireExampleFooResponse),

        Err(&'union mut ::fidl_next::u32_le),
    }
}

impl<'buf> WireExampleFooResult<'buf> {
    pub fn as_ref(&self) -> crate::example_foo_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::example_foo_result::Ref::Response(unsafe {
                self.raw.get().deref_unchecked()
            }),

            2 => crate::example_foo_result::Ref::Err(unsafe { self.raw.get().deref_unchecked() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::example_foo_result::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::example_foo_result::Mut::Response(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            2 => crate::example_foo_result::Mut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireExampleFooResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireExampleFooResponse: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireExampleFooResponse>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireExampleFooResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireExampleFooResponse>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalExampleFooResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalExampleFooResult<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireExampleFooResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireExampleFooResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireExampleFooResult<'buf>> {
        if self.is_some() {
            Some(WireExampleFooResult {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalExampleFooResult<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalExampleFooResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireExampleFooResponse: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireExampleFooResponse>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalExampleFooResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the Example protocol.
#[derive(Debug)]
pub struct Example;

pub mod example {

    pub struct Foo;

    impl ::fidl_next::bind::Method for Foo {
        const ORDINAL: u64 = 1107623248440401476;

        type Protocol = crate::Example;

        type Request<'buf> = crate::WireExampleFooRequest<'buf>;

        type Response<'buf> = crate::WireExampleFooResult<'buf>;
    }
}

/// A helper trait for the `Example` client protocol.
pub trait ExampleClient<___T: ::fidl_next::protocol::Transport> {
    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, example::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireExampleFooRequest<'buf>,
        >;
}

impl<___T> ExampleClient<___T> for ::fidl_next::bind::Client<___T, Example>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn foo<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, example::Foo>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireExampleFooRequest<'buf>,
        >,
    {
        self.untyped()
            .send_transaction(1107623248440401476, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
}

/// A client handler for the Example protocol.

pub trait ExampleClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for Example
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ExampleClientHandler<___T>,

    for<'buf> crate::WireExampleFooResult<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            ordinal => todo!(),
        }
    }
}

/// A helper trait for the `Example` server protocol.
pub trait ExampleServer<___T: ::fidl_next::protocol::Transport> {}

impl<___T> ExampleServer<___T> for ::fidl_next::bind::Server<___T, Example> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the Example protocol.

pub trait ExampleServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn foo(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, example::Foo>,
        responder: ::fidl_next::bind::Responder<example::Foo>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for Example
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ExampleServerHandler<___T>,

    for<'buf> crate::WireExampleFooRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            ordinal => todo!(),
        }
    }

    fn on_transaction(
        handler: &mut ___H,
        ordinal: u64,
        mut buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            1107623248440401476 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.foo(buffer, responder);
            }

            ordinal => todo!(),
        }
    }
}
