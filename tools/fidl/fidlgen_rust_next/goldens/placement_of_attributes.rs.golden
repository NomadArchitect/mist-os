// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

pub type Alias = u32;

/// The wire type corresponding to [`Alias`].
pub type WireAlias = ::fidl_next::u32_le;

pub const EXAMPLE_CONST: u32 = 0;

::fidl_next::bitflags! {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ExampleBits: u32 {
        const MEMBER = 1;

    }
}

impl ::fidl_next::Encodable for ExampleBits {
    type Encoded<'buf> = WireExampleBits;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleBits
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireExampleBits { mut value } = slot);
        *value = ::fidl_next::u32_le::from(self.bits());
        Ok(())
    }
}

impl ::core::convert::From<WireExampleBits> for ExampleBits {
    fn from(wire: WireExampleBits) -> Self {
        Self::from_bits_retain(u32::from(wire.value))
    }
}

impl ::fidl_next::TakeFrom<WireExampleBits> for ExampleBits {
    fn take_from(from: &mut WireExampleBits) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`ExampleBits`].
#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireExampleBits {
    value: ::fidl_next::u32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleBits
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);
        let set = u32::from(*value);
        if set & !ExampleBits::all().bits() != 0 {
            return Err(::fidl_next::DecodeError::InvalidBits {
                expected: ExampleBits::all().bits() as usize,
                actual: set as usize,
            });
        }

        Ok(())
    }
}

impl ::core::convert::From<ExampleBits> for WireExampleBits {
    fn from(natural: ExampleBits) -> Self {
        Self { value: ::fidl_next::u32_le::from(natural.bits()) }
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum ExampleEnum {
    Member = 1,
}

impl ::fidl_next::Encodable for ExampleEnum {
    type Encoded<'buf> = WireExampleEnum;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleEnum
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireExampleEnum { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            Self::Member => 1,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireExampleEnum> for ExampleEnum {
    fn from(wire: WireExampleEnum) -> Self {
        match u32::from(wire.value) {
            1 => Self::Member,

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireExampleEnum> for ExampleEnum {
    fn take_from(from: &mut WireExampleEnum) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`ExampleEnum`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireExampleEnum {
    value: ::fidl_next::u32_le,
}

impl WireExampleEnum {
    pub const MEMBER: WireExampleEnum =
        WireExampleEnum { value: ::fidl_next::u32_le::from_native(1) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);

        match u32::from(*value) {
            1 => (),
            unknown => return Err(::fidl_next::DecodeError::InvalidEnumOrdinal(unknown as i128)),
        }

        Ok(())
    }
}

impl ::core::convert::From<ExampleEnum> for WireExampleEnum {
    fn from(natural: ExampleEnum) -> Self {
        match natural {
            ExampleEnum::Member => WireExampleEnum::MEMBER,
        }
    }
}

#[derive(Clone, Debug)]
pub struct ExampleProtocolMethodRequest {
    pub arg: fidl_next_test_exampleusing::Empty,
}

impl ::fidl_next::Encodable for ExampleProtocolMethodRequest {
    type Encoded<'buf> = WireExampleProtocolMethodRequest;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleProtocolMethodRequest
where
    fidl_next_test_exampleusing::Empty: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                arg,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.arg, encoder, arg)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleProtocolMethodRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireExampleProtocolMethodRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleProtocolMethodRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleProtocolMethodRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleProtocolMethodRequest> for ExampleProtocolMethodRequest {
    fn take_from(from: &mut WireExampleProtocolMethodRequest) -> Self {
        Self { arg: ::fidl_next::TakeFrom::take_from(&mut from.arg) }
    }
}

/// The wire type corersponding to [`ExampleProtocolMethodRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleProtocolMethodRequest {
    pub arg: fidl_next_test_exampleusing::WireEmpty,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleProtocolMethodRequest
where
    ___D: ?Sized,

    fidl_next_test_exampleusing::WireEmpty: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut arg,

            } = slot;
        }

        ::fidl_next::Decode::decode(arg.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the ExampleProtocol protocol.
#[derive(Debug)]
pub struct ExampleProtocol;

pub mod example_protocol {

    pub struct Method;

    impl ::fidl_next::bind::Method for Method {
        const ORDINAL: u64 = 6023439637367187273;

        type Protocol = crate::ExampleProtocol;

        type Request<'buf> = crate::WireExampleProtocolMethodRequest;

        type Response<'buf> = ::fidl_next::bind::Never;
    }
}

/// A helper trait for the `ExampleProtocol` client sender.
pub trait ExampleProtocolClientSender<___T: ::fidl_next::protocol::Transport> {
    fn method<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireExampleProtocolMethodRequest,
        >;
}

impl<___T> ExampleProtocolClientSender<___T>
    for ::fidl_next::bind::ClientSender<___T, ExampleProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn method<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireExampleProtocolMethodRequest,
        >,
    {
        self.as_untyped().send_one_way(6023439637367187273, request)
    }
}

/// A client handler for the ExampleProtocol protocol.
///
/// See [`ExampleProtocol`] for more details.
pub trait ExampleProtocolClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for ExampleProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ExampleProtocolClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `ExampleProtocol` server sender.
pub trait ExampleProtocolServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> ExampleProtocolServerSender<___T>
    for ::fidl_next::bind::ServerSender<___T, ExampleProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
}

/// A server handler for the ExampleProtocol protocol.
///
/// See [`ExampleProtocol`] for more details.
pub trait ExampleProtocolServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn method(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, ExampleProtocol>,

        request: ::fidl_next::bind::RequestBuffer<___T, example_protocol::Method>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for ExampleProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ExampleProtocolServerHandler<___T>,

    for<'buf> crate::WireExampleProtocolMethodRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            6023439637367187273 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.method(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Clone, Debug)]
pub struct ExampleStruct {
    pub member: u32,
}

impl ::fidl_next::Encodable for ExampleStruct {
    type Encoded<'buf> = WireExampleStruct;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleStruct
where
    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                member,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.member, encoder, member)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleStruct> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireExampleStruct>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleStruct: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleStruct> for ExampleStruct {
    fn take_from(from: &mut WireExampleStruct) -> Self {
        Self { member: ::fidl_next::TakeFrom::take_from(&mut from.member) }
    }
}

/// The wire type corersponding to [`ExampleStruct`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleStruct {
    pub member: ::fidl_next::u32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleStruct
where
    ___D: ?Sized,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut member,

            } = slot;
        }

        ::fidl_next::Decode::decode(member.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ExampleTable {
    pub member: Option<u32>,
}

impl ExampleTable {
    fn __max_ordinal(&self) -> usize {
        if self.member.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for ExampleTable {
    type Encoded<'buf> = WireExampleTable<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleTable
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireExampleTable { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(member) = &mut self.member {
                        ::fidl_next::WireEnvelope::encode_value(
                            member,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireExampleTable<'buf>> for ExampleTable {
    fn take_from(from: &mut WireExampleTable<'buf>) -> Self {
        Self { member: from.member_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`ExampleTable`].
#[repr(C)]
pub struct WireExampleTable<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireExampleTable<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::u32_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireExampleTable<'buf> {
    pub fn member(&self) -> Option<&::fidl_next::u32_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn member_mut(&mut self) -> Option<&mut ::fidl_next::u32_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_member(&mut self) -> Option<::fidl_next::u32_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireExampleTable<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("ExampleTable").field("member", &self.member()).finish()
    }
}

#[derive(Clone, Debug)]
pub enum ExampleUnion {
    Variant(u32),
}

impl ::fidl_next::Encodable for ExampleUnion {
    type Encoded<'buf> = WireExampleUnion;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleUnion
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireExampleUnion { raw, _phantom: _ } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleUnion> {
    type EncodedOption<'buf> = WireOptionalExampleUnion;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleUnion>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUnion: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalExampleUnion { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleUnion> for ExampleUnion {
    fn take_from(from: &mut WireExampleUnion) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalExampleUnion> for Option<Box<ExampleUnion>> {
    fn take_from(from: &mut WireOptionalExampleUnion) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ExampleUnion`].
#[repr(transparent)]
pub struct WireExampleUnion {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod example_union {
    pub enum Ref<'union> {
        Variant(&'union ::fidl_next::u32_le),
    }

    pub enum Mut<'union> {
        Variant(&'union mut ::fidl_next::u32_le),
    }
}

impl WireExampleUnion {
    pub fn as_ref(&self) -> crate::example_union::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::example_union::Ref::Variant(unsafe { self.raw.get().deref_unchecked() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::example_union::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::example_union::Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireExampleUnion {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::u32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireExampleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::u32_le>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireExampleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalExampleUnion {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalExampleUnion {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireExampleUnion> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireExampleUnion> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireExampleUnion> {
        if self.is_some() {
            Some(WireExampleUnion {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalExampleUnion {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

impl Clone for WireOptionalExampleUnion {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalExampleUnion {
                raw: ::fidl_next::RawWireUnion::null(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::u32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalExampleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::u32_le>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalExampleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}
