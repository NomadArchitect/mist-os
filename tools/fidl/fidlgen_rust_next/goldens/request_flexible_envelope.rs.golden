// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]

pub enum FlexibleFoo {
    S(String),
    I(i32),
    Unknown(u64),
}

impl ::fidl_next::Encodable for FlexibleFoo {
    type Encoded<'buf> = WireFlexibleFoo<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for FlexibleFoo
where
    ___E: ::fidl_next::Encoder + ?Sized,

    String: ::fidl_next::Encode<___E>,
    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireFlexibleFoo { raw, _phantom: _ } = slot);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, String>(value, 1, encoder, raw)?
            }
            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 2, encoder, raw)?
            }

            Self::Unknown(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<FlexibleFoo> {
    type EncodedOption<'buf> = WireOptionalFlexibleFoo<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<FlexibleFoo>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    FlexibleFoo: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalFlexibleFoo { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireFlexibleFoo<'buf>> for FlexibleFoo {
    fn take_from(from: &mut WireFlexibleFoo<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::S(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::I(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalFlexibleFoo<'buf>> for Option<Box<FlexibleFoo>> {
    fn take_from(from: &mut WireOptionalFlexibleFoo<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireFlexibleFoo<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub enum WireFlexibleFooRef<'union, 'buf> {
    S(&'union ::fidl_next::WireString<'buf>),
    I(&'union ::fidl_next::i32_le),
    Unknown(u64),
}

pub enum WireFlexibleFooMut<'union, 'buf> {
    S(&'union mut ::fidl_next::WireString<'buf>),
    I(&'union mut ::fidl_next::i32_le),
    Unknown(u64),
}

impl<'buf> WireFlexibleFoo<'buf> {
    pub fn as_ref(&self) -> WireFlexibleFooRef<'_, 'buf> {
        match self.raw.ordinal() {
            1 => WireFlexibleFooRef::S(unsafe { self.raw.get().deref_unchecked() }),

            2 => WireFlexibleFooRef::I(unsafe { self.raw.get().deref_unchecked() }),
            unknown => WireFlexibleFooRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireFlexibleFooMut<'_, 'buf> {
        match self.raw.ordinal() {
            1 => WireFlexibleFooMut::S(unsafe { self.raw.get_mut().deref_mut_unchecked() }),

            2 => WireFlexibleFooMut::I(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            unknown => WireFlexibleFooMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireFlexibleFoo<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireFlexibleFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireString<'buf>>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::i32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalFlexibleFoo<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalFlexibleFoo<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireFlexibleFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireFlexibleFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireFlexibleFoo<'buf>> {
        if self.is_some() {
            Some(WireFlexibleFoo {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalFlexibleFoo<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalFlexibleFoo<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalFlexibleFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum StrictFoo {
    S(String),
    I(i32),
}

impl ::fidl_next::Encodable for StrictFoo {
    type Encoded<'buf> = WireStrictFoo<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for StrictFoo
where
    ___E: ::fidl_next::Encoder + ?Sized,

    String: ::fidl_next::Encode<___E>,
    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireStrictFoo { raw, _phantom: _ } = slot);

        match self {
            Self::S(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, String>(value, 1, encoder, raw)?
            }
            Self::I(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StrictFoo> {
    type EncodedOption<'buf> = WireOptionalStrictFoo<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StrictFoo>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StrictFoo: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalStrictFoo { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireStrictFoo<'buf>> for StrictFoo {
    fn take_from(from: &mut WireStrictFoo<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::S(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::I(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalStrictFoo<'buf>> for Option<Box<StrictFoo>> {
    fn take_from(from: &mut WireOptionalStrictFoo<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireStrictFoo<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub enum WireStrictFooRef<'union, 'buf> {
    S(&'union ::fidl_next::WireString<'buf>),
    I(&'union ::fidl_next::i32_le),
}

pub enum WireStrictFooMut<'union, 'buf> {
    S(&'union mut ::fidl_next::WireString<'buf>),
    I(&'union mut ::fidl_next::i32_le),
}

impl<'buf> WireStrictFoo<'buf> {
    pub fn as_ref(&self) -> WireStrictFooRef<'_, 'buf> {
        match self.raw.ordinal() {
            1 => WireStrictFooRef::S(unsafe { self.raw.get().deref_unchecked() }),

            2 => WireStrictFooRef::I(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireStrictFooMut<'_, 'buf> {
        match self.raw.ordinal() {
            1 => WireStrictFooMut::S(unsafe { self.raw.get_mut().deref_mut_unchecked() }),

            2 => WireStrictFooMut::I(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireStrictFoo<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireStrictFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<::fidl_next::WireString<'buf>>().fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::i32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalStrictFoo<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalStrictFoo<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireStrictFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireStrictFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireStrictFoo<'buf>> {
        if self.is_some() {
            Some(WireStrictFoo {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalStrictFoo<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalStrictFoo<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::WireString<'buf>>(
                raw, decoder,
            )?,
            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalStrictFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleRequest {
    pub s: crate::StrictFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestStrictResponseFlexibleRequest {
    type Encoded<'buf> = WireProtocolRequestStrictResponseFlexibleRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestStrictResponseFlexibleRequest
where
    crate::StrictFoo: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestStrictResponseFlexibleRequest> {
    type EncodedOption<'buf> =
        ::fidl_next::WireBox<'buf, WireProtocolRequestStrictResponseFlexibleRequest<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestStrictResponseFlexibleRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireProtocolRequestStrictResponseFlexibleRequest<'buf>>
    for ProtocolRequestStrictResponseFlexibleRequest
{
    fn take_from(from: &mut WireProtocolRequestStrictResponseFlexibleRequest<'buf>) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&mut from.s) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleRequest<'buf> {
    pub s: crate::WireStrictFoo<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestStrictResponseFlexibleRequest<'buf>
where
    ___D: ?Sized,

    crate::WireStrictFoo<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,
            } = slot;
        }
        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleResponse {
    pub f: crate::FlexibleFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestStrictResponseFlexibleResponse {
    type Encoded<'buf> = WireProtocolRequestStrictResponseFlexibleResponse<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestStrictResponseFlexibleResponse
where
    crate::FlexibleFoo: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.f, encoder, f)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestStrictResponseFlexibleResponse> {
    type EncodedOption<'buf> =
        ::fidl_next::WireBox<'buf, WireProtocolRequestStrictResponseFlexibleResponse<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestStrictResponseFlexibleResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestStrictResponseFlexibleResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireProtocolRequestStrictResponseFlexibleResponse<'buf>>
    for ProtocolRequestStrictResponseFlexibleResponse
{
    fn take_from(from: &mut WireProtocolRequestStrictResponseFlexibleResponse<'buf>) -> Self {
        Self { f: ::fidl_next::TakeFrom::take_from(&mut from.f) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleResponse<'buf> {
    pub f: crate::WireFlexibleFoo<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestStrictResponseFlexibleResponse<'buf>
where
    ___D: ?Sized,

    crate::WireFlexibleFoo<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f,
            } = slot;
        }
        ::fidl_next::Decode::decode(f.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictRequest {
    pub s: crate::FlexibleFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestFlexibleResponseStrictRequest {
    type Encoded<'buf> = WireProtocolRequestFlexibleResponseStrictRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestFlexibleResponseStrictRequest
where
    crate::FlexibleFoo: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestFlexibleResponseStrictRequest> {
    type EncodedOption<'buf> =
        ::fidl_next::WireBox<'buf, WireProtocolRequestFlexibleResponseStrictRequest<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestFlexibleResponseStrictRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireProtocolRequestFlexibleResponseStrictRequest<'buf>>
    for ProtocolRequestFlexibleResponseStrictRequest
{
    fn take_from(from: &mut WireProtocolRequestFlexibleResponseStrictRequest<'buf>) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&mut from.s) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictRequest<'buf> {
    pub s: crate::WireFlexibleFoo<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestFlexibleResponseStrictRequest<'buf>
where
    ___D: ?Sized,

    crate::WireFlexibleFoo<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,
            } = slot;
        }
        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictResponse {
    pub f: crate::StrictFoo,
}

impl ::fidl_next::Encodable for ProtocolRequestFlexibleResponseStrictResponse {
    type Encoded<'buf> = WireProtocolRequestFlexibleResponseStrictResponse<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ProtocolRequestFlexibleResponseStrictResponse
where
    crate::StrictFoo: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.f, encoder, f)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ProtocolRequestFlexibleResponseStrictResponse> {
    type EncodedOption<'buf> =
        ::fidl_next::WireBox<'buf, WireProtocolRequestFlexibleResponseStrictResponse<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ProtocolRequestFlexibleResponseStrictResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ProtocolRequestFlexibleResponseStrictResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireProtocolRequestFlexibleResponseStrictResponse<'buf>>
    for ProtocolRequestFlexibleResponseStrictResponse
{
    fn take_from(from: &mut WireProtocolRequestFlexibleResponseStrictResponse<'buf>) -> Self {
        Self { f: ::fidl_next::TakeFrom::take_from(&mut from.f) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictResponse<'buf> {
    pub f: crate::WireStrictFoo<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireProtocolRequestFlexibleResponseStrictResponse<'buf>
where
    ___D: ?Sized,

    crate::WireStrictFoo<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f,
            } = slot;
        }
        ::fidl_next::Decode::decode(f.as_mut(), decoder)?;
        Ok(())
    }
}
