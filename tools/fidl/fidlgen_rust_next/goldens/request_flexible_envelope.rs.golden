// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]

pub enum FlexibleFoo {
    S(String),
    I(i32),
    Unknown(u64),
}

impl ::fidl::Encode for FlexibleFoo {
    type Encoded<'buf> = WireFlexibleFoo<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireFlexibleFoo { raw } = slot);

        match self {
            Self::S(value) => ::fidl::RawWireUnion::encode_as::<String>(value, 1, encoder, raw)?,
            Self::I(value) => ::fidl::RawWireUnion::encode_as::<i32>(value, 2, encoder, raw)?,

            Self::Unknown(ordinal) => {
                return Err(::fidl::encode::Error::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<FlexibleFoo> {
    type EncodedOption<'buf> = WireOptionalFlexibleFoo<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalFlexibleFoo { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireFlexibleFoo<'buf>> for FlexibleFoo {
    fn take_from(from: &mut WireFlexibleFoo<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::S(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::I(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalFlexibleFoo<'buf>> for Option<Box<FlexibleFoo>> {
    fn take_from(from: &mut WireOptionalFlexibleFoo<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireFlexibleFoo<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireFlexibleFooRef<'buf> {
    S(&'buf ::fidl::WireString<'buf>),
    I(&'buf ::fidl::i32_le),
    Unknown(u64),
}

pub enum WireFlexibleFooMut<'buf> {
    S(&'buf mut ::fidl::WireString<'buf>),
    I(&'buf mut ::fidl::i32_le),
    Unknown(u64),
}

impl WireFlexibleFoo<'_> {
    pub fn as_ref(&self) -> WireFlexibleFooRef<'_> {
        match self.raw.ordinal() {
            1 => WireFlexibleFooRef::S(unsafe { self.raw.get().deref_unchecked() }),

            2 => WireFlexibleFooRef::I(unsafe { self.raw.get().deref_unchecked() }),
            unknown => WireFlexibleFooRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireFlexibleFooMut<'_> {
        match self.raw.ordinal() {
            1 => WireFlexibleFooMut::S(unsafe { self.raw.get_mut().deref_mut_unchecked() }),

            2 => WireFlexibleFooMut::I(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            unknown => WireFlexibleFooMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireFlexibleFoo<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::WireString<'buf>>(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<::fidl::i32_le>(raw, decoder)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireFlexibleFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl::WireString<'buf>>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl::i32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalFlexibleFoo<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalFlexibleFoo<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireFlexibleFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireFlexibleFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireFlexibleFoo<'buf>> {
        if self.is_some() {
            Some(WireFlexibleFoo {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalFlexibleFoo<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalFlexibleFoo<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::WireString<'buf>>(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<::fidl::i32_le>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalFlexibleFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]

pub enum StrictFoo {
    S(String),
    I(i32),
}

impl ::fidl::Encode for StrictFoo {
    type Encoded<'buf> = WireStrictFoo<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireStrictFoo { raw } = slot);

        match self {
            Self::S(value) => ::fidl::RawWireUnion::encode_as::<String>(value, 1, encoder, raw)?,
            Self::I(value) => ::fidl::RawWireUnion::encode_as::<i32>(value, 2, encoder, raw)?,
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<StrictFoo> {
    type EncodedOption<'buf> = WireOptionalStrictFoo<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalStrictFoo { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireStrictFoo<'buf>> for StrictFoo {
    fn take_from(from: &mut WireStrictFoo<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::S(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::I(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalStrictFoo<'buf>> for Option<Box<StrictFoo>> {
    fn take_from(from: &mut WireOptionalStrictFoo<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireStrictFoo<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireStrictFooRef<'buf> {
    S(&'buf ::fidl::WireString<'buf>),
    I(&'buf ::fidl::i32_le),
}

pub enum WireStrictFooMut<'buf> {
    S(&'buf mut ::fidl::WireString<'buf>),
    I(&'buf mut ::fidl::i32_le),
}

impl WireStrictFoo<'_> {
    pub fn as_ref(&self) -> WireStrictFooRef<'_> {
        match self.raw.ordinal() {
            1 => WireStrictFooRef::S(unsafe { self.raw.get().deref_unchecked() }),

            2 => WireStrictFooRef::I(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireStrictFooMut<'_> {
        match self.raw.ordinal() {
            1 => WireStrictFooMut::S(unsafe { self.raw.get_mut().deref_mut_unchecked() }),

            2 => WireStrictFooMut::I(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireStrictFoo<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::WireString<'buf>>(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<::fidl::i32_le>(raw, decoder)?,

            ord => return Err(fidl::decode::Error::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireStrictFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl::WireString<'buf>>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl::i32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalStrictFoo<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalStrictFoo<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireStrictFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireStrictFoo<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireStrictFoo<'buf>> {
        if self.is_some() {
            Some(WireStrictFoo {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalStrictFoo<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalStrictFoo<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::WireString<'buf>>(raw, decoder)?,
            2 => ::fidl::RawWireUnion::decode_as::<::fidl::i32_le>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalStrictFoo<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleRequest {
    pub s: crate::StrictFoo,
}

impl ::fidl::Encode for ProtocolRequestStrictResponseFlexibleRequest {
    type Encoded<'buf> = WireProtocolRequestStrictResponseFlexibleRequest<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                s,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.s, encoder, s)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<ProtocolRequestStrictResponseFlexibleRequest> {
    type EncodedOption<'buf> =
        ::fidl::WireBox<'buf, WireProtocolRequestStrictResponseFlexibleRequest<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireProtocolRequestStrictResponseFlexibleRequest<'buf>>
    for ProtocolRequestStrictResponseFlexibleRequest
{
    fn take_from(from: &mut WireProtocolRequestStrictResponseFlexibleRequest<'buf>) -> Self {
        Self { s: ::fidl::TakeFrom::take_from(&mut from.s) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleRequest<'buf> {
    pub s: crate::WireStrictFoo<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireProtocolRequestStrictResponseFlexibleRequest<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut s,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(s.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestStrictResponseFlexibleResponse {
    pub f: crate::FlexibleFoo,
}

impl ::fidl::Encode for ProtocolRequestStrictResponseFlexibleResponse {
    type Encoded<'buf> = WireProtocolRequestStrictResponseFlexibleResponse<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                f,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.f, encoder, f)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<ProtocolRequestStrictResponseFlexibleResponse> {
    type EncodedOption<'buf> =
        ::fidl::WireBox<'buf, WireProtocolRequestStrictResponseFlexibleResponse<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireProtocolRequestStrictResponseFlexibleResponse<'buf>>
    for ProtocolRequestStrictResponseFlexibleResponse
{
    fn take_from(from: &mut WireProtocolRequestStrictResponseFlexibleResponse<'buf>) -> Self {
        Self { f: ::fidl::TakeFrom::take_from(&mut from.f) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestStrictResponseFlexibleResponse<'buf> {
    pub f: crate::WireFlexibleFoo<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireProtocolRequestStrictResponseFlexibleResponse<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut f,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(f.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictRequest {
    pub s: crate::FlexibleFoo,
}

impl ::fidl::Encode for ProtocolRequestFlexibleResponseStrictRequest {
    type Encoded<'buf> = WireProtocolRequestFlexibleResponseStrictRequest<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                s,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.s, encoder, s)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<ProtocolRequestFlexibleResponseStrictRequest> {
    type EncodedOption<'buf> =
        ::fidl::WireBox<'buf, WireProtocolRequestFlexibleResponseStrictRequest<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireProtocolRequestFlexibleResponseStrictRequest<'buf>>
    for ProtocolRequestFlexibleResponseStrictRequest
{
    fn take_from(from: &mut WireProtocolRequestFlexibleResponseStrictRequest<'buf>) -> Self {
        Self { s: ::fidl::TakeFrom::take_from(&mut from.s) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictRequest<'buf> {
    pub s: crate::WireFlexibleFoo<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireProtocolRequestFlexibleResponseStrictRequest<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut s,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(s.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ProtocolRequestFlexibleResponseStrictResponse {
    pub f: crate::StrictFoo,
}

impl ::fidl::Encode for ProtocolRequestFlexibleResponseStrictResponse {
    type Encoded<'buf> = WireProtocolRequestFlexibleResponseStrictResponse<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                f,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.f, encoder, f)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<ProtocolRequestFlexibleResponseStrictResponse> {
    type EncodedOption<'buf> =
        ::fidl::WireBox<'buf, WireProtocolRequestFlexibleResponseStrictResponse<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireProtocolRequestFlexibleResponseStrictResponse<'buf>>
    for ProtocolRequestFlexibleResponseStrictResponse
{
    fn take_from(from: &mut WireProtocolRequestFlexibleResponseStrictResponse<'buf>) -> Self {
        Self { f: ::fidl::TakeFrom::take_from(&mut from.f) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireProtocolRequestFlexibleResponseStrictResponse<'buf> {
    pub f: crate::WireStrictFoo<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireProtocolRequestFlexibleResponseStrictResponse<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut f,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(f.as_mut(), decoder)?;
        Ok(())
    }
}
