// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

pub const BITS_MEMBER: fidl_test_dependent::MyBits = fidl_test_dependent::MyBits::MEMBER;
pub const BITS_MEMBER_PRIMITIVE: u8 = 1;
pub const ENUM_MEMBER: fidl_test_dependent::MyEnum = fidl_test_dependent::MyEnum::Member;
pub const ENUM_MEMBER_PRIMITIVE: u8 = 1;
#[derive(Clone, Debug)]
pub struct MyStruct {}

impl ::fidl_next::Encodable for MyStruct {
    type Encoded<'buf> = WireMyStruct;
}

impl<___E> ::fidl_next::Encode<___E> for MyStruct {
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
            } = slot;
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<MyStruct> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireMyStruct>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<MyStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    MyStruct: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireMyStruct> for MyStruct {
    fn take_from(from: &mut WireMyStruct) -> Self {
        Self {}
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireMyStruct {}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyStruct
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
            } = slot;
        }

        Ok(())
    }
}
