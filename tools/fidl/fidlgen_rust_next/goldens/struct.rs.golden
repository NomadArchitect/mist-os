// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct BasicStruct {
    pub x: u32,
    pub y: String,
}

impl ::fidl_next::Encodable for BasicStruct {
    type Encoded<'buf> = WireBasicStruct<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for BasicStruct
where
    u32: ::fidl_next::Encode<___E>,
    String: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                x,
                y,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.x, encoder, x)?;
        ::fidl_next::Encode::encode(&mut self.y, encoder, y)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<BasicStruct> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireBasicStruct<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<BasicStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    BasicStruct: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireBasicStruct<'buf>> for BasicStruct {
    fn take_from(from: &mut WireBasicStruct<'buf>) -> Self {
        Self {
            x: ::fidl_next::TakeFrom::take_from(&mut from.x),
            y: ::fidl_next::TakeFrom::take_from(&mut from.y),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireBasicStruct<'buf> {
    pub x: ::fidl_next::u32_le,
    pub y: ::fidl_next::WireString<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireBasicStruct<'buf>
where
    ___D: ?Sized,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut x,
                mut y,
            } = slot;
        }
        ::fidl_next::Decode::decode(x.as_mut(), decoder)?;
        ::fidl_next::Decode::decode(y.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Simple {
    pub f1: u8,
    pub f2: bool,
}

impl ::fidl_next::Encodable for Simple {
    type Encoded<'buf> = WireSimple;
}

impl<___E> ::fidl_next::Encode<___E> for Simple
where
    u8: ::fidl_next::Encode<___E>,
    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f1,
                f2,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.f1, encoder, f1)?;
        ::fidl_next::Encode::encode(&mut self.f2, encoder, f2)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Simple> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSimple>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Simple>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Simple: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimple> for Simple {
    fn take_from(from: &mut WireSimple) -> Self {
        Self {
            f1: ::fidl_next::TakeFrom::take_from(&mut from.f1),
            f2: ::fidl_next::TakeFrom::take_from(&mut from.f2),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSimple {
    pub f1: u8,
    pub f2: bool,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSimple
where
    ___D: ?Sized,

    u8: ::fidl_next::Decode<___D>,
    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f1,
                mut f2,
            } = slot;
        }
        ::fidl_next::Decode::decode(f1.as_mut(), decoder)?;
        ::fidl_next::Decode::decode(f2.as_mut(), decoder)?;
        Ok(())
    }
}
