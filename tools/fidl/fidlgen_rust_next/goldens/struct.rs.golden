// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct BasicStruct {
    pub x: u32,
    pub y: String,
}

impl ::fidl::Encode for BasicStruct {
    type Encoded<'buf> = WireBasicStruct<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                x,
                y,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.x, encoder, x)?;
        ::fidl::Encode::encode(&mut self.y, encoder, y)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<BasicStruct> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireBasicStruct<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireBasicStruct<'buf>> for BasicStruct {
    fn take_from(from: &mut WireBasicStruct<'buf>) -> Self {
        Self {
            x: ::fidl::TakeFrom::take_from(&mut from.x),
            y: ::fidl::TakeFrom::take_from(&mut from.y),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireBasicStruct<'buf> {
    pub x: ::fidl::u32_le,
    pub y: ::fidl::WireString<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireBasicStruct<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut x,
                mut y,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(x.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(y.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Simple {
    pub f1: u8,
    pub f2: bool,
}

impl ::fidl::Encode for Simple {
    type Encoded<'buf> = WireSimple;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                f1,
                f2,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.f1, encoder, f1)?;
        ::fidl::Encode::encode(&mut self.f2, encoder, f2)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Simple> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireSimple>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireSimple> for Simple {
    fn take_from(from: &mut WireSimple) -> Self {
        Self {
            f1: ::fidl::TakeFrom::take_from(&mut from.f1),
            f2: ::fidl::TakeFrom::take_from(&mut from.f2),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSimple {
    pub f1: u8,
    pub f2: bool,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireSimple {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut f1,
                mut f2,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(f1.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(f2.as_mut(), decoder)?;
        Ok(())
    }
}
