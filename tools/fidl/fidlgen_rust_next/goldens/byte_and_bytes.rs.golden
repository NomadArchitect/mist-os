// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct ByteAndBytes {
    pub single_byte: u8,
}

impl ::fidl::Encode for ByteAndBytes {
    type Encoded<'buf> = WireByteAndBytes;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                single_byte,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.single_byte, encoder, single_byte)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<ByteAndBytes> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireByteAndBytes>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireByteAndBytes> for ByteAndBytes {
    fn take_from(from: &mut WireByteAndBytes) -> Self {
        Self { single_byte: ::fidl::TakeFrom::take_from(&mut from.single_byte) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireByteAndBytes {
    pub single_byte: u8,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireByteAndBytes {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut single_byte,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(single_byte.as_mut(), decoder)?;
        Ok(())
    }
}
