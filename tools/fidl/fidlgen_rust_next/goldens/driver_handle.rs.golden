// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Debug)]
pub struct ClientEndWrapper {
    pub value: ::fidl_next::bind::ClientEnd<::fidl_next::zx::Handle, crate::DriverProtocol>,
}

impl ::fidl_next::Encodable for ClientEndWrapper {
    type Encoded<'buf> = WireClientEndWrapper;
}

impl<___E> ::fidl_next::Encode<___E> for ClientEndWrapper
where
    ::fidl_next::bind::ClientEnd<::fidl_next::zx::Handle, crate::DriverProtocol>:
        ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ClientEndWrapper> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireClientEndWrapper>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ClientEndWrapper>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ClientEndWrapper: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireClientEndWrapper> for ClientEndWrapper {
    fn take_from(from: &mut WireClientEndWrapper) -> Self {
        Self { value: ::fidl_next::TakeFrom::take_from(&mut from.value) }
    }
}

/// The wire type corersponding to [`ClientEndWrapper`].
#[derive(Debug)]
#[repr(C)]
pub struct WireClientEndWrapper {
    pub value: ::fidl_next::bind::ClientEnd<::fidl_next::WireHandle, crate::DriverProtocol>,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireClientEndWrapper
where
    ___D: ?Sized,

    ::fidl_next::bind::ClientEnd<::fidl_next::WireHandle, crate::DriverProtocol>:
        ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the DriverProtocol protocol.
#[derive(Debug)]
pub struct DriverProtocol;

pub mod driver_protocol {}

/// A helper trait for the `DriverProtocol` client sender.
pub trait DriverProtocolClientSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> DriverProtocolClientSender<___T>
    for ::fidl_next::bind::ClientSender<___T, DriverProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
}

/// A client handler for the DriverProtocol protocol.

pub trait DriverProtocolClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for DriverProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: DriverProtocolClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `DriverProtocol` server sender.
pub trait DriverProtocolServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> DriverProtocolServerSender<___T>
    for ::fidl_next::bind::ServerSender<___T, DriverProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
}

/// A server handler for the DriverProtocol protocol.

pub trait DriverProtocolServerHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for DriverProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: DriverProtocolServerHandler<___T>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
pub struct T {
    pub zircon_handle: Option<::fidl_next::zx::Handle>,

    pub fdf_handle:
        Option<::fidl_next::bind::ClientEnd<::fidl_next::zx::Handle, crate::DriverProtocol>>,
}

impl T {
    fn __max_ordinal(&self) -> usize {
        if self.zircon_handle.is_some() {
            return 1;
        }

        if self.fdf_handle.is_some() {
            return 2;
        }

        0
    }
}

impl ::fidl_next::Encodable for T {
    type Encoded<'buf> = WireT<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for T
where
    ___E: ::fidl_next::Encoder + ?Sized,

    ::fidl_next::zx::Handle: ::fidl_next::Encode<___E>,

    ::fidl_next::bind::ClientEnd<::fidl_next::zx::Handle, crate::DriverProtocol>:
        ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireT { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                2 => {
                    if let Some(fdf_handle) = &mut self.fdf_handle {
                        ::fidl_next::WireEnvelope::encode_value(
                            fdf_handle,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                1 => {
                    if let Some(zircon_handle) = &mut self.zircon_handle {
                        ::fidl_next::WireEnvelope::encode_value(
                            zircon_handle,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireT<'buf>> for T {
    fn take_from(from: &mut WireT<'buf>) -> Self {
        Self {
            zircon_handle: from.zircon_handle_mut().map(::fidl_next::TakeFrom::take_from),

            fdf_handle: from.fdf_handle_mut().map(::fidl_next::TakeFrom::take_from),
        }
    }
}

/// The wire type corresponding to [`T`].
#[repr(C)]
pub struct WireT<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireT<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::WireHandle: ::fidl_next::Decode<___D>,

    ::fidl_next::bind::ClientEnd<::fidl_next::WireHandle, crate::DriverProtocol>:
        ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireHandle>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                2 => {
                    ::fidl_next::WireEnvelope::decode_as::<
                        ___D,
                        ::fidl_next::bind::ClientEnd<
                            ::fidl_next::WireHandle,
                            crate::DriverProtocol,
                        >,
                    >(slot.as_mut(), decoder)?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireT<'buf> {
    pub fn zircon_handle(&self) -> Option<&::fidl_next::WireHandle> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn zircon_handle_mut(&mut self) -> Option<&mut ::fidl_next::WireHandle> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_zircon_handle(&mut self) -> Option<::fidl_next::WireHandle> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }

    pub fn fdf_handle(
        &self,
    ) -> Option<&::fidl_next::bind::ClientEnd<::fidl_next::WireHandle, crate::DriverProtocol>> {
        unsafe { Some(self.table.get(2)?.deref_unchecked()) }
    }

    pub fn fdf_handle_mut(
        &mut self,
    ) -> Option<&mut ::fidl_next::bind::ClientEnd<::fidl_next::WireHandle, crate::DriverProtocol>>
    {
        unsafe { Some(self.table.get_mut(2)?.deref_mut_unchecked()) }
    }

    pub fn take_fdf_handle(
        &mut self,
    ) -> Option<::fidl_next::bind::ClientEnd<::fidl_next::WireHandle, crate::DriverProtocol>> {
        unsafe { Some(self.table.get_mut(2)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireT<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("T")
            .field("zircon_handle", &self.zircon_handle())
            .field("fdf_handle", &self.fdf_handle())
            .finish()
    }
}

#[derive(Debug)]
pub struct HandlesInProtocolSendHandlesRequest {
    pub t: crate::T,
}

impl ::fidl_next::Encodable for HandlesInProtocolSendHandlesRequest {
    type Encoded<'buf> = WireHandlesInProtocolSendHandlesRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for HandlesInProtocolSendHandlesRequest
where
    crate::T: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                t,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.t, encoder, t)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<HandlesInProtocolSendHandlesRequest> {
    type EncodedOption<'buf> =
        ::fidl_next::WireBox<'buf, WireHandlesInProtocolSendHandlesRequest<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<HandlesInProtocolSendHandlesRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    HandlesInProtocolSendHandlesRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireHandlesInProtocolSendHandlesRequest<'buf>>
    for HandlesInProtocolSendHandlesRequest
{
    fn take_from(from: &mut WireHandlesInProtocolSendHandlesRequest<'buf>) -> Self {
        Self { t: ::fidl_next::TakeFrom::take_from(&mut from.t) }
    }
}

/// The wire type corersponding to [`HandlesInProtocolSendHandlesRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireHandlesInProtocolSendHandlesRequest<'buf> {
    pub t: crate::WireT<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireHandlesInProtocolSendHandlesRequest<'buf>
where
    ___D: ?Sized,

    crate::WireT<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut t,

            } = slot;
        }

        ::fidl_next::Decode::decode(t.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the HandlesInProtocol protocol.
#[derive(Debug)]
pub struct HandlesInProtocol;

pub mod handles_in_protocol {

    pub struct SendHandles;

    impl ::fidl_next::bind::Method for SendHandles {
        const ORDINAL: u64 = 8904504160365833729;

        type Protocol = crate::HandlesInProtocol;

        type Request<'buf> = crate::WireHandlesInProtocolSendHandlesRequest<'buf>;

        type Response<'buf> = ::fidl_next::bind::Never;
    }
}

/// A helper trait for the `HandlesInProtocol` client sender.
pub trait HandlesInProtocolClientSender<___T: ::fidl_next::protocol::Transport> {
    fn send_handles<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireHandlesInProtocolSendHandlesRequest<'buf>,
        >;
}

impl<___T> HandlesInProtocolClientSender<___T>
    for ::fidl_next::bind::ClientSender<___T, HandlesInProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn send_handles<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<___T::SendFuture<'_>, ::fidl_next::EncodeError>
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireHandlesInProtocolSendHandlesRequest<'buf>,
        >,
    {
        self.as_untyped().send_one_way(8904504160365833729, request)
    }
}

/// A client handler for the HandlesInProtocol protocol.

pub trait HandlesInProtocolClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for HandlesInProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: HandlesInProtocolClientHandler<___T>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `HandlesInProtocol` server sender.
pub trait HandlesInProtocolServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> HandlesInProtocolServerSender<___T>
    for ::fidl_next::bind::ServerSender<___T, HandlesInProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
}

/// A server handler for the HandlesInProtocol protocol.

pub trait HandlesInProtocolServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn send_handles(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, HandlesInProtocol>,

        request: ::fidl_next::bind::RequestBuffer<___T, handles_in_protocol::SendHandles>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for HandlesInProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: HandlesInProtocolServerHandler<___T>,

    for<'buf> crate::WireHandlesInProtocolSendHandlesRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            8904504160365833729 => {
                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.send_handles(sender, buffer);
            }

            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Debug)]
pub struct ServerEndWrapper {
    pub value: ::fidl_next::bind::ServerEnd<::fidl_next::zx::Handle, crate::DriverProtocol>,
}

impl ::fidl_next::Encodable for ServerEndWrapper {
    type Encoded<'buf> = WireServerEndWrapper;
}

impl<___E> ::fidl_next::Encode<___E> for ServerEndWrapper
where
    ::fidl_next::bind::ServerEnd<::fidl_next::zx::Handle, crate::DriverProtocol>:
        ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ServerEndWrapper> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireServerEndWrapper>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ServerEndWrapper>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ServerEndWrapper: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireServerEndWrapper> for ServerEndWrapper {
    fn take_from(from: &mut WireServerEndWrapper) -> Self {
        Self { value: ::fidl_next::TakeFrom::take_from(&mut from.value) }
    }
}

/// The wire type corersponding to [`ServerEndWrapper`].
#[derive(Debug)]
#[repr(C)]
pub struct WireServerEndWrapper {
    pub value: ::fidl_next::bind::ServerEnd<::fidl_next::WireHandle, crate::DriverProtocol>,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireServerEndWrapper
where
    ___D: ?Sized,

    ::fidl_next::bind::ServerEnd<::fidl_next::WireHandle, crate::DriverProtocol>:
        ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}
