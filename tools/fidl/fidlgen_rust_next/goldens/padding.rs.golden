// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct Padding1ByteEnd {
    pub a: u16,
    pub b: u8,
}

impl ::fidl::Encode for Padding1ByteEnd {
    type Encoded<'buf> = WirePadding1ByteEnd;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding1ByteEnd> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding1ByteEnd>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding1ByteEnd> for Padding1ByteEnd {
    fn take_from(from: &mut WirePadding1ByteEnd) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding1ByteEnd {
    pub a: ::fidl::u16_le,
    pub b: u8,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding1ByteEnd {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding1ByteMiddle {
    pub a: u8,
    pub b: u16,
}

impl ::fidl::Encode for Padding1ByteMiddle {
    type Encoded<'buf> = WirePadding1ByteMiddle;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding1ByteMiddle> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding1ByteMiddle>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding1ByteMiddle> for Padding1ByteMiddle {
    fn take_from(from: &mut WirePadding1ByteMiddle) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding1ByteMiddle {
    pub a: u8,
    pub b: ::fidl::u16_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding1ByteMiddle {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding2ByteAlignmentLength6 {
    pub a: u8,
    pub b: u16,
    pub c: u8,
}

impl ::fidl::Encode for Padding2ByteAlignmentLength6 {
    type Encoded<'buf> = WirePadding2ByteAlignmentLength6;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
                c,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        ::fidl::Encode::encode(&mut self.c, encoder, c)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding2ByteAlignmentLength6> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding2ByteAlignmentLength6>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding2ByteAlignmentLength6> for Padding2ByteAlignmentLength6 {
    fn take_from(from: &mut WirePadding2ByteAlignmentLength6) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
            c: ::fidl::TakeFrom::take_from(&mut from.c),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding2ByteAlignmentLength6 {
    pub a: u8,
    pub b: ::fidl::u16_le,
    pub c: u8,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding2ByteAlignmentLength6 {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
                mut c,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(c.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding2ByteEnd {
    pub a: u32,
    pub b: u16,
}

impl ::fidl::Encode for Padding2ByteEnd {
    type Encoded<'buf> = WirePadding2ByteEnd;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding2ByteEnd> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding2ByteEnd>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding2ByteEnd> for Padding2ByteEnd {
    fn take_from(from: &mut WirePadding2ByteEnd) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding2ByteEnd {
    pub a: ::fidl::u32_le,
    pub b: ::fidl::u16_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding2ByteEnd {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding2ByteMiddle {
    pub a: u16,
    pub b: u32,
}

impl ::fidl::Encode for Padding2ByteMiddle {
    type Encoded<'buf> = WirePadding2ByteMiddle;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding2ByteMiddle> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding2ByteMiddle>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding2ByteMiddle> for Padding2ByteMiddle {
    fn take_from(from: &mut WirePadding2ByteMiddle) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding2ByteMiddle {
    pub a: ::fidl::u16_le,
    pub b: ::fidl::u32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding2ByteMiddle {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding3ByteEnd {
    pub a: u32,
    pub b: u8,
}

impl ::fidl::Encode for Padding3ByteEnd {
    type Encoded<'buf> = WirePadding3ByteEnd;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding3ByteEnd> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding3ByteEnd>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding3ByteEnd> for Padding3ByteEnd {
    fn take_from(from: &mut WirePadding3ByteEnd) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding3ByteEnd {
    pub a: ::fidl::u32_le,
    pub b: u8,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding3ByteEnd {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding3ByteMiddle {
    pub a: u8,
    pub b: u32,
}

impl ::fidl::Encode for Padding3ByteMiddle {
    type Encoded<'buf> = WirePadding3ByteMiddle;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding3ByteMiddle> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding3ByteMiddle>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding3ByteMiddle> for Padding3ByteMiddle {
    fn take_from(from: &mut WirePadding3ByteMiddle) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding3ByteMiddle {
    pub a: u8,
    pub b: ::fidl::u32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding3ByteMiddle {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding4ByteAlignmentLength12 {
    pub a: u32,
    pub b: u8,
    pub c: u16,
    pub d: u16,
}

impl ::fidl::Encode for Padding4ByteAlignmentLength12 {
    type Encoded<'buf> = WirePadding4ByteAlignmentLength12;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
                c,
                d,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        ::fidl::Encode::encode(&mut self.c, encoder, c)?;
        ::fidl::Encode::encode(&mut self.d, encoder, d)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding4ByteAlignmentLength12> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding4ByteAlignmentLength12>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding4ByteAlignmentLength12> for Padding4ByteAlignmentLength12 {
    fn take_from(from: &mut WirePadding4ByteAlignmentLength12) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
            c: ::fidl::TakeFrom::take_from(&mut from.c),
            d: ::fidl::TakeFrom::take_from(&mut from.d),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding4ByteAlignmentLength12 {
    pub a: ::fidl::u32_le,
    pub b: u8,
    pub c: ::fidl::u16_le,
    pub d: ::fidl::u16_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding4ByteAlignmentLength12 {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
                mut c,
                mut d,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(c.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(d.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding4ByteEnd {
    pub a: u64,
    pub b: u32,
}

impl ::fidl::Encode for Padding4ByteEnd {
    type Encoded<'buf> = WirePadding4ByteEnd;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding4ByteEnd> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding4ByteEnd>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding4ByteEnd> for Padding4ByteEnd {
    fn take_from(from: &mut WirePadding4ByteEnd) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding4ByteEnd {
    pub a: ::fidl::u64_le,
    pub b: ::fidl::u32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding4ByteEnd {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding4ByteMiddle {
    pub a: u32,
    pub b: u64,
}

impl ::fidl::Encode for Padding4ByteMiddle {
    type Encoded<'buf> = WirePadding4ByteMiddle;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding4ByteMiddle> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding4ByteMiddle>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding4ByteMiddle> for Padding4ByteMiddle {
    fn take_from(from: &mut WirePadding4ByteMiddle) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding4ByteMiddle {
    pub a: ::fidl::u32_le,
    pub b: ::fidl::u64_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding4ByteMiddle {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding5ByteEnd {
    pub a: u64,
    pub b: u16,
    pub c: u8,
}

impl ::fidl::Encode for Padding5ByteEnd {
    type Encoded<'buf> = WirePadding5ByteEnd;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
                c,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        ::fidl::Encode::encode(&mut self.c, encoder, c)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding5ByteEnd> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding5ByteEnd>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding5ByteEnd> for Padding5ByteEnd {
    fn take_from(from: &mut WirePadding5ByteEnd) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
            c: ::fidl::TakeFrom::take_from(&mut from.c),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding5ByteEnd {
    pub a: ::fidl::u64_le,
    pub b: ::fidl::u16_le,
    pub c: u8,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding5ByteEnd {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
                mut c,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(c.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding5ByteMiddle {
    pub a: u16,
    pub b: u8,
    pub c: u64,
}

impl ::fidl::Encode for Padding5ByteMiddle {
    type Encoded<'buf> = WirePadding5ByteMiddle;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
                c,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        ::fidl::Encode::encode(&mut self.c, encoder, c)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding5ByteMiddle> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding5ByteMiddle>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding5ByteMiddle> for Padding5ByteMiddle {
    fn take_from(from: &mut WirePadding5ByteMiddle) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
            c: ::fidl::TakeFrom::take_from(&mut from.c),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding5ByteMiddle {
    pub a: ::fidl::u16_le,
    pub b: u8,
    pub c: ::fidl::u64_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding5ByteMiddle {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
                mut c,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(c.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding6ByteEnd {
    pub a: u64,
    pub b: u16,
}

impl ::fidl::Encode for Padding6ByteEnd {
    type Encoded<'buf> = WirePadding6ByteEnd;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding6ByteEnd> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding6ByteEnd>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding6ByteEnd> for Padding6ByteEnd {
    fn take_from(from: &mut WirePadding6ByteEnd) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding6ByteEnd {
    pub a: ::fidl::u64_le,
    pub b: ::fidl::u16_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding6ByteEnd {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding6ByteMiddle {
    pub a: u16,
    pub b: u64,
}

impl ::fidl::Encode for Padding6ByteMiddle {
    type Encoded<'buf> = WirePadding6ByteMiddle;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding6ByteMiddle> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding6ByteMiddle>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding6ByteMiddle> for Padding6ByteMiddle {
    fn take_from(from: &mut WirePadding6ByteMiddle) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding6ByteMiddle {
    pub a: ::fidl::u16_le,
    pub b: ::fidl::u64_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding6ByteMiddle {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding7ByteEnd {
    pub a: u64,
    pub b: u8,
}

impl ::fidl::Encode for Padding7ByteEnd {
    type Encoded<'buf> = WirePadding7ByteEnd;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding7ByteEnd> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding7ByteEnd>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding7ByteEnd> for Padding7ByteEnd {
    fn take_from(from: &mut WirePadding7ByteEnd) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding7ByteEnd {
    pub a: ::fidl::u64_le,
    pub b: u8,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding7ByteEnd {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Padding7ByteMiddle {
    pub a: u8,
    pub b: u64,
}

impl ::fidl::Encode for Padding7ByteMiddle {
    type Encoded<'buf> = WirePadding7ByteMiddle;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<Padding7ByteMiddle> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WirePadding7ByteMiddle>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WirePadding7ByteMiddle> for Padding7ByteMiddle {
    fn take_from(from: &mut WirePadding7ByteMiddle) -> Self {
        Self {
            a: ::fidl::TakeFrom::take_from(&mut from.a),
            b: ::fidl::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WirePadding7ByteMiddle {
    pub a: u8,
    pub b: ::fidl::u64_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WirePadding7ByteMiddle {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(a.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}
