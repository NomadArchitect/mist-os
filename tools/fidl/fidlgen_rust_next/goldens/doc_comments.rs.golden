// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

/// flexible union comment #1
///
/// flexible union comment #3
#[derive(Clone, Debug)]

pub enum FlexibleUnion {
    Field(i32),
    Unknown(u64),
}

impl ::fidl_next::Encodable for FlexibleUnion {
    type Encoded<'buf> = WireFlexibleUnion<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for FlexibleUnion
where
    ___E: ::fidl_next::Encoder + ?Sized,

    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireFlexibleUnion { raw } = slot);

        match self {
            Self::Field(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 1, encoder, raw)?
            }

            Self::Unknown(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<FlexibleUnion> {
    type EncodedOption<'buf> = WireOptionalFlexibleUnion<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<FlexibleUnion>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    FlexibleUnion: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalFlexibleUnion { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireFlexibleUnion<'buf>> for FlexibleUnion {
    fn take_from(from: &mut WireFlexibleUnion<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Field(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalFlexibleUnion<'buf>> for Option<Box<FlexibleUnion>> {
    fn take_from(from: &mut WireOptionalFlexibleUnion<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// flexible union comment #1
///
/// flexible union comment #3

#[repr(transparent)]
pub struct WireFlexibleUnion<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireFlexibleUnionRef<'buf> {
    Field(&'buf ::fidl_next::i32_le),
    Unknown(u64),
}

pub enum WireFlexibleUnionMut<'buf> {
    Field(&'buf mut ::fidl_next::i32_le),
    Unknown(u64),
}

impl WireFlexibleUnion<'_> {
    pub fn as_ref(&self) -> WireFlexibleUnionRef<'_> {
        match self.raw.ordinal() {
            1 => WireFlexibleUnionRef::Field(unsafe { self.raw.get().deref_unchecked() }),
            unknown => WireFlexibleUnionRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireFlexibleUnionMut<'_> {
        match self.raw.ordinal() {
            1 => WireFlexibleUnionMut::Field(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            unknown => WireFlexibleUnionMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireFlexibleUnion<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireFlexibleUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::i32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalFlexibleUnion<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalFlexibleUnion<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireFlexibleUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireFlexibleUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireFlexibleUnion<'buf>> {
        if self.is_some() {
            Some(WireFlexibleUnion {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalFlexibleUnion<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireOptionalFlexibleUnion<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalFlexibleUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// flexible enum comment #1.
///
/// flexible enum comment #2.
#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum MyFlexibleEnum {
    Foo = 1,
    Bar = 2,
    Unknown(u32),
}

impl ::fidl_next::Encodable for MyFlexibleEnum {
    type Encoded<'buf> = WireMyFlexibleEnum;
}

impl<___E> ::fidl_next::Encode<___E> for MyFlexibleEnum
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyFlexibleEnum { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            MyFlexibleEnum::Foo => 1,
            MyFlexibleEnum::Bar => 2,
            MyFlexibleEnum::Unknown(value) => value,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireMyFlexibleEnum> for MyFlexibleEnum {
    fn from(wire: WireMyFlexibleEnum) -> Self {
        match u32::from(wire.value) {
            1 => MyFlexibleEnum::Foo,
            2 => MyFlexibleEnum::Bar,
            value => MyFlexibleEnum::Unknown(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyFlexibleEnum> for MyFlexibleEnum {
    fn take_from(from: &mut WireMyFlexibleEnum) -> Self {
        MyFlexibleEnum::from(*from)
    }
}

/// flexible enum comment #1.
///
/// flexible enum comment #2.
#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyFlexibleEnum {
    value: ::fidl_next::u32_le,
}

impl WireMyFlexibleEnum {
    pub const FOO: WireMyFlexibleEnum =
        WireMyFlexibleEnum { value: ::fidl_next::u32_le::from_native(1) };
    pub const BAR: WireMyFlexibleEnum =
        WireMyFlexibleEnum { value: ::fidl_next::u32_le::from_native(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyFlexibleEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyFlexibleEnum> for WireMyFlexibleEnum {
    fn from(natural: MyFlexibleEnum) -> Self {
        match natural {
            MyFlexibleEnum::Foo => WireMyFlexibleEnum::FOO,
            MyFlexibleEnum::Bar => WireMyFlexibleEnum::BAR,
            MyFlexibleEnum::Unknown(value) => {
                WireMyFlexibleEnum { value: ::fidl_next::u32_le::from(value) }
            }
        }
    }
}

/// strict enum comment #1.
///
/// strict enum comment #2.
#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum MyStrictEnum {
    Foo = 1,
    Bar = 2,
}

impl ::fidl_next::Encodable for MyStrictEnum {
    type Encoded<'buf> = WireMyStrictEnum;
}

impl<___E> ::fidl_next::Encode<___E> for MyStrictEnum
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyStrictEnum { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            MyStrictEnum::Foo => 1,
            MyStrictEnum::Bar => 2,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireMyStrictEnum> for MyStrictEnum {
    fn from(wire: WireMyStrictEnum) -> Self {
        match u32::from(wire.value) {
            1 => MyStrictEnum::Foo,
            2 => MyStrictEnum::Bar,
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyStrictEnum> for MyStrictEnum {
    fn take_from(from: &mut WireMyStrictEnum) -> Self {
        MyStrictEnum::from(*from)
    }
}

/// strict enum comment #1.
///
/// strict enum comment #2.
#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyStrictEnum {
    value: ::fidl_next::u32_le,
}

impl WireMyStrictEnum {
    pub const FOO: WireMyStrictEnum =
        WireMyStrictEnum { value: ::fidl_next::u32_le::from_native(1) };
    pub const BAR: WireMyStrictEnum =
        WireMyStrictEnum { value: ::fidl_next::u32_le::from_native(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyStrictEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);

        match u32::from(*value) {
            1 | 2 => (),
            unknown => return Err(::fidl_next::DecodeError::InvalidEnumOrdinal(unknown as usize)),
        }

        Ok(())
    }
}

impl ::core::convert::From<MyStrictEnum> for WireMyStrictEnum {
    fn from(natural: MyStrictEnum) -> Self {
        match natural {
            MyStrictEnum::Foo => WireMyStrictEnum::FOO,
            MyStrictEnum::Bar => WireMyStrictEnum::BAR,
        }
    }
}

/// strict union comment #1
///
/// strict union comment #3
#[derive(Clone, Debug)]

pub enum StrictUnion {
    Field(i32),
}

impl ::fidl_next::Encodable for StrictUnion {
    type Encoded<'buf> = WireStrictUnion<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for StrictUnion
where
    ___E: ::fidl_next::Encoder + ?Sized,

    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireStrictUnion { raw } = slot);

        match self {
            Self::Field(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StrictUnion> {
    type EncodedOption<'buf> = WireOptionalStrictUnion<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StrictUnion>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StrictUnion: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalStrictUnion { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireStrictUnion<'buf>> for StrictUnion {
    fn take_from(from: &mut WireStrictUnion<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Field(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalStrictUnion<'buf>> for Option<Box<StrictUnion>> {
    fn take_from(from: &mut WireOptionalStrictUnion<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// strict union comment #1
///
/// strict union comment #3

#[repr(transparent)]
pub struct WireStrictUnion<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireStrictUnionRef<'buf> {
    Field(&'buf ::fidl_next::i32_le),
}

pub enum WireStrictUnionMut<'buf> {
    Field(&'buf mut ::fidl_next::i32_le),
}

impl WireStrictUnion<'_> {
    pub fn as_ref(&self) -> WireStrictUnionRef<'_> {
        match self.raw.ordinal() {
            1 => WireStrictUnionRef::Field(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireStrictUnionMut<'_> {
        match self.raw.ordinal() {
            1 => WireStrictUnionMut::Field(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireStrictUnion<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireStrictUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::i32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalStrictUnion<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalStrictUnion<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireStrictUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireStrictUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireStrictUnion<'buf>> {
        if self.is_some() {
            Some(WireStrictUnion {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalStrictUnion<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireOptionalStrictUnion<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::i32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalStrictUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// struct comment #1
///
/// struct comment #3
#[derive(Clone, Debug)]
pub struct Struct {
    pub Field: i32,
}

impl ::fidl_next::Encodable for Struct {
    type Encoded<'buf> = WireStruct;
}

impl<___E> ::fidl_next::Encode<___E> for Struct
where
    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                Field,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.Field, encoder, Field)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Struct> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStruct>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Struct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Struct: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStruct> for Struct {
    fn take_from(from: &mut WireStruct) -> Self {
        Self { Field: ::fidl_next::TakeFrom::take_from(&mut from.Field) }
    }
}

/// struct comment #1
///
/// struct comment #3
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStruct {
    pub Field: ::fidl_next::i32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStruct
where
    ___D: ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut Field,
            } = slot;
        }
        ::fidl_next::Decode::decode(Field.as_mut(), decoder)?;
        Ok(())
    }
}

/// table comment #1
///
/// table comment #3
#[derive(Clone, Debug)]
pub struct Table {
    pub Field: Option<i32>,
}

impl Table {
    fn __max_ordinal(&self) -> usize {
        if self.Field.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for Table {
    type Encoded<'buf> = WireTable<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for Table
where
    ___E: ::fidl_next::Encoder + ?Sized,

    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTable { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(Field) = &mut self.Field {
                        ::fidl_next::WireEnvelope::encode_value(
                            Field,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireTable<'buf>> for Table {
    fn take_from(from: &mut WireTable<'buf>) -> Self {
        Self { Field: from.Field_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// table comment #1
///
/// table comment #3

#[repr(C)]
pub struct WireTable<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireTable<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::i32_le>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireTable<'buf> {
    pub fn Field(&self) -> Option<&::fidl_next::i32_le> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn Field_mut(&mut self) -> Option<&mut ::fidl_next::i32_le> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_Field(&mut self) -> Option<::fidl_next::i32_le> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTable<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("Table").field("Field", &self.Field()).finish()
    }
}
