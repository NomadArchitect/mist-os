// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Copy, Debug)]
#[repr(i32)]
pub enum EnumType {
    Value = 1,
    True = 2,
}

impl ::fidl::Encode for EnumType {
    type Encoded<'buf> = WireEnumType;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireEnumType { mut value } = slot);
        *value = ::fidl::i32_le::from(match *self {
            EnumType::Value => 1,
            EnumType::True => 2,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireEnumType> for EnumType {
    fn from(wire: WireEnumType) -> Self {
        match i32::from(wire.value) {
            1 => EnumType::Value,
            2 => EnumType::True,
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl::TakeFrom<WireEnumType> for EnumType {
    fn take_from(from: &mut WireEnumType) -> Self {
        EnumType::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireEnumType {
    value: ::fidl::i32_le,
}

impl WireEnumType {
    pub const VALUE: WireEnumType = WireEnumType { value: ::fidl::i32_le::from_native(1) };
    pub const TRUE: WireEnumType = WireEnumType { value: ::fidl::i32_le::from_native(2) };
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEnumType {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { value } = slot);

        match i32::from(*value) {
            1 | 2 => (),
            unknown => return Err(::fidl::decode::Error::InvalidEnumOrdinal(unknown as usize)),
        }

        Ok(())
    }
}

impl ::core::convert::From<EnumType> for WireEnumType {
    fn from(natural: EnumType) -> Self {
        match natural {
            EnumType::Value => WireEnumType::VALUE,
            EnumType::True => WireEnumType::TRUE,
        }
    }
}
