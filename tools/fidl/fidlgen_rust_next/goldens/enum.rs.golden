// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum MyEmptyFlexibleEnum {
    Unknown(u32),
}

impl ::fidl_next::Encodable for MyEmptyFlexibleEnum {
    type Encoded<'buf> = WireMyEmptyFlexibleEnum;
}

impl<___E> ::fidl_next::Encode<___E> for MyEmptyFlexibleEnum
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyEmptyFlexibleEnum { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            Self::Unknown(value) => value,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireMyEmptyFlexibleEnum> for MyEmptyFlexibleEnum {
    fn from(wire: WireMyEmptyFlexibleEnum) -> Self {
        match u32::from(wire.value) {
            value => Self::Unknown(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyEmptyFlexibleEnum> for MyEmptyFlexibleEnum {
    fn take_from(from: &mut WireMyEmptyFlexibleEnum) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyEmptyFlexibleEnum {
    value: ::fidl_next::u32_le,
}

impl WireMyEmptyFlexibleEnum {}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyEmptyFlexibleEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyEmptyFlexibleEnum> for WireMyEmptyFlexibleEnum {
    fn from(natural: MyEmptyFlexibleEnum) -> Self {
        match natural {
            MyEmptyFlexibleEnum::Unknown(value) => {
                WireMyEmptyFlexibleEnum { value: ::fidl_next::u32_le::from(value) }
            }
        }
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum MyFlexibleEnum {
    Foo = 1,
    Bar = 2,
    Unknown(u32),
}

impl ::fidl_next::Encodable for MyFlexibleEnum {
    type Encoded<'buf> = WireMyFlexibleEnum;
}

impl<___E> ::fidl_next::Encode<___E> for MyFlexibleEnum
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyFlexibleEnum { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            Self::Foo => 1,
            Self::Bar => 2,
            Self::Unknown(value) => value,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireMyFlexibleEnum> for MyFlexibleEnum {
    fn from(wire: WireMyFlexibleEnum) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,
            2 => Self::Bar,
            value => Self::Unknown(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyFlexibleEnum> for MyFlexibleEnum {
    fn take_from(from: &mut WireMyFlexibleEnum) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyFlexibleEnum {
    value: ::fidl_next::u32_le,
}

impl WireMyFlexibleEnum {
    pub const FOO: WireMyFlexibleEnum =
        WireMyFlexibleEnum { value: ::fidl_next::u32_le::from_native(1) };
    pub const BAR: WireMyFlexibleEnum =
        WireMyFlexibleEnum { value: ::fidl_next::u32_le::from_native(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyFlexibleEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyFlexibleEnum> for WireMyFlexibleEnum {
    fn from(natural: MyFlexibleEnum) -> Self {
        match natural {
            MyFlexibleEnum::Foo => WireMyFlexibleEnum::FOO,
            MyFlexibleEnum::Bar => WireMyFlexibleEnum::BAR,
            MyFlexibleEnum::Unknown(value) => {
                WireMyFlexibleEnum { value: ::fidl_next::u32_le::from(value) }
            }
        }
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum MyFlexibleEnumWithCustomUnknown {
    Foo = 1,
    Bar = 2,
    CustomUnknown = 3,
    Unknown(u32),
}

impl ::fidl_next::Encodable for MyFlexibleEnumWithCustomUnknown {
    type Encoded<'buf> = WireMyFlexibleEnumWithCustomUnknown;
}

impl<___E> ::fidl_next::Encode<___E> for MyFlexibleEnumWithCustomUnknown
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyFlexibleEnumWithCustomUnknown { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            Self::Foo => 1,
            Self::Bar => 2,
            Self::CustomUnknown => 3,
            Self::Unknown(value) => value,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireMyFlexibleEnumWithCustomUnknown>
    for MyFlexibleEnumWithCustomUnknown
{
    fn from(wire: WireMyFlexibleEnumWithCustomUnknown) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,
            2 => Self::Bar,
            3 => Self::CustomUnknown,
            value => Self::Unknown(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyFlexibleEnumWithCustomUnknown>
    for MyFlexibleEnumWithCustomUnknown
{
    fn take_from(from: &mut WireMyFlexibleEnumWithCustomUnknown) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyFlexibleEnumWithCustomUnknown {
    value: ::fidl_next::u32_le,
}

impl WireMyFlexibleEnumWithCustomUnknown {
    pub const FOO: WireMyFlexibleEnumWithCustomUnknown =
        WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::u32_le::from_native(1) };
    pub const BAR: WireMyFlexibleEnumWithCustomUnknown =
        WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::u32_le::from_native(2) };
    pub const CUSTOM_UNKNOWN: WireMyFlexibleEnumWithCustomUnknown =
        WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::u32_le::from_native(3) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyFlexibleEnumWithCustomUnknown
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<MyFlexibleEnumWithCustomUnknown>
    for WireMyFlexibleEnumWithCustomUnknown
{
    fn from(natural: MyFlexibleEnumWithCustomUnknown) -> Self {
        match natural {
            MyFlexibleEnumWithCustomUnknown::Foo => WireMyFlexibleEnumWithCustomUnknown::FOO,
            MyFlexibleEnumWithCustomUnknown::Bar => WireMyFlexibleEnumWithCustomUnknown::BAR,
            MyFlexibleEnumWithCustomUnknown::CustomUnknown => {
                WireMyFlexibleEnumWithCustomUnknown::CUSTOM_UNKNOWN
            }
            MyFlexibleEnumWithCustomUnknown::Unknown(value) => {
                WireMyFlexibleEnumWithCustomUnknown { value: ::fidl_next::u32_le::from(value) }
            }
        }
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum MyStrictEnum {
    Foo = 1,
    Bar = 2,
}

impl ::fidl_next::Encodable for MyStrictEnum {
    type Encoded<'buf> = WireMyStrictEnum;
}

impl<___E> ::fidl_next::Encode<___E> for MyStrictEnum
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyStrictEnum { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            Self::Foo => 1,
            Self::Bar => 2,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireMyStrictEnum> for MyStrictEnum {
    fn from(wire: WireMyStrictEnum) -> Self {
        match u32::from(wire.value) {
            1 => Self::Foo,
            2 => Self::Bar,
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireMyStrictEnum> for MyStrictEnum {
    fn take_from(from: &mut WireMyStrictEnum) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyStrictEnum {
    value: ::fidl_next::u32_le,
}

impl WireMyStrictEnum {
    pub const FOO: WireMyStrictEnum =
        WireMyStrictEnum { value: ::fidl_next::u32_le::from_native(1) };
    pub const BAR: WireMyStrictEnum =
        WireMyStrictEnum { value: ::fidl_next::u32_le::from_native(2) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyStrictEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);

        match u32::from(*value) {
            1 | 2 => (),
            unknown => return Err(::fidl_next::DecodeError::InvalidEnumOrdinal(unknown as i128)),
        }

        Ok(())
    }
}

impl ::core::convert::From<MyStrictEnum> for WireMyStrictEnum {
    fn from(natural: MyStrictEnum) -> Self {
        match natural {
            MyStrictEnum::Foo => WireMyStrictEnum::FOO,
            MyStrictEnum::Bar => WireMyStrictEnum::BAR,
        }
    }
}
