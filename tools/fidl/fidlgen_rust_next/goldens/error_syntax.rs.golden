// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    pub s: String,
}

impl ::fidl_next::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailRequest {
    type Encoded<'buf> = WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
where
    String: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                s,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.s, encoder, s)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleUseOfErrorSyntaxCallWhichMayFailRequest> {
    type EncodedOption<'buf> =
        ::fidl_next::WireBox<'buf, WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleUseOfErrorSyntaxCallWhichMayFailRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>>
    for ExampleUseOfErrorSyntaxCallWhichMayFailRequest
{
    fn take_from(from: &mut WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>) -> Self {
        Self { s: ::fidl_next::TakeFrom::take_from(&mut from.s) }
    }
}

/// The wire type corersponding to [`ExampleUseOfErrorSyntaxCallWhichMayFailRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf> {
    pub s: ::fidl_next::WireString<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D>
    for WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut s,

            } = slot;
        }

        ::fidl_next::Decode::decode(s.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct ExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    pub value: i64,
}

impl ::fidl_next::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    type Encoded<'buf> = WireExampleUseOfErrorSyntaxCallWhichMayFailResponse;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    i64: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                value,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.value, encoder, value)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleUseOfErrorSyntaxCallWhichMayFailResponse> {
    type EncodedOption<'buf> =
        ::fidl_next::WireBox<'buf, WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleUseOfErrorSyntaxCallWhichMayFailResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>
    for ExampleUseOfErrorSyntaxCallWhichMayFailResponse
{
    fn take_from(from: &mut WireExampleUseOfErrorSyntaxCallWhichMayFailResponse) -> Self {
        Self { value: ::fidl_next::TakeFrom::take_from(&mut from.value) }
    }
}

/// The wire type corersponding to [`ExampleUseOfErrorSyntaxCallWhichMayFailResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailResponse {
    pub value: ::fidl_next::i64_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireExampleUseOfErrorSyntaxCallWhichMayFailResponse
where
    ___D: ?Sized,

    ::fidl_next::i64_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut value,

            } = slot;
        }

        ::fidl_next::Decode::decode(value.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum ExampleUseOfErrorSyntaxCallWhichMayFailResult {
    Response(crate::ExampleUseOfErrorSyntaxCallWhichMayFailResponse),

    Err(u32),
}

impl ::fidl_next::Encodable for ExampleUseOfErrorSyntaxCallWhichMayFailResult {
    type Encoded<'buf> = WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for ExampleUseOfErrorSyntaxCallWhichMayFailResult
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::ExampleUseOfErrorSyntaxCallWhichMayFailResponse: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireExampleUseOfErrorSyntaxCallWhichMayFailResult { raw, _phantom: _ } = slot);

        match self {
            Self::Response(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::ExampleUseOfErrorSyntaxCallWhichMayFailResponse,
            >(value, 1, encoder, raw)?,

            Self::Err(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<ExampleUseOfErrorSyntaxCallWhichMayFailResult> {
    type EncodedOption<'buf> = WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<ExampleUseOfErrorSyntaxCallWhichMayFailResult>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    ExampleUseOfErrorSyntaxCallWhichMayFailResult: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>>
    for ExampleUseOfErrorSyntaxCallWhichMayFailResult
{
    fn take_from(from: &mut WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Response(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::Err(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>>
    for Option<Box<ExampleUseOfErrorSyntaxCallWhichMayFailResult>>
{
    fn take_from(
        from: &mut WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>,
    ) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`ExampleUseOfErrorSyntaxCallWhichMayFailResult`].
#[repr(transparent)]
pub struct WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod example_use_of_error_syntax_call_which_may_fail_result {
    pub enum Ref<'union> {
        Response(&'union crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse),

        Err(&'union ::fidl_next::u32_le),
    }

    pub enum Mut<'union> {
        Response(&'union mut crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse),

        Err(&'union mut ::fidl_next::u32_le),
    }
}

impl<'buf> WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf> {
    pub fn as_ref(&self) -> crate::example_use_of_error_syntax_call_which_may_fail_result::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::example_use_of_error_syntax_call_which_may_fail_result::Ref::Response(
                unsafe { self.raw.get().deref_unchecked() },
            ),

            2 => crate::example_use_of_error_syntax_call_which_may_fail_result::Ref::Err(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(
        &mut self,
    ) -> crate::example_use_of_error_syntax_call_which_may_fail_result::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::example_use_of_error_syntax_call_which_may_fail_result::Mut::Response(
                unsafe { self.raw.get_mut().deref_mut_unchecked() },
            ),

            2 => crate::example_use_of_error_syntax_call_which_may_fail_result::Mut::Err(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw
                    .get()
                    .deref_unchecked::<crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse>()
                    .fmt(f)
            },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(
        &mut self,
    ) -> Option<&mut WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>> {
        if self.is_some() {
            Some(WireExampleUseOfErrorSyntaxCallWhichMayFailResult {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<
                ___D,
                crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResponse,
            >(raw, decoder)?,

            2 => ::fidl_next::RawWireUnion::decode_as::<___D, ::fidl_next::u32_le>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

/// The type corresponding to the ExampleUseOfErrorSyntax protocol.
#[derive(Debug)]
pub struct ExampleUseOfErrorSyntax;

pub mod example_use_of_error_syntax {

    pub struct ComposedCallWhichMayFail;

    impl ::fidl_next::bind::Method for ComposedCallWhichMayFail {
        const ORDINAL: u64 = 3565108794310607393;

        type Protocol = crate::ExampleUseOfErrorSyntax;

        type Request<'buf> = fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest<'buf>;

        type Response<'buf> = fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailResult<'buf>;
    }

    pub struct CallWhichMayFail;

    impl ::fidl_next::bind::Method for CallWhichMayFail {
        const ORDINAL: u64 = 3757408930698888354;

        type Protocol = crate::ExampleUseOfErrorSyntax;

        type Request<'buf> = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>;

        type Response<'buf> = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>;
    }
}

/// A helper trait for the `ExampleUseOfErrorSyntax` client sender.
pub trait ExampleUseOfErrorSyntaxClientSender<___T: ::fidl_next::protocol::Transport> {
    fn composed_call_which_may_fail<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::ResponseFuture<
                            '_,
                            ___T,
                            example_use_of_error_syntax::ComposedCallWhichMayFail,
                        >,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest<'buf>,
                        >;

    fn call_which_may_fail<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::ResponseFuture<'_, ___T, example_use_of_error_syntax::CallWhichMayFail>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>,
        >;
}

impl<___T> ExampleUseOfErrorSyntaxClientSender<___T>
    for ::fidl_next::bind::ClientSender<___T, ExampleUseOfErrorSyntax>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn composed_call_which_may_fail<___R>(
                        &self,
                        request: &mut ___R,
                    ) -> Result<
                        ::fidl_next::bind::ResponseFuture<'_, ___T, example_use_of_error_syntax::ComposedCallWhichMayFail>,
                        ::fidl_next::EncodeError,
                    >
                    where
                        for<'buf> ___R: ::fidl_next::Encode<
                            ___T::Encoder<'buf>,
                            Encoded<'buf> = fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest<'buf>,
                        >,
                    {
        self.as_untyped()
            .send_two_way(3565108794310607393, request)
            .map(::fidl_next::bind::ResponseFuture::from_untyped)
    }

    fn call_which_may_fail<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::ResponseFuture<'_, ___T, example_use_of_error_syntax::CallWhichMayFail>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>,
        >,
    {
        self.as_untyped()
            .send_two_way(3757408930698888354, request)
            .map(::fidl_next::bind::ResponseFuture::from_untyped)
    }
}

/// A client handler for the ExampleUseOfErrorSyntax protocol.

pub trait ExampleUseOfErrorSyntaxClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for ExampleUseOfErrorSyntax
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ExampleUseOfErrorSyntaxClientHandler<___T>,

    for<'buf> fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailResult<
        'buf,
    >: ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireExampleUseOfErrorSyntaxCallWhichMayFailResult<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `ExampleUseOfErrorSyntax` server sender.
pub trait ExampleUseOfErrorSyntaxServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> ExampleUseOfErrorSyntaxServerSender<___T>
    for ::fidl_next::bind::ServerSender<___T, ExampleUseOfErrorSyntax>
where
    ___T: ::fidl_next::protocol::Transport,
{
}

/// A server handler for the ExampleUseOfErrorSyntax protocol.

pub trait ExampleUseOfErrorSyntaxServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn composed_call_which_may_fail(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, ExampleUseOfErrorSyntax>,

        request: ::fidl_next::bind::RequestBuffer<
            ___T,
            example_use_of_error_syntax::ComposedCallWhichMayFail,
        >,

        responder: ::fidl_next::bind::Responder<
            example_use_of_error_syntax::ComposedCallWhichMayFail,
        >,
    );

    fn call_which_may_fail(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, ExampleUseOfErrorSyntax>,

        request: ::fidl_next::bind::RequestBuffer<
            ___T,
            example_use_of_error_syntax::CallWhichMayFail,
        >,

        responder: ::fidl_next::bind::Responder<example_use_of_error_syntax::CallWhichMayFail>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for ExampleUseOfErrorSyntax
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: ExampleUseOfErrorSyntaxServerHandler<___T>,

    for<'buf> fidl_next_test_errorsyntax_parent::WireParentUsesErrorSyntaxComposedCallWhichMayFailRequest<
        'buf,
    >: ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,

    for<'buf> crate::WireExampleUseOfErrorSyntaxCallWhichMayFailRequest<'buf>:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            3565108794310607393 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.composed_call_which_may_fail(sender, buffer, responder);
            }

            3757408930698888354 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.call_which_may_fail(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}
