// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct TwoWayAddRequest {
    pub addend1: u16,
    pub addend2: u16,
}

impl ::fidl::Encode for TwoWayAddRequest {
    type Encoded<'buf> = WireTwoWayAddRequest;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                addend1,
                addend2,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.addend1, encoder, addend1)?;
        ::fidl::Encode::encode(&mut self.addend2, encoder, addend2)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<TwoWayAddRequest> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireTwoWayAddRequest>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireTwoWayAddRequest> for TwoWayAddRequest {
    fn take_from(from: &mut WireTwoWayAddRequest) -> Self {
        Self {
            addend1: ::fidl::TakeFrom::take_from(&mut from.addend1),
            addend2: ::fidl::TakeFrom::take_from(&mut from.addend2),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddRequest {
    pub addend1: ::fidl::u16_le,
    pub addend2: ::fidl::u16_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireTwoWayAddRequest {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut addend1,
                mut addend2,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(addend1.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(addend2.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct TwoWayAddResponse {
    pub sum: u16,
}

impl ::fidl::Encode for TwoWayAddResponse {
    type Encoded<'buf> = WireTwoWayAddResponse;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                sum,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.sum, encoder, sum)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<TwoWayAddResponse> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireTwoWayAddResponse>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireTwoWayAddResponse> for TwoWayAddResponse {
    fn take_from(from: &mut WireTwoWayAddResponse) -> Self {
        Self { sum: ::fidl::TakeFrom::take_from(&mut from.sum) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddResponse {
    pub sum: ::fidl::u16_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireTwoWayAddResponse {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut sum,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(sum.as_mut(), decoder)?;
        Ok(())
    }
}
