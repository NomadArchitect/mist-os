// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct TwoWayAddRequest {
    pub addend1: u16,
    pub addend2: u16,
}

impl ::fidl_next::Encodable for TwoWayAddRequest {
    type Encoded<'buf> = WireTwoWayAddRequest;
}

impl<___E> ::fidl_next::Encode<___E> for TwoWayAddRequest
where
    u16: ::fidl_next::Encode<___E>,
    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                addend1,
                addend2,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.addend1, encoder, addend1)?;
        ::fidl_next::Encode::encode(&mut self.addend2, encoder, addend2)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<TwoWayAddRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireTwoWayAddRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<TwoWayAddRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireTwoWayAddRequest> for TwoWayAddRequest {
    fn take_from(from: &mut WireTwoWayAddRequest) -> Self {
        Self {
            addend1: ::fidl_next::TakeFrom::take_from(&mut from.addend1),
            addend2: ::fidl_next::TakeFrom::take_from(&mut from.addend2),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddRequest {
    pub addend1: ::fidl_next::u16_le,
    pub addend2: ::fidl_next::u16_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTwoWayAddRequest
where
    ___D: ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut addend1,
                mut addend2,
            } = slot;
        }
        ::fidl_next::Decode::decode(addend1.as_mut(), decoder)?;
        ::fidl_next::Decode::decode(addend2.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct TwoWayAddResponse {
    pub sum: u16,
}

impl ::fidl_next::Encodable for TwoWayAddResponse {
    type Encoded<'buf> = WireTwoWayAddResponse;
}

impl<___E> ::fidl_next::Encode<___E> for TwoWayAddResponse
where
    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                sum,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.sum, encoder, sum)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<TwoWayAddResponse> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireTwoWayAddResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<TwoWayAddResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireTwoWayAddResponse> for TwoWayAddResponse {
    fn take_from(from: &mut WireTwoWayAddResponse) -> Self {
        Self { sum: ::fidl_next::TakeFrom::take_from(&mut from.sum) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddResponse {
    pub sum: ::fidl_next::u16_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTwoWayAddResponse
where
    ___D: ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut sum,
            } = slot;
        }
        ::fidl_next::Decode::decode(sum.as_mut(), decoder)?;
        Ok(())
    }
}
