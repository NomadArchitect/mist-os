// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct TwoWayAddRequest {
    pub addend1: u16,

    pub addend2: u16,
}

impl ::fidl_next::Encodable for TwoWayAddRequest {
    type Encoded<'buf> = WireTwoWayAddRequest;
}

impl<___E> ::fidl_next::Encode<___E> for TwoWayAddRequest
where
    u16: ::fidl_next::Encode<___E>,

    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                addend1,
                addend2,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.addend1, encoder, addend1)?;

        ::fidl_next::Encode::encode(&mut self.addend2, encoder, addend2)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<TwoWayAddRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireTwoWayAddRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<TwoWayAddRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireTwoWayAddRequest> for TwoWayAddRequest {
    fn take_from(from: &mut WireTwoWayAddRequest) -> Self {
        Self {
            addend1: ::fidl_next::TakeFrom::take_from(&mut from.addend1),

            addend2: ::fidl_next::TakeFrom::take_from(&mut from.addend2),
        }
    }
}

/// The wire type corersponding to [`TwoWayAddRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddRequest {
    pub addend1: ::fidl_next::u16_le,

    pub addend2: ::fidl_next::u16_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTwoWayAddRequest
where
    ___D: ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut addend1,
                mut addend2,

            } = slot;
        }

        ::fidl_next::Decode::decode(addend1.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(addend2.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct TwoWayAddResponse {
    pub sum: u16,
}

impl ::fidl_next::Encodable for TwoWayAddResponse {
    type Encoded<'buf> = WireTwoWayAddResponse;
}

impl<___E> ::fidl_next::Encode<___E> for TwoWayAddResponse
where
    u16: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                sum,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.sum, encoder, sum)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<TwoWayAddResponse> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireTwoWayAddResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<TwoWayAddResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    TwoWayAddResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireTwoWayAddResponse> for TwoWayAddResponse {
    fn take_from(from: &mut WireTwoWayAddResponse) -> Self {
        Self { sum: ::fidl_next::TakeFrom::take_from(&mut from.sum) }
    }
}

/// The wire type corersponding to [`TwoWayAddResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireTwoWayAddResponse {
    pub sum: ::fidl_next::u16_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireTwoWayAddResponse
where
    ___D: ?Sized,

    ::fidl_next::u16_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut sum,

            } = slot;
        }

        ::fidl_next::Decode::decode(sum.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the TwoWay protocol.
#[derive(Debug)]
pub struct TwoWay;

pub mod two_way {

    pub struct Add;

    impl ::fidl_next::bind::Method for Add {
        const ORDINAL: u64 = 989730524426044687;

        type Protocol = crate::TwoWay;

        type Request<'buf> = crate::WireTwoWayAddRequest;

        type Response<'buf> = crate::WireTwoWayAddResponse;
    }
}

/// A helper trait for the `TwoWay` client protocol.
pub trait TwoWayClient<___T: ::fidl_next::protocol::Transport> {
    fn add<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, two_way::Add>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireTwoWayAddRequest>;
}

impl<___T> TwoWayClient<___T> for ::fidl_next::bind::Client<___T, TwoWay>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn add<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::TransactionFuture<'_, ___T, two_way::Add>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R:
            ::fidl_next::Encode<___T::Encoder<'buf>, Encoded<'buf> = crate::WireTwoWayAddRequest>,
    {
        self.untyped()
            .send_transaction(989730524426044687, request)
            .map(::fidl_next::bind::TransactionFuture::from_untyped)
    }
}

/// A client handler for the TwoWay protocol.

pub trait TwoWayClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for TwoWay
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: TwoWayClientHandler<___T>,

    for<'buf> crate::WireTwoWayAddResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            ordinal => todo!(),
        }
    }
}

/// A helper trait for the `TwoWay` server protocol.
pub trait TwoWayServer<___T: ::fidl_next::protocol::Transport> {}

impl<___T> TwoWayServer<___T> for ::fidl_next::bind::Server<___T, TwoWay> where
    ___T: ::fidl_next::protocol::Transport
{
}

/// A server handler for the TwoWay protocol.

pub trait TwoWayServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn add(
        &mut self,
        request: ::fidl_next::bind::RequestBuffer<___T, two_way::Add>,
        responder: ::fidl_next::bind::Responder<two_way::Add>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for TwoWay
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: TwoWayServerHandler<___T>,

    for<'buf> crate::WireTwoWayAddRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(handler: &mut ___H, ordinal: u64, buffer: ___T::RecvBuffer) {
        match ordinal {
            ordinal => todo!(),
        }
    }

    fn on_transaction(
        handler: &mut ___H,
        ordinal: u64,
        mut buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            989730524426044687 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.add(buffer, responder);
            }

            ordinal => todo!(),
        }
    }
}
