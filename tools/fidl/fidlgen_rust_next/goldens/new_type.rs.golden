// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]
pub struct Struct {
    pub foo: String,
}

impl ::fidl_next::Encodable for Struct {
    type Encoded<'buf> = WireStruct<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for Struct
where
    String: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                foo,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.foo, encoder, foo)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Struct> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStruct<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Struct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Struct: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireStruct<'buf>> for Struct {
    fn take_from(from: &mut WireStruct<'buf>) -> Self {
        Self { foo: ::fidl_next::TakeFrom::take_from(&mut from.foo) }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireStruct<'buf> {
    pub foo: ::fidl_next::WireString<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireStruct<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireString<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut foo,
            } = slot;
        }
        ::fidl_next::Decode::decode(foo.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct CalculatorAddRequest {
    pub a: i32,
    pub b: i32,
}

impl ::fidl_next::Encodable for CalculatorAddRequest {
    type Encoded<'buf> = WireCalculatorAddRequest;
}

impl<___E> ::fidl_next::Encode<___E> for CalculatorAddRequest
where
    i32: ::fidl_next::Encode<___E>,
    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;
        ::fidl_next::Encode::encode(&mut self.b, encoder, b)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<CalculatorAddRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireCalculatorAddRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<CalculatorAddRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    CalculatorAddRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireCalculatorAddRequest> for CalculatorAddRequest {
    fn take_from(from: &mut WireCalculatorAddRequest) -> Self {
        Self {
            a: ::fidl_next::TakeFrom::take_from(&mut from.a),
            b: ::fidl_next::TakeFrom::take_from(&mut from.b),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireCalculatorAddRequest {
    pub a: ::fidl_next::i32_le,
    pub b: ::fidl_next::i32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireCalculatorAddRequest
where
    ___D: ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,
            } = slot;
        }
        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;
        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct CalculatorAddResponse {
    pub sum: i32,
}

impl ::fidl_next::Encodable for CalculatorAddResponse {
    type Encoded<'buf> = WireCalculatorAddResponse;
}

impl<___E> ::fidl_next::Encode<___E> for CalculatorAddResponse
where
    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                sum,
            } = slot;
        }
        ::fidl_next::Encode::encode(&mut self.sum, encoder, sum)?;
        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<CalculatorAddResponse> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireCalculatorAddResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<CalculatorAddResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    CalculatorAddResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireCalculatorAddResponse> for CalculatorAddResponse {
    fn take_from(from: &mut WireCalculatorAddResponse) -> Self {
        Self { sum: ::fidl_next::TakeFrom::take_from(&mut from.sum) }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireCalculatorAddResponse {
    pub sum: ::fidl_next::i32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireCalculatorAddResponse
where
    ___D: ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut sum,
            } = slot;
        }
        ::fidl_next::Decode::decode(sum.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum Enum {
    A = 1,
    B = 15,
    Unknown(u32),
}

impl ::fidl_next::Encodable for Enum {
    type Encoded<'buf> = WireEnum;
}

impl<___E> ::fidl_next::Encode<___E> for Enum
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireEnum { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            Enum::A => 1,
            Enum::B => 15,
            Enum::Unknown(value) => value,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireEnum> for Enum {
    fn from(wire: WireEnum) -> Self {
        match u32::from(wire.value) {
            1 => Enum::A,
            15 => Enum::B,
            value => Enum::Unknown(value),
        }
    }
}

impl ::fidl_next::TakeFrom<WireEnum> for Enum {
    fn take_from(from: &mut WireEnum) -> Self {
        Enum::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireEnum {
    value: ::fidl_next::u32_le,
}

impl WireEnum {
    pub const A: WireEnum = WireEnum { value: ::fidl_next::u32_le::from_native(1) };
    pub const B: WireEnum = WireEnum { value: ::fidl_next::u32_le::from_native(15) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEnum
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<Enum> for WireEnum {
    fn from(natural: Enum) -> Self {
        match natural {
            Enum::A => WireEnum::A,
            Enum::B => WireEnum::B,
            Enum::Unknown(value) => WireEnum { value: ::fidl_next::u32_le::from(value) },
        }
    }
}

#[derive(Clone, Debug)]
pub struct Table {}

impl Table {
    fn __max_ordinal(&self) -> usize {
        0
    }
}

impl ::fidl_next::Encodable for Table {
    type Encoded<'buf> = WireTable<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for Table
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTable { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope<'_>>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope<'_>>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireTable<'buf>> for Table {
    fn take_from(from: &mut WireTable<'buf>) -> Self {
        Self {}
    }
}

#[repr(C)]
pub struct WireTable<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireTable<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireTable<'buf> {}

impl ::core::fmt::Debug for WireTable<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("Table").finish()
    }
}

#[derive(Clone, Debug)]

pub enum Union {
    B(bool),
    Unknown(u64),
}

impl ::fidl_next::Encodable for Union {
    type Encoded<'buf> = WireUnion<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for Union
where
    ___E: ::fidl_next::Encoder + ?Sized,

    bool: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnion { raw } = slot);

        match self {
            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, bool>(value, 1, encoder, raw)?
            }

            Self::Unknown(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Union> {
    type EncodedOption<'buf> = WireOptionalUnion<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Union>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Union: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnion { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireUnion<'buf>> for Union {
    fn take_from(from: &mut WireUnion<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalUnion<'buf>> for Option<Box<Union>> {
    fn take_from(from: &mut WireOptionalUnion<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnion<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

pub enum WireUnionRef<'buf> {
    B(&'buf bool),
    Unknown(u64),
}

pub enum WireUnionMut<'buf> {
    B(&'buf mut bool),
    Unknown(u64),
}

impl WireUnion<'_> {
    pub fn as_ref(&self) -> WireUnionRef<'_> {
        match self.raw.ordinal() {
            1 => WireUnionRef::B(unsafe { self.raw.get().deref_unchecked() }),
            unknown => WireUnionRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireUnionMut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionMut::B(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            unknown => WireUnionMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireUnion<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<bool>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnion<'buf> {
    raw: ::fidl_next::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnion<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnion<'buf>> {
        if self.is_some() {
            Some(WireUnion {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnion<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null() }
    }
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireOptionalUnion<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    bool: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, bool>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}
