// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Debug)]
pub struct EmptyResourceStruct {}

impl ::fidl::Encode for EmptyResourceStruct {
    type Encoded<'buf> = WireEmptyResourceStruct;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
            } = slot;
        }

        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<EmptyResourceStruct> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireEmptyResourceStruct>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireEmptyResourceStruct> for EmptyResourceStruct {
    fn take_from(from: &mut WireEmptyResourceStruct) -> Self {
        Self {}
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireEmptyResourceStruct {}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmptyResourceStruct {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
            } = slot;
        }

        Ok(())
    }
}

#[derive(Debug)]
pub struct EmptyResourceTable {}

impl EmptyResourceTable {
    fn __max_ordinal(&self) -> usize {
        0
    }
}

impl ::fidl::Encode for EmptyResourceTable {
    type Encoded<'buf> = WireEmptyResourceTable<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireEmptyResourceTable { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl::WireEnvelope<'_>>::uninit();
        let mut preallocated = encoder.preallocate::<::fidl::WireEnvelope<'_>>(max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl::Slot::new(&mut backing);
            match i {
                _ => ::fidl::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireEmptyResourceTable<'buf>> for EmptyResourceTable {
    fn take_from(from: &mut WireEmptyResourceTable<'buf>) -> Self {
        Self {}
    }
}

#[repr(C)]
pub struct WireEmptyResourceTable<'buf> {
    table: ::fidl::WireTable<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmptyResourceTable<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { table } = slot);

        ::fidl::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| match ordinal {
            0 => unsafe { ::core::hint::unreachable_unchecked() },

            _ => ::fidl::WireEnvelope::decode_unknown(slot, decoder),
        })
    }
}

impl<'buf> WireEmptyResourceTable<'buf> {}

impl ::core::fmt::Debug for WireEmptyResourceTable<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("EmptyResourceTable").finish()
    }
}

#[derive(Debug)]

pub enum EmptyResourceUnion {
    Unknown(u64),
}

impl ::fidl::Encode for EmptyResourceUnion {
    type Encoded<'buf> = WireEmptyResourceUnion<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireEmptyResourceUnion { raw } = slot);

        match self {
            Self::Unknown(ordinal) => {
                return Err(::fidl::encode::Error::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<EmptyResourceUnion> {
    type EncodedOption<'buf> = WireOptionalEmptyResourceUnion<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalEmptyResourceUnion { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireEmptyResourceUnion<'buf>> for EmptyResourceUnion {
    fn take_from(from: &mut WireEmptyResourceUnion<'buf>) -> Self {
        match from.raw.ordinal() {
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalEmptyResourceUnion<'buf>>
    for Option<Box<EmptyResourceUnion>>
{
    fn take_from(from: &mut WireOptionalEmptyResourceUnion<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireEmptyResourceUnion<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireEmptyResourceUnionRef {
    Unknown(u64),
}

pub enum WireEmptyResourceUnionMut {
    Unknown(u64),
}

impl WireEmptyResourceUnion<'_> {
    pub fn as_ref(&self) -> WireEmptyResourceUnionRef {
        match self.raw.ordinal() {
            unknown => WireEmptyResourceUnionRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireEmptyResourceUnionMut {
        match self.raw.ordinal() {
            unknown => WireEmptyResourceUnionMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireEmptyResourceUnion<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireEmptyResourceUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalEmptyResourceUnion<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalEmptyResourceUnion<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireEmptyResourceUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireEmptyResourceUnion<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireEmptyResourceUnion<'buf>> {
        if self.is_some() {
            Some(WireEmptyResourceUnion {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalEmptyResourceUnion<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalEmptyResourceUnion<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalEmptyResourceUnion<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum obj_type {
    None = 0,
    Vmo = 3,
}

impl ::fidl::Encode for obj_type {
    type Encoded<'buf> = Wireobj_type;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let Wireobj_type { mut value } = slot);
        *value = ::fidl::u32_le::from(match *self {
            obj_type::None => 0,
            obj_type::Vmo => 3,
        });

        Ok(())
    }
}

impl ::core::convert::From<Wireobj_type> for obj_type {
    fn from(wire: Wireobj_type) -> Self {
        match u32::from(wire.value) {
            0 => obj_type::None,
            3 => obj_type::Vmo,
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl::TakeFrom<Wireobj_type> for obj_type {
    fn take_from(from: &mut Wireobj_type) -> Self {
        obj_type::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct Wireobj_type {
    value: ::fidl::u32_le,
}

impl Wireobj_type {
    pub const NONE: Wireobj_type = Wireobj_type { value: ::fidl::u32_le::from_native(0) };
    pub const VMO: Wireobj_type = Wireobj_type { value: ::fidl::u32_le::from_native(3) };
}

unsafe impl<'buf> ::fidl::Decode<'buf> for Wireobj_type {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { value } = slot);

        match u32::from(*value) {
            0 | 3 => (),
            unknown => return Err(::fidl::decode::Error::InvalidEnumOrdinal(unknown as usize)),
        }

        Ok(())
    }
}

impl ::core::convert::From<obj_type> for Wireobj_type {
    fn from(natural: obj_type) -> Self {
        match natural {
            obj_type::None => Wireobj_type::NONE,
            obj_type::Vmo => Wireobj_type::VMO,
        }
    }
}

#[derive(Debug)]
pub struct TableWithHandle {
    pub h: Option<Option<::fidl::Handle>>,
}

impl TableWithHandle {
    fn __max_ordinal(&self) -> usize {
        if self.h.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl::Encode for TableWithHandle {
    type Encoded<'buf> = WireTableWithHandle<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireTableWithHandle { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl::WireEnvelope<'_>>::uninit();
        let mut preallocated = encoder.preallocate::<::fidl::WireEnvelope<'_>>(max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(h) = &mut self.h {
                        ::fidl::WireEnvelope::encode_value(h, preallocated.encoder, slot.as_mut())?;
                    } else {
                        ::fidl::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireTableWithHandle<'buf>> for TableWithHandle {
    fn take_from(from: &mut WireTableWithHandle<'buf>) -> Self {
        Self { h: from.h_mut().map(::fidl::TakeFrom::take_from) }
    }
}

#[repr(C)]
pub struct WireTableWithHandle<'buf> {
    table: ::fidl::WireTable<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireTableWithHandle<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { table } = slot);

        ::fidl::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| match ordinal {
            0 => unsafe { ::core::hint::unreachable_unchecked() },

            1 => {
                ::fidl::WireEnvelope::decode_as::<::fidl::WireHandle>(slot.as_mut(), decoder)?;

                let h = unsafe { slot.deref_unchecked().deref_unchecked::<::fidl::WireHandle>() };

                if h.as_raw_handle().is_none() {
                    return Err(::fidl::decode::Error::RequiredValueAbsent);
                }

                Ok(())
            }

            _ => ::fidl::WireEnvelope::decode_unknown(slot, decoder),
        })
    }
}

impl<'buf> WireTableWithHandle<'buf> {
    pub fn h(&self) -> Option<&::fidl::WireHandle> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn h_mut(&mut self) -> Option<&mut ::fidl::WireHandle> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_h(&mut self) -> Option<::fidl::WireHandle> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTableWithHandle<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("TableWithHandle").field("h", &self.h()).finish()
    }
}

#[derive(Debug)]

pub enum UnionWithHandle {
    H(Option<::fidl::Handle>),
    Unknown(u64),
}

impl ::fidl::Encode for UnionWithHandle {
    type Encoded<'buf> = WireUnionWithHandle<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireUnionWithHandle { raw } = slot);

        match self {
            Self::H(value) => {
                ::fidl::RawWireUnion::encode_as::<Option<::fidl::Handle>>(value, 1, encoder, raw)?
            }

            Self::Unknown(ordinal) => {
                return Err(::fidl::encode::Error::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<UnionWithHandle> {
    type EncodedOption<'buf> = WireOptionalUnionWithHandle<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalUnionWithHandle { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireUnionWithHandle<'buf>> for UnionWithHandle {
    fn take_from(from: &mut WireUnionWithHandle<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::H(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalUnionWithHandle<'buf>> for Option<Box<UnionWithHandle>> {
    fn take_from(from: &mut WireOptionalUnionWithHandle<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionWithHandle<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireUnionWithHandleRef<'buf> {
    H(&'buf ::fidl::WireHandle),
    Unknown(u64),
}

pub enum WireUnionWithHandleMut<'buf> {
    H(&'buf mut ::fidl::WireHandle),
    Unknown(u64),
}

impl WireUnionWithHandle<'_> {
    pub fn as_ref(&self) -> WireUnionWithHandleRef<'_> {
        match self.raw.ordinal() {
            1 => WireUnionWithHandleRef::H(unsafe { self.raw.get().deref_unchecked() }),
            unknown => WireUnionWithHandleRef::Unknown(unknown),
        }
    }

    pub fn as_mut(&mut self) -> WireUnionWithHandleMut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionWithHandleMut::H(unsafe { self.raw.get_mut().deref_mut_unchecked() }),
            unknown => WireUnionWithHandleMut::Unknown(unknown),
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireUnionWithHandle<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::WireHandle>(raw, decoder)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionWithHandle<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl::WireHandle>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionWithHandle<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionWithHandle<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionWithHandle<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionWithHandle<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionWithHandle<'buf>> {
        if self.is_some() {
            Some(WireUnionWithHandle {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionWithHandle<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalUnionWithHandle<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::WireHandle>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionWithHandle<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Debug)]
pub struct HandlesInTypes {
    pub normal_handle: Option<::fidl::Handle>,
    pub handle_in_vec: Vec<Option<::fidl::Handle>>,
    pub handle_in_array: [Option<::fidl::Handle>; 5],
    pub handle_in_mixed_vec_array: Vec<[Option<::fidl::Handle>; 5]>,
    pub table_with_handle: crate::TableWithHandle,
    pub union_with_handle: crate::UnionWithHandle,
}

impl ::fidl::Encode for HandlesInTypes {
    type Encoded<'buf> = WireHandlesInTypes<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                normal_handle,
                handle_in_vec,
                handle_in_array,
                handle_in_mixed_vec_array,
                table_with_handle,
                union_with_handle,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.normal_handle, encoder, normal_handle)?;
        ::fidl::Encode::encode(&mut self.handle_in_vec, encoder, handle_in_vec)?;
        ::fidl::Encode::encode(&mut self.handle_in_array, encoder, handle_in_array)?;
        ::fidl::Encode::encode(
            &mut self.handle_in_mixed_vec_array,
            encoder,
            handle_in_mixed_vec_array,
        )?;
        ::fidl::Encode::encode(&mut self.table_with_handle, encoder, table_with_handle)?;
        ::fidl::Encode::encode(&mut self.union_with_handle, encoder, union_with_handle)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<HandlesInTypes> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireHandlesInTypes<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireHandlesInTypes<'buf>> for HandlesInTypes {
    fn take_from(from: &mut WireHandlesInTypes<'buf>) -> Self {
        Self {
            normal_handle: ::fidl::TakeFrom::take_from(&mut from.normal_handle),
            handle_in_vec: ::fidl::TakeFrom::take_from(&mut from.handle_in_vec),
            handle_in_array: ::fidl::TakeFrom::take_from(&mut from.handle_in_array),
            handle_in_mixed_vec_array: ::fidl::TakeFrom::take_from(
                &mut from.handle_in_mixed_vec_array,
            ),
            table_with_handle: ::fidl::TakeFrom::take_from(&mut from.table_with_handle),
            union_with_handle: ::fidl::TakeFrom::take_from(&mut from.union_with_handle),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireHandlesInTypes<'buf> {
    pub normal_handle: ::fidl::WireHandle,
    pub handle_in_vec: ::fidl::WireVector<'buf, ::fidl::WireHandle>,
    pub handle_in_array: [::fidl::WireHandle; 5],
    pub handle_in_mixed_vec_array: ::fidl::WireVector<'buf, [::fidl::WireHandle; 5]>,
    pub table_with_handle: crate::WireTableWithHandle<'buf>,
    pub union_with_handle: crate::WireUnionWithHandle<'buf>,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireHandlesInTypes<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut normal_handle,
                mut handle_in_vec,
                mut handle_in_array,
                mut handle_in_mixed_vec_array,
                mut table_with_handle,
                mut union_with_handle,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(normal_handle.as_mut(), decoder)?;
        let normal_handle = unsafe { normal_handle.deref_unchecked() };

        if normal_handle.as_raw_handle().is_none() {
            return Err(::fidl::decode::Error::RequiredValueAbsent);
        }

        ::fidl::Decode::<'buf>::decode(handle_in_vec.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(handle_in_array.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(handle_in_mixed_vec_array.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(table_with_handle.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(union_with_handle.as_mut(), decoder)?;
        Ok(())
    }
}
