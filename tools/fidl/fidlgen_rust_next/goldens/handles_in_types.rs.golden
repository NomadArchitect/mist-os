// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Debug)]
pub struct EmptyResourceStruct {}

impl ::fidl_next::Encodable for EmptyResourceStruct {
    type Encoded<'buf> = WireEmptyResourceStruct;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyResourceStruct {
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {

            } = slot;
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<EmptyResourceStruct> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireEmptyResourceStruct>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<EmptyResourceStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyResourceStruct: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireEmptyResourceStruct> for EmptyResourceStruct {
    fn take_from(from: &mut WireEmptyResourceStruct) -> Self {
        Self {}
    }
}

/// The wire type corersponding to [`EmptyResourceStruct`].
#[derive(Debug)]
#[repr(C)]
pub struct WireEmptyResourceStruct {}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyResourceStruct
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {

            } = slot;
        }

        Ok(())
    }
}

#[derive(Debug)]
pub struct EmptyResourceTable {}

impl EmptyResourceTable {
    fn __max_ordinal(&self) -> usize {
        0
    }
}

impl ::fidl_next::Encodable for EmptyResourceTable {
    type Encoded<'buf> = WireEmptyResourceTable<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyResourceTable
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireEmptyResourceTable { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireEmptyResourceTable<'buf>> for EmptyResourceTable {
    fn take_from(from: &mut WireEmptyResourceTable<'buf>) -> Self {
        Self {}
    }
}

/// The wire type corresponding to [`EmptyResourceTable`].
#[repr(C)]
pub struct WireEmptyResourceTable<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireEmptyResourceTable<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireEmptyResourceTable<'buf> {}

impl ::core::fmt::Debug for WireEmptyResourceTable<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("EmptyResourceTable").finish()
    }
}

#[derive(Debug)]
pub enum EmptyResourceUnion {
    UnknownOrdinal(u64),
}

impl ::fidl_next::Encodable for EmptyResourceUnion {
    type Encoded<'buf> = WireEmptyResourceUnion;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyResourceUnion
where
    ___E: ::fidl_next::Encoder + ?Sized,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireEmptyResourceUnion { raw, _phantom: _ } = slot);

        match self {
            Self::UnknownOrdinal(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<EmptyResourceUnion> {
    type EncodedOption<'buf> = WireOptionalEmptyResourceUnion;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<EmptyResourceUnion>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    EmptyResourceUnion: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalEmptyResourceUnion { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireEmptyResourceUnion> for EmptyResourceUnion {
    fn take_from(from: &mut WireEmptyResourceUnion) -> Self {
        match from.raw.ordinal() {
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalEmptyResourceUnion> for Option<Box<EmptyResourceUnion>> {
    fn take_from(from: &mut WireOptionalEmptyResourceUnion) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`EmptyResourceUnion`].
#[repr(transparent)]
pub struct WireEmptyResourceUnion {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod empty_resource_union {
    pub enum Ref {
        UnknownOrdinal(u64),
    }

    pub enum Mut {
        UnknownOrdinal(u64),
    }
}

impl WireEmptyResourceUnion {
    pub fn as_ref(&self) -> crate::empty_resource_union::Ref {
        match self.raw.ordinal() {
            unknown => crate::empty_resource_union::Ref::UnknownOrdinal(unknown),
        }
    }

    pub fn as_mut(&mut self) -> crate::empty_resource_union::Mut {
        match self.raw.ordinal() {
            unknown => crate::empty_resource_union::Mut::UnknownOrdinal(unknown),
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireEmptyResourceUnion
where
    ___D: fidl_next::decoder::InternalHandleDecoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireEmptyResourceUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalEmptyResourceUnion {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalEmptyResourceUnion {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireEmptyResourceUnion> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireEmptyResourceUnion> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireEmptyResourceUnion> {
        if self.is_some() {
            Some(WireEmptyResourceUnion {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalEmptyResourceUnion {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalEmptyResourceUnion
where
    ___D: fidl_next::decoder::InternalHandleDecoder,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalEmptyResourceUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum ObjType {
    None = 0,
    Vmo = 3,
}

impl ::fidl_next::Encodable for ObjType {
    type Encoded<'buf> = WireObjType;
}

impl<___E> ::fidl_next::Encode<___E> for ObjType
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireObjType { mut value } = slot);
        *value = ::fidl_next::u32_le::from(match *self {
            Self::None => 0,

            Self::Vmo => 3,
        });

        Ok(())
    }
}

impl ::core::convert::From<WireObjType> for ObjType {
    fn from(wire: WireObjType) -> Self {
        match u32::from(wire.value) {
            0 => Self::None,

            3 => Self::Vmo,

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireObjType> for ObjType {
    fn take_from(from: &mut WireObjType) -> Self {
        Self::from(*from)
    }
}

/// The wire type corresponding to [`ObjType`].
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(transparent)]
pub struct WireObjType {
    value: ::fidl_next::u32_le,
}

impl WireObjType {
    pub const NONE: WireObjType = WireObjType { value: ::fidl_next::u32_le::from_native(0) };

    pub const VMO: WireObjType = WireObjType { value: ::fidl_next::u32_le::from_native(3) };
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireObjType
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);

        match u32::from(*value) {
            0 | 3 => (),
            unknown => return Err(::fidl_next::DecodeError::InvalidEnumOrdinal(unknown as i128)),
        }

        Ok(())
    }
}

impl ::core::convert::From<ObjType> for WireObjType {
    fn from(natural: ObjType) -> Self {
        match natural {
            ObjType::None => WireObjType::NONE,

            ObjType::Vmo => WireObjType::VMO,
        }
    }
}

#[derive(Debug)]
pub struct TableWithHandle {
    pub h: Option<::fidl_next::zx::Handle>,
}

impl TableWithHandle {
    fn __max_ordinal(&self) -> usize {
        if self.h.is_some() {
            return 1;
        }

        0
    }
}

impl ::fidl_next::Encodable for TableWithHandle {
    type Encoded<'buf> = WireTableWithHandle<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for TableWithHandle
where
    ___E: ::fidl_next::Encoder + ?Sized,

    ::fidl_next::zx::Handle: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireTableWithHandle { table } = slot);

        let max_ord = self.__max_ordinal();

        let mut backing = ::core::mem::MaybeUninit::<::fidl_next::WireEnvelope>::uninit();
        let mut preallocated =
            ::fidl_next::EncoderExt::preallocate::<::fidl_next::WireEnvelope>(encoder, max_ord);

        for i in 1..=max_ord {
            let mut slot = ::fidl_next::Slot::new(&mut backing);
            match i {
                1 => {
                    if let Some(h) = &mut self.h {
                        ::fidl_next::WireEnvelope::encode_value(
                            h,
                            preallocated.encoder,
                            slot.as_mut(),
                        )?;
                    } else {
                        ::fidl_next::WireEnvelope::encode_zero(slot.as_mut())
                    }
                }

                _ => ::fidl_next::WireEnvelope::encode_zero(slot.as_mut()),
            }
            preallocated.write_next(slot);
        }

        ::fidl_next::WireTable::encode_len(table, max_ord);

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireTableWithHandle<'buf>> for TableWithHandle {
    fn take_from(from: &mut WireTableWithHandle<'buf>) -> Self {
        Self { h: from.h_mut().map(::fidl_next::TakeFrom::take_from) }
    }
}

/// The wire type corresponding to [`TableWithHandle`].
#[repr(C)]
pub struct WireTableWithHandle<'buf> {
    table: ::fidl_next::WireTable<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireTableWithHandle<'buf>
where
    ___D: ::fidl_next::Decoder<'buf> + ?Sized,

    ::fidl_next::WireHandle: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { table } = slot);

        ::fidl_next::WireTable::decode_with(table, decoder, |ordinal, mut slot, decoder| {
            match ordinal {
                0 => unsafe { ::core::hint::unreachable_unchecked() },

                1 => {
                    ::fidl_next::WireEnvelope::decode_as::<___D, ::fidl_next::WireHandle>(
                        slot.as_mut(),
                        decoder,
                    )?;

                    Ok(())
                }

                _ => ::fidl_next::WireEnvelope::decode_unknown(slot, decoder),
            }
        })
    }
}

impl<'buf> WireTableWithHandle<'buf> {
    pub fn h(&self) -> Option<&::fidl_next::WireHandle> {
        unsafe { Some(self.table.get(1)?.deref_unchecked()) }
    }

    pub fn h_mut(&mut self) -> Option<&mut ::fidl_next::WireHandle> {
        unsafe { Some(self.table.get_mut(1)?.deref_mut_unchecked()) }
    }

    pub fn take_h(&mut self) -> Option<::fidl_next::WireHandle> {
        unsafe { Some(self.table.get_mut(1)?.take_unchecked()) }
    }
}

impl ::core::fmt::Debug for WireTableWithHandle<'_> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> Result<(), ::core::fmt::Error> {
        f.debug_struct("TableWithHandle").field("h", &self.h()).finish()
    }
}

#[derive(Debug)]
pub enum UnionWithHandle {
    H(::fidl_next::zx::Handle),

    UnknownOrdinal(u64),
}

impl ::fidl_next::Encodable for UnionWithHandle {
    type Encoded<'buf> = WireUnionWithHandle;
}

impl<___E> ::fidl_next::Encode<___E> for UnionWithHandle
where
    ___E: ::fidl_next::Encoder + ?Sized,

    ::fidl_next::zx::Handle: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionWithHandle { raw, _phantom: _ } = slot);

        match self {
            Self::H(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, ::fidl_next::zx::Handle>(
                    value, 1, encoder, raw,
                )?
            }

            Self::UnknownOrdinal(ordinal) => {
                return Err(::fidl_next::EncodeError::UnknownUnionOrdinal(*ordinal as usize))
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionWithHandle> {
    type EncodedOption<'buf> = WireOptionalUnionWithHandle;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionWithHandle>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionWithHandle: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionWithHandle { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireUnionWithHandle> for UnionWithHandle {
    fn take_from(from: &mut WireUnionWithHandle) -> Self {
        match from.raw.ordinal() {
            1 => Self::H(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalUnionWithHandle> for Option<Box<UnionWithHandle>> {
    fn take_from(from: &mut WireOptionalUnionWithHandle) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionWithHandle`].
#[repr(transparent)]
pub struct WireUnionWithHandle {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod union_with_handle {
    pub enum Ref<'union> {
        H(&'union ::fidl_next::WireHandle),

        UnknownOrdinal(u64),
    }

    pub enum Mut<'union> {
        H(&'union mut ::fidl_next::WireHandle),

        UnknownOrdinal(u64),
    }
}

impl WireUnionWithHandle {
    pub fn as_ref(&self) -> crate::union_with_handle::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_with_handle::Ref::H(unsafe { self.raw.get().deref_unchecked() }),

            unknown => crate::union_with_handle::Ref::UnknownOrdinal(unknown),
        }
    }

    pub fn as_mut(&mut self) -> crate::union_with_handle::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::union_with_handle::Mut::H(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            unknown => crate::union_with_handle::Mut::UnknownOrdinal(unknown),
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireUnionWithHandle
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::WireHandle: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireHandle>(
                raw, decoder,
            )?,

            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionWithHandle {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::WireHandle>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionWithHandle {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalUnionWithHandle {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionWithHandle> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionWithHandle> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionWithHandle> {
        if self.is_some() {
            Some(WireUnionWithHandle {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalUnionWithHandle {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalUnionWithHandle
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::WireHandle: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::WireHandle>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionWithHandle {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Debug)]
pub struct HandlesInTypes {
    pub normal_handle: ::fidl_next::zx::Handle,

    pub handle_in_vec: Vec<::fidl_next::zx::Handle>,

    pub handle_in_array: [::fidl_next::zx::Handle; 5],

    pub handle_in_mixed_vec_array: Vec<[::fidl_next::zx::Handle; 5]>,

    pub table_with_handle: crate::TableWithHandle,

    pub union_with_handle: crate::UnionWithHandle,
}

impl ::fidl_next::Encodable for HandlesInTypes {
    type Encoded<'buf> = WireHandlesInTypes<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for HandlesInTypes
where
    ::fidl_next::zx::Handle: ::fidl_next::Encode<___E>,

    Vec<::fidl_next::zx::Handle>: ::fidl_next::Encode<___E>,

    [::fidl_next::zx::Handle; 5]: ::fidl_next::Encode<___E>,

    Vec<[::fidl_next::zx::Handle; 5]>: ::fidl_next::Encode<___E>,

    crate::TableWithHandle: ::fidl_next::Encode<___E>,

    crate::UnionWithHandle: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                normal_handle,
                handle_in_vec,
                handle_in_array,
                handle_in_mixed_vec_array,
                table_with_handle,
                union_with_handle,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.normal_handle, encoder, normal_handle)?;

        ::fidl_next::Encode::encode(&mut self.handle_in_vec, encoder, handle_in_vec)?;

        ::fidl_next::Encode::encode(&mut self.handle_in_array, encoder, handle_in_array)?;

        ::fidl_next::Encode::encode(
            &mut self.handle_in_mixed_vec_array,
            encoder,
            handle_in_mixed_vec_array,
        )?;

        ::fidl_next::Encode::encode(&mut self.table_with_handle, encoder, table_with_handle)?;

        ::fidl_next::Encode::encode(&mut self.union_with_handle, encoder, union_with_handle)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<HandlesInTypes> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireHandlesInTypes<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<HandlesInTypes>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    HandlesInTypes: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireHandlesInTypes<'buf>> for HandlesInTypes {
    fn take_from(from: &mut WireHandlesInTypes<'buf>) -> Self {
        Self {
            normal_handle: ::fidl_next::TakeFrom::take_from(&mut from.normal_handle),

            handle_in_vec: ::fidl_next::TakeFrom::take_from(&mut from.handle_in_vec),

            handle_in_array: ::fidl_next::TakeFrom::take_from(&mut from.handle_in_array),

            handle_in_mixed_vec_array: ::fidl_next::TakeFrom::take_from(
                &mut from.handle_in_mixed_vec_array,
            ),

            table_with_handle: ::fidl_next::TakeFrom::take_from(&mut from.table_with_handle),

            union_with_handle: ::fidl_next::TakeFrom::take_from(&mut from.union_with_handle),
        }
    }
}

/// The wire type corersponding to [`HandlesInTypes`].
#[derive(Debug)]
#[repr(C)]
pub struct WireHandlesInTypes<'buf> {
    pub normal_handle: ::fidl_next::WireHandle,

    pub handle_in_vec: ::fidl_next::WireVector<'buf, ::fidl_next::WireHandle>,

    pub handle_in_array: [::fidl_next::WireHandle; 5],

    pub handle_in_mixed_vec_array: ::fidl_next::WireVector<'buf, [::fidl_next::WireHandle; 5]>,

    pub table_with_handle: crate::WireTableWithHandle<'buf>,

    pub union_with_handle: crate::WireUnionWithHandle,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireHandlesInTypes<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireHandle: ::fidl_next::Decode<___D>,

    ::fidl_next::WireVector<'buf, ::fidl_next::WireHandle>: ::fidl_next::Decode<___D>,

    [::fidl_next::WireHandle; 5]: ::fidl_next::Decode<___D>,

    ::fidl_next::WireVector<'buf, [::fidl_next::WireHandle; 5]>: ::fidl_next::Decode<___D>,

    crate::WireTableWithHandle<'buf>: ::fidl_next::Decode<___D>,

    crate::WireUnionWithHandle: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut normal_handle,
                mut handle_in_vec,
                mut handle_in_array,
                mut handle_in_mixed_vec_array,
                mut table_with_handle,
                mut union_with_handle,

            } = slot;
        }

        ::fidl_next::Decode::decode(normal_handle.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(handle_in_vec.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(handle_in_array.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(handle_in_mixed_vec_array.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(table_with_handle.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(union_with_handle.as_mut(), decoder)?;

        Ok(())
    }
}
