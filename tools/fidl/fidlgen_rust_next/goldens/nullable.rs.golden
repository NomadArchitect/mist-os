// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub struct Int32Wrapper {
    pub val: i32,
}

impl ::fidl_next::Encodable for Int32Wrapper {
    type Encoded<'buf> = WireInt32Wrapper;
}

impl<___E> ::fidl_next::Encode<___E> for Int32Wrapper
where
    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<Int32Wrapper> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireInt32Wrapper>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<Int32Wrapper>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    Int32Wrapper: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireInt32Wrapper> for Int32Wrapper {
    fn take_from(from: &mut WireInt32Wrapper) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`Int32Wrapper`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireInt32Wrapper {
    pub val: ::fidl_next::i32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireInt32Wrapper
where
    ___D: ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct SimpleProtocolAddRequest {
    pub a: i32,

    pub b: i32,
}

impl ::fidl_next::Encodable for SimpleProtocolAddRequest {
    type Encoded<'buf> = WireSimpleProtocolAddRequest;
}

impl<___E> ::fidl_next::Encode<___E> for SimpleProtocolAddRequest
where
    i32: ::fidl_next::Encode<___E>,

    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                a,
                b,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.a, encoder, a)?;

        ::fidl_next::Encode::encode(&mut self.b, encoder, b)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SimpleProtocolAddRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSimpleProtocolAddRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SimpleProtocolAddRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SimpleProtocolAddRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimpleProtocolAddRequest> for SimpleProtocolAddRequest {
    fn take_from(from: &mut WireSimpleProtocolAddRequest) -> Self {
        Self {
            a: ::fidl_next::TakeFrom::take_from(&mut from.a),

            b: ::fidl_next::TakeFrom::take_from(&mut from.b),
        }
    }
}

/// The wire type corersponding to [`SimpleProtocolAddRequest`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSimpleProtocolAddRequest {
    pub a: ::fidl_next::i32_le,

    pub b: ::fidl_next::i32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSimpleProtocolAddRequest
where
    ___D: ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut a,
                mut b,

            } = slot;
        }

        ::fidl_next::Decode::decode(a.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(b.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct SimpleProtocolAddResponse {
    pub sum: i32,
}

impl ::fidl_next::Encodable for SimpleProtocolAddResponse {
    type Encoded<'buf> = WireSimpleProtocolAddResponse;
}

impl<___E> ::fidl_next::Encode<___E> for SimpleProtocolAddResponse
where
    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                sum,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.sum, encoder, sum)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SimpleProtocolAddResponse> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSimpleProtocolAddResponse>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SimpleProtocolAddResponse>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SimpleProtocolAddResponse: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimpleProtocolAddResponse> for SimpleProtocolAddResponse {
    fn take_from(from: &mut WireSimpleProtocolAddResponse) -> Self {
        Self { sum: ::fidl_next::TakeFrom::take_from(&mut from.sum) }
    }
}

/// The wire type corersponding to [`SimpleProtocolAddResponse`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSimpleProtocolAddResponse {
    pub sum: ::fidl_next::i32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSimpleProtocolAddResponse
where
    ___D: ?Sized,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut sum,

            } = slot;
        }

        ::fidl_next::Decode::decode(sum.as_mut(), decoder)?;

        Ok(())
    }
}

/// The type corresponding to the SimpleProtocol protocol.
#[derive(Debug)]
pub struct SimpleProtocol;

pub mod simple_protocol {

    pub struct Add;

    impl ::fidl_next::bind::Method for Add {
        const ORDINAL: u64 = 9142761280038437494;

        type Protocol = crate::SimpleProtocol;

        type Request<'buf> = crate::WireSimpleProtocolAddRequest;

        type Response<'buf> = crate::WireSimpleProtocolAddResponse;
    }
}

/// A helper trait for the `SimpleProtocol` client sender.
pub trait SimpleProtocolClientSender<___T: ::fidl_next::protocol::Transport> {
    fn add<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::ResponseFuture<'_, ___T, simple_protocol::Add>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireSimpleProtocolAddRequest,
        >;
}

impl<___T> SimpleProtocolClientSender<___T>
    for ::fidl_next::bind::ClientSender<___T, SimpleProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
    fn add<___R>(
        &self,
        request: &mut ___R,
    ) -> Result<
        ::fidl_next::bind::ResponseFuture<'_, ___T, simple_protocol::Add>,
        ::fidl_next::EncodeError,
    >
    where
        for<'buf> ___R: ::fidl_next::Encode<
            ___T::Encoder<'buf>,
            Encoded<'buf> = crate::WireSimpleProtocolAddRequest,
        >,
    {
        self.as_untyped()
            .send_two_way(9142761280038437494, request)
            .map(::fidl_next::bind::ResponseFuture::from_untyped)
    }
}

/// A client handler for the SimpleProtocol protocol.
///
/// See [`SimpleProtocol`] for more details.
pub trait SimpleProtocolClientHandler<___T: ::fidl_next::protocol::Transport> {}

impl<___T, ___H> ::fidl_next::bind::ClientProtocol<___T, ___H> for SimpleProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: SimpleProtocolClientHandler<___T>,

    for<'buf> crate::WireSimpleProtocolAddResponse:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_event(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ClientSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }
}

/// A helper trait for the `SimpleProtocol` server sender.
pub trait SimpleProtocolServerSender<___T: ::fidl_next::protocol::Transport> {}

impl<___T> SimpleProtocolServerSender<___T>
    for ::fidl_next::bind::ServerSender<___T, SimpleProtocol>
where
    ___T: ::fidl_next::protocol::Transport,
{
}

/// A server handler for the SimpleProtocol protocol.
///
/// See [`SimpleProtocol`] for more details.
pub trait SimpleProtocolServerHandler<___T: ::fidl_next::protocol::Transport> {
    fn add(
        &mut self,
        sender: &::fidl_next::bind::ServerSender<___T, SimpleProtocol>,

        request: ::fidl_next::bind::RequestBuffer<___T, simple_protocol::Add>,

        responder: ::fidl_next::bind::Responder<simple_protocol::Add>,
    );
}

impl<___T, ___H> ::fidl_next::bind::ServerProtocol<___T, ___H> for SimpleProtocol
where
    ___T: ::fidl_next::protocol::Transport,
    ___H: SimpleProtocolServerHandler<___T>,

    for<'buf> crate::WireSimpleProtocolAddRequest:
        ::fidl_next::Decode<<___T as ::fidl_next::protocol::Transport>::Decoder<'buf>>,
{
    fn on_one_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
    ) {
        match ordinal {
            ordinal => {
                sender.close();
            }
        }
    }

    fn on_two_way(
        handler: &mut ___H,
        sender: &::fidl_next::bind::ServerSender<___T, Self>,
        ordinal: u64,
        buffer: ___T::RecvBuffer,
        responder: ::fidl_next::protocol::Responder,
    ) {
        match ordinal {
            9142761280038437494 => {
                let responder = ::fidl_next::bind::Responder::from_untyped(responder);

                let buffer = ::fidl_next::bind::RequestBuffer::from_untyped(buffer);
                handler.add(sender, buffer, responder);
            }

            ordinal => {
                sender.close();
            }
        }
    }
}

#[derive(Clone, Debug)]
pub enum SimpleUnion {
    A(i32),

    B(f32),
}

impl ::fidl_next::Encodable for SimpleUnion {
    type Encoded<'buf> = WireSimpleUnion;
}

impl<___E> ::fidl_next::Encode<___E> for SimpleUnion
where
    ___E: ::fidl_next::Encoder + ?Sized,

    i32: ::fidl_next::Encode<___E>,

    f32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireSimpleUnion { raw, _phantom: _ } = slot);

        match self {
            Self::A(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, i32>(value, 1, encoder, raw)?
            }

            Self::B(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, f32>(value, 2, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SimpleUnion> {
    type EncodedOption<'buf> = WireOptionalSimpleUnion;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SimpleUnion>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SimpleUnion: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalSimpleUnion { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSimpleUnion> for SimpleUnion {
    fn take_from(from: &mut WireSimpleUnion) -> Self {
        match from.raw.ordinal() {
            1 => Self::A(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            2 => Self::B(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalSimpleUnion> for Option<Box<SimpleUnion>> {
    fn take_from(from: &mut WireOptionalSimpleUnion) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`SimpleUnion`].
#[repr(transparent)]
pub struct WireSimpleUnion {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod simple_union {
    pub enum Ref<'union> {
        A(&'union ::fidl_next::i32_le),

        B(&'union ::fidl_next::f32_le),
    }

    pub enum Mut<'union> {
        A(&'union mut ::fidl_next::i32_le),

        B(&'union mut ::fidl_next::f32_le),
    }
}

impl WireSimpleUnion {
    pub fn as_ref(&self) -> crate::simple_union::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::simple_union::Ref::A(unsafe { self.raw.get().deref_unchecked() }),

            2 => crate::simple_union::Ref::B(unsafe { self.raw.get().deref_unchecked() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::simple_union::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::simple_union::Mut::A(unsafe { self.raw.get_mut().deref_mut_unchecked() }),

            2 => crate::simple_union::Mut::B(unsafe { self.raw.get_mut().deref_mut_unchecked() }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireSimpleUnion {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::i32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            2 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::f32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireSimpleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,

    ::fidl_next::f32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::i32_le>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::f32_le>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireSimpleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::i32_le>().fmt(f) },
            2 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::f32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalSimpleUnion {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalSimpleUnion {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireSimpleUnion> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireSimpleUnion> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireSimpleUnion> {
        if self.is_some() {
            Some(WireSimpleUnion {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalSimpleUnion {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

impl Clone for WireOptionalSimpleUnion {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalSimpleUnion {
                raw: ::fidl_next::RawWireUnion::null(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::i32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            2 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::f32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalSimpleUnion
where
    ___D: ::fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,

    ::fidl_next::f32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::i32_le>(
                raw, decoder,
            )?,

            2 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::f32_le>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalSimpleUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Debug)]
pub struct StructWithNullableHandle {
    pub val: Option<::fidl_next::zx::Handle>,
}

impl ::fidl_next::Encodable for StructWithNullableHandle {
    type Encoded<'buf> = WireStructWithNullableHandle;
}

impl<___E> ::fidl_next::Encode<___E> for StructWithNullableHandle
where
    Option<::fidl_next::zx::Handle>: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableHandle> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructWithNullableHandle>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableHandle>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableHandle: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableHandle> for StructWithNullableHandle {
    fn take_from(from: &mut WireStructWithNullableHandle) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`StructWithNullableHandle`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableHandle {
    pub val: ::fidl_next::WireOptionalHandle,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableHandle
where
    ___D: ?Sized,

    ::fidl_next::WireOptionalHandle: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
pub struct StructWithNullableProtocol {
    pub val: ::fidl_next::bind::ClientEnd<Option<::fidl_next::zx::Handle>, crate::SimpleProtocol>,
}

impl ::fidl_next::Encodable for StructWithNullableProtocol {
    type Encoded<'buf> = WireStructWithNullableProtocol;
}

impl<___E> ::fidl_next::Encode<___E> for StructWithNullableProtocol
where
    ::fidl_next::bind::ClientEnd<Option<::fidl_next::zx::Handle>, crate::SimpleProtocol>:
        ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableProtocol> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructWithNullableProtocol>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableProtocol>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableProtocol: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableProtocol> for StructWithNullableProtocol {
    fn take_from(from: &mut WireStructWithNullableProtocol) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`StructWithNullableProtocol`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableProtocol {
    pub val: ::fidl_next::bind::ClientEnd<::fidl_next::WireOptionalHandle, crate::SimpleProtocol>,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableProtocol
where
    ___D: ?Sized,

    ::fidl_next::bind::ClientEnd<::fidl_next::WireOptionalHandle, crate::SimpleProtocol>:
        ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Debug)]
pub struct StructWithNullableRequest {
    pub val: ::fidl_next::bind::ServerEnd<Option<::fidl_next::zx::Handle>, crate::SimpleProtocol>,
}

impl ::fidl_next::Encodable for StructWithNullableRequest {
    type Encoded<'buf> = WireStructWithNullableRequest;
}

impl<___E> ::fidl_next::Encode<___E> for StructWithNullableRequest
where
    ::fidl_next::bind::ServerEnd<Option<::fidl_next::zx::Handle>, crate::SimpleProtocol>:
        ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableRequest> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructWithNullableRequest>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableRequest>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableRequest: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableRequest> for StructWithNullableRequest {
    fn take_from(from: &mut WireStructWithNullableRequest) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`StructWithNullableRequest`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableRequest {
    pub val: ::fidl_next::bind::ServerEnd<::fidl_next::WireOptionalHandle, crate::SimpleProtocol>,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableRequest
where
    ___D: ?Sized,

    ::fidl_next::bind::ServerEnd<::fidl_next::WireOptionalHandle, crate::SimpleProtocol>:
        ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructWithNullableString {
    pub val: Option<String>,
}

impl ::fidl_next::Encodable for StructWithNullableString {
    type Encoded<'buf> = WireStructWithNullableString<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for StructWithNullableString
where
    Option<String>: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableString> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructWithNullableString<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableString>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableString: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireStructWithNullableString<'buf>> for StructWithNullableString {
    fn take_from(from: &mut WireStructWithNullableString<'buf>) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`StructWithNullableString`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableString<'buf> {
    pub val: ::fidl_next::WireOptionalString<'buf>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireStructWithNullableString<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireOptionalString<'buf>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructWithNullableStruct {
    pub val: Option<Box<crate::Int32Wrapper>>,
}

impl ::fidl_next::Encodable for StructWithNullableStruct {
    type Encoded<'buf> = WireStructWithNullableStruct<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for StructWithNullableStruct
where
    Option<Box<crate::Int32Wrapper>>: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableStruct> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructWithNullableStruct<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableStruct>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableStruct: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireStructWithNullableStruct<'buf>> for StructWithNullableStruct {
    fn take_from(from: &mut WireStructWithNullableStruct<'buf>) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`StructWithNullableStruct`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableStruct<'buf> {
    pub val: ::fidl_next::WireBox<'buf, crate::WireInt32Wrapper>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireStructWithNullableStruct<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireBox<'buf, crate::WireInt32Wrapper>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructWithNullableUnion {
    pub val: Option<Box<crate::SimpleUnion>>,
}

impl ::fidl_next::Encodable for StructWithNullableUnion {
    type Encoded<'buf> = WireStructWithNullableUnion;
}

impl<___E> ::fidl_next::Encode<___E> for StructWithNullableUnion
where
    Option<Box<crate::SimpleUnion>>: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableUnion> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructWithNullableUnion>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableUnion>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableUnion: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructWithNullableUnion> for StructWithNullableUnion {
    fn take_from(from: &mut WireStructWithNullableUnion) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`StructWithNullableUnion`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructWithNullableUnion {
    pub val: crate::WireOptionalSimpleUnion,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructWithNullableUnion
where
    ___D: ?Sized,

    crate::WireOptionalSimpleUnion: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructWithNullableVector {
    pub val: Option<Vec<i32>>,
}

impl ::fidl_next::Encodable for StructWithNullableVector {
    type Encoded<'buf> = WireStructWithNullableVector<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for StructWithNullableVector
where
    Option<Vec<i32>>: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                val,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.val, encoder, val)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructWithNullableVector> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructWithNullableVector<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructWithNullableVector>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructWithNullableVector: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireStructWithNullableVector<'buf>> for StructWithNullableVector {
    fn take_from(from: &mut WireStructWithNullableVector<'buf>) -> Self {
        Self { val: ::fidl_next::TakeFrom::take_from(&mut from.val) }
    }
}

/// The wire type corersponding to [`StructWithNullableVector`].
#[derive(Debug)]
#[repr(C)]
pub struct WireStructWithNullableVector<'buf> {
    pub val: ::fidl_next::WireOptionalVector<'buf, ::fidl_next::i32_le>,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireStructWithNullableVector<'buf>
where
    ___D: ?Sized,

    ::fidl_next::WireOptionalVector<'buf, ::fidl_next::i32_le>: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut val,

            } = slot;
        }

        ::fidl_next::Decode::decode(val.as_mut(), decoder)?;

        Ok(())
    }
}
