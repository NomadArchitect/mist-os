// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

::fidl_next::bitflags! {
    #[derive(Clone, Copy, PartialEq, Eq, Hash)]
    #[derive(Debug)]
    pub struct EmptyBits: u32 {
        const _ = !0;
    }
}

impl ::fidl_next::Encodable for EmptyBits {
    type Encoded<'buf> = WireEmptyBits;
}

impl<___E> ::fidl_next::Encode<___E> for EmptyBits
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireEmptyBits { mut value } = slot);
        *value = ::fidl_next::u32_le::from(self.bits());
        Ok(())
    }
}

impl ::core::convert::From<WireEmptyBits> for EmptyBits {
    fn from(wire: WireEmptyBits) -> Self {
        Self::from_bits_retain(u32::from(wire.value))
    }
}

impl ::fidl_next::TakeFrom<WireEmptyBits> for EmptyBits {
    fn take_from(from: &mut WireEmptyBits) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireEmptyBits {
    value: ::fidl_next::u32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireEmptyBits
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<EmptyBits> for WireEmptyBits {
    fn from(natural: EmptyBits) -> Self {
        Self { value: ::fidl_next::u32_le::from(natural.bits()) }
    }
}

::fidl_next::bitflags! {
    #[derive(Clone, Copy, PartialEq, Eq, Hash)]
    #[derive(Debug)]
    pub struct FlexibleBits: u64 {
        const SMALLEST = 1;
        const BIGGEST = 9223372036854775808;
        const _ = !0;
    }
}

impl ::fidl_next::Encodable for FlexibleBits {
    type Encoded<'buf> = WireFlexibleBits;
}

impl<___E> ::fidl_next::Encode<___E> for FlexibleBits
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireFlexibleBits { mut value } = slot);
        *value = ::fidl_next::u64_le::from(self.bits());
        Ok(())
    }
}

impl ::core::convert::From<WireFlexibleBits> for FlexibleBits {
    fn from(wire: WireFlexibleBits) -> Self {
        Self::from_bits_retain(u64::from(wire.value))
    }
}

impl ::fidl_next::TakeFrom<WireFlexibleBits> for FlexibleBits {
    fn take_from(from: &mut WireFlexibleBits) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireFlexibleBits {
    value: ::fidl_next::u64_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireFlexibleBits
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        Ok(())
    }
}

impl ::core::convert::From<FlexibleBits> for WireFlexibleBits {
    fn from(natural: FlexibleBits) -> Self {
        Self { value: ::fidl_next::u64_le::from(natural.bits()) }
    }
}

::fidl_next::bitflags! {
    #[derive(Clone, Copy, PartialEq, Eq, Hash)]
    #[derive(Debug)]
    pub struct MyBits: u32 {
        const MY_FIRST_BIT = 1;
        const MY_OTHER_BIT = 2;
        const MASK = 4;
    }
}

impl ::fidl_next::Encodable for MyBits {
    type Encoded<'buf> = WireMyBits;
}

impl<___E> ::fidl_next::Encode<___E> for MyBits
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireMyBits { mut value } = slot);
        *value = ::fidl_next::u32_le::from(self.bits());
        Ok(())
    }
}

impl ::core::convert::From<WireMyBits> for MyBits {
    fn from(wire: WireMyBits) -> Self {
        Self::from_bits_retain(u32::from(wire.value))
    }
}

impl ::fidl_next::TakeFrom<WireMyBits> for MyBits {
    fn take_from(from: &mut WireMyBits) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireMyBits {
    value: ::fidl_next::u32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireMyBits
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);
        let set = u32::from(*value);
        if set & !MyBits::all().bits() != 0 {
            return Err(fidl_next::DecodeError::InvalidBits {
                expected: MyBits::all().bits() as usize,
                actual: set as usize,
            });
        }

        Ok(())
    }
}

impl ::core::convert::From<MyBits> for WireMyBits {
    fn from(natural: MyBits) -> Self {
        Self { value: ::fidl_next::u32_le::from(natural.bits()) }
    }
}

::fidl_next::bitflags! {
    #[derive(Clone, Copy, PartialEq, Eq, Hash)]
    #[derive(Debug)]
    pub struct StrictBits: u64 {
        const SMALLEST = 1;
        const BIGGEST = 9223372036854775808;
    }
}

impl ::fidl_next::Encodable for StrictBits {
    type Encoded<'buf> = WireStrictBits;
}

impl<___E> ::fidl_next::Encode<___E> for StrictBits
where
    ___E: ?Sized,
{
    fn encode(
        &mut self,
        _: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireStrictBits { mut value } = slot);
        *value = ::fidl_next::u64_le::from(self.bits());
        Ok(())
    }
}

impl ::core::convert::From<WireStrictBits> for StrictBits {
    fn from(wire: WireStrictBits) -> Self {
        Self::from_bits_retain(u64::from(wire.value))
    }
}

impl ::fidl_next::TakeFrom<WireStrictBits> for StrictBits {
    fn take_from(from: &mut WireStrictBits) -> Self {
        Self::from(*from)
    }
}

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct WireStrictBits {
    value: ::fidl_next::u64_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStrictBits
where
    ___D: ?Sized,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        _: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { value } = slot);
        let set = u64::from(*value);
        if set & !StrictBits::all().bits() != 0 {
            return Err(fidl_next::DecodeError::InvalidBits {
                expected: StrictBits::all().bits() as usize,
                actual: set as usize,
            });
        }

        Ok(())
    }
}

impl ::core::convert::From<StrictBits> for WireStrictBits {
    fn from(natural: StrictBits) -> Self {
        Self { value: ::fidl_next::u64_le::from(natural.bits()) }
    }
}
