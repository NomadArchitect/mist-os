// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(unused_parens, unused_variables, unused_mut, unused_imports, unreachable_code)]

#[derive(Clone, Debug)]
pub enum UnionSize12Alignment4 {
    Variant([u8; 6]),
}

impl ::fidl_next::Encodable for UnionSize12Alignment4 {
    type Encoded<'buf> = WireUnionSize12Alignment4<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize12Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,

    [u8; 6]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize12Alignment4 { raw, _phantom: _ } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u8; 6]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize12Alignment4> {
    type EncodedOption<'buf> = WireOptionalUnionSize12Alignment4<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize12Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionSize12Alignment4: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize12Alignment4 { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireUnionSize12Alignment4<'buf>> for UnionSize12Alignment4 {
    fn take_from(from: &mut WireUnionSize12Alignment4<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalUnionSize12Alignment4<'buf>>
    for Option<Box<UnionSize12Alignment4>>
{
    fn take_from(from: &mut WireOptionalUnionSize12Alignment4<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize12Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize12Alignment4<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod union_size12_alignment4 {
    pub enum Ref<'union> {
        Variant(&'union [u8; 6]),
    }

    pub enum Mut<'union> {
        Variant(&'union mut [u8; 6]),
    }
}

impl<'buf> WireUnionSize12Alignment4<'buf> {
    pub fn as_ref(&self) -> crate::union_size12_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size12_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::union_size12_alignment4::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size12_alignment4::Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireUnionSize12Alignment4<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    [u8; 6]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 6]>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSize12Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 6]>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize12Alignment4<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalUnionSize12Alignment4<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize12Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize12Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize12Alignment4<'buf>> {
        if self.is_some() {
            Some(WireUnionSize12Alignment4 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSize12Alignment4<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalUnionSize12Alignment4<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    [u8; 6]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 6]>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSize12Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize12Alignment4 {
    pub before: u32,

    pub r#union: crate::UnionSize12Alignment4,

    pub after: i32,
}

impl ::fidl_next::Encodable for SandwichUnionSize12Alignment4 {
    type Encoded<'buf> = WireSandwichUnionSize12Alignment4<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize12Alignment4
where
    u32: ::fidl_next::Encode<___E>,

    crate::UnionSize12Alignment4: ::fidl_next::Encode<___E>,

    i32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                r#union,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.r#union, encoder, r#union)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize12Alignment4> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSandwichUnionSize12Alignment4<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize12Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize12Alignment4: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireSandwichUnionSize12Alignment4<'buf>>
    for SandwichUnionSize12Alignment4
{
    fn take_from(from: &mut WireSandwichUnionSize12Alignment4<'buf>) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&mut from.before),

            r#union: ::fidl_next::TakeFrom::take_from(&mut from.r#union),

            after: ::fidl_next::TakeFrom::take_from(&mut from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize12Alignment4`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize12Alignment4<'buf> {
    pub before: ::fidl_next::u32_le,

    pub r#union: crate::WireUnionSize12Alignment4<'buf>,

    pub after: ::fidl_next::i32_le,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize12Alignment4<'buf>
where
    ___D: ?Sized,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,

    crate::WireUnionSize12Alignment4<'buf>: ::fidl_next::Decode<___D>,

    ::fidl_next::i32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut r#union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(r#union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructSize16Alignment8 {
    pub f1: u64,

    pub f2: u64,
}

impl ::fidl_next::Encodable for StructSize16Alignment8 {
    type Encoded<'buf> = WireStructSize16Alignment8;
}

impl<___E> ::fidl_next::Encode<___E> for StructSize16Alignment8
where
    u64: ::fidl_next::Encode<___E>,

    u64: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                f1,
                f2,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.f1, encoder, f1)?;

        ::fidl_next::Encode::encode(&mut self.f2, encoder, f2)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<StructSize16Alignment8> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireStructSize16Alignment8>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<StructSize16Alignment8>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    StructSize16Alignment8: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireStructSize16Alignment8> for StructSize16Alignment8 {
    fn take_from(from: &mut WireStructSize16Alignment8) -> Self {
        Self {
            f1: ::fidl_next::TakeFrom::take_from(&mut from.f1),

            f2: ::fidl_next::TakeFrom::take_from(&mut from.f2),
        }
    }
}

/// The wire type corersponding to [`StructSize16Alignment8`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructSize16Alignment8 {
    pub f1: ::fidl_next::u64_le,

    pub f2: ::fidl_next::u64_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireStructSize16Alignment8
where
    ___D: ?Sized,

    ::fidl_next::u64_le: ::fidl_next::Decode<___D>,

    ::fidl_next::u64_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut f1,
                mut f2,

            } = slot;
        }

        ::fidl_next::Decode::decode(f1.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(f2.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize24Alignment8 {
    Variant(crate::StructSize16Alignment8),
}

impl ::fidl_next::Encodable for UnionSize24Alignment8 {
    type Encoded<'buf> = WireUnionSize24Alignment8<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize24Alignment8
where
    ___E: ::fidl_next::Encoder + ?Sized,

    crate::StructSize16Alignment8: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize24Alignment8 { raw, _phantom: _ } = slot);

        match self {
            Self::Variant(value) => ::fidl_next::RawWireUnion::encode_as::<
                ___E,
                crate::StructSize16Alignment8,
            >(value, 1, encoder, raw)?,
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize24Alignment8> {
    type EncodedOption<'buf> = WireOptionalUnionSize24Alignment8<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize24Alignment8>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionSize24Alignment8: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize24Alignment8 { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireUnionSize24Alignment8<'buf>> for UnionSize24Alignment8 {
    fn take_from(from: &mut WireUnionSize24Alignment8<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalUnionSize24Alignment8<'buf>>
    for Option<Box<UnionSize24Alignment8>>
{
    fn take_from(from: &mut WireOptionalUnionSize24Alignment8<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize24Alignment8`].
#[repr(transparent)]
pub struct WireUnionSize24Alignment8<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod union_size24_alignment8 {
    pub enum Ref<'union> {
        Variant(&'union crate::WireStructSize16Alignment8),
    }

    pub enum Mut<'union> {
        Variant(&'union mut crate::WireStructSize16Alignment8),
    }
}

impl<'buf> WireUnionSize24Alignment8<'buf> {
    pub fn as_ref(&self) -> crate::union_size24_alignment8::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size24_alignment8::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::union_size24_alignment8::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size24_alignment8::Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireUnionSize24Alignment8<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireStructSize16Alignment8: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireStructSize16Alignment8>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSize24Alignment8<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireStructSize16Alignment8>().fmt(f)
            },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize24Alignment8<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalUnionSize24Alignment8<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize24Alignment8<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize24Alignment8<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize24Alignment8<'buf>> {
        if self.is_some() {
            Some(WireUnionSize24Alignment8 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSize24Alignment8<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalUnionSize24Alignment8<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    crate::WireStructSize16Alignment8: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, crate::WireStructSize16Alignment8>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSize24Alignment8<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize24Alignment8 {
    pub before: u32,

    pub r#union: crate::UnionSize24Alignment8,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize24Alignment8 {
    type Encoded<'buf> = WireSandwichUnionSize24Alignment8<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize24Alignment8
where
    u32: ::fidl_next::Encode<___E>,

    crate::UnionSize24Alignment8: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                r#union,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.r#union, encoder, r#union)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize24Alignment8> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSandwichUnionSize24Alignment8<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize24Alignment8>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize24Alignment8: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireSandwichUnionSize24Alignment8<'buf>>
    for SandwichUnionSize24Alignment8
{
    fn take_from(from: &mut WireSandwichUnionSize24Alignment8<'buf>) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&mut from.before),

            r#union: ::fidl_next::TakeFrom::take_from(&mut from.r#union),

            after: ::fidl_next::TakeFrom::take_from(&mut from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize24Alignment8`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize24Alignment8<'buf> {
    pub before: ::fidl_next::u32_le,

    pub r#union: crate::WireUnionSize24Alignment8<'buf>,

    pub after: ::fidl_next::u32_le,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize24Alignment8<'buf>
where
    ___D: ?Sized,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,

    crate::WireUnionSize24Alignment8<'buf>: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut r#union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(r#union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize36Alignment4 {
    Variant([u8; 32]),
}

impl ::fidl_next::Encodable for UnionSize36Alignment4 {
    type Encoded<'buf> = WireUnionSize36Alignment4<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize36Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,

    [u8; 32]: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize36Alignment4 { raw, _phantom: _ } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, [u8; 32]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize36Alignment4> {
    type EncodedOption<'buf> = WireOptionalUnionSize36Alignment4<'buf>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize36Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionSize36Alignment4: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize36Alignment4 { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireUnionSize36Alignment4<'buf>> for UnionSize36Alignment4 {
    fn take_from(from: &mut WireUnionSize36Alignment4<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireOptionalUnionSize36Alignment4<'buf>>
    for Option<Box<UnionSize36Alignment4>>
{
    fn take_from(from: &mut WireOptionalUnionSize36Alignment4<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize36Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize36Alignment4<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

pub mod union_size36_alignment4 {
    pub enum Ref<'union> {
        Variant(&'union [u8; 32]),
    }

    pub enum Mut<'union> {
        Variant(&'union mut [u8; 32]),
    }
}

impl<'buf> WireUnionSize36Alignment4<'buf> {
    pub fn as_ref(&self) -> crate::union_size36_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size36_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::union_size36_alignment4::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size36_alignment4::Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D> for WireUnionSize36Alignment4<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    [u8; 32]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 32]>(raw, decoder)?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSize36Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 32]>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize36Alignment4<'buf> {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<&'buf mut [::fidl_next::Chunk]>,
}

impl<'buf> WireOptionalUnionSize36Alignment4<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize36Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize36Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize36Alignment4<'buf>> {
        if self.is_some() {
            Some(WireUnionSize36Alignment4 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSize36Alignment4<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

unsafe impl<'buf, ___D: ?Sized> ::fidl_next::Decode<___D>
    for WireOptionalUnionSize36Alignment4<'buf>
where
    ___D: ::fidl_next::Decoder<'buf>,

    [u8; 32]: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as::<___D, [u8; 32]>(raw, decoder)?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSize36Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize36Alignment4 {
    pub before: u32,

    pub r#union: crate::UnionSize36Alignment4,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize36Alignment4 {
    type Encoded<'buf> = WireSandwichUnionSize36Alignment4<'buf>;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize36Alignment4
where
    u32: ::fidl_next::Encode<___E>,

    crate::UnionSize36Alignment4: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                r#union,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.r#union, encoder, r#union)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize36Alignment4> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSandwichUnionSize36Alignment4<'buf>>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize36Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize36Alignment4: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl_next::TakeFrom<WireSandwichUnionSize36Alignment4<'buf>>
    for SandwichUnionSize36Alignment4
{
    fn take_from(from: &mut WireSandwichUnionSize36Alignment4<'buf>) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&mut from.before),

            r#union: ::fidl_next::TakeFrom::take_from(&mut from.r#union),

            after: ::fidl_next::TakeFrom::take_from(&mut from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize36Alignment4`].
#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize36Alignment4<'buf> {
    pub before: ::fidl_next::u32_le,

    pub r#union: crate::WireUnionSize36Alignment4<'buf>,

    pub after: ::fidl_next::u32_le,
}

unsafe impl<'buf, ___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize36Alignment4<'buf>
where
    ___D: ?Sized,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,

    crate::WireUnionSize36Alignment4<'buf>: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut r#union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(r#union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnionSize8Alignment4 {
    Variant(u32),
}

impl ::fidl_next::Encodable for UnionSize8Alignment4 {
    type Encoded<'buf> = WireUnionSize8Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for UnionSize8Alignment4
where
    ___E: ::fidl_next::Encoder + ?Sized,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireUnionSize8Alignment4 { raw, _phantom: _ } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl_next::RawWireUnion::encode_as::<___E, u32>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<UnionSize8Alignment4> {
    type EncodedOption<'buf> = WireOptionalUnionSize8Alignment4;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<UnionSize8Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    UnionSize8Alignment4: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        mut slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge!(let WireOptionalUnionSize8Alignment4 { raw, _phantom: _ } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl_next::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl_next::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl_next::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireUnionSize8Alignment4> for UnionSize8Alignment4 {
    fn take_from(from: &mut WireUnionSize8Alignment4) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl_next::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl ::fidl_next::TakeFrom<WireOptionalUnionSize8Alignment4> for Option<Box<UnionSize8Alignment4>> {
    fn take_from(from: &mut WireOptionalUnionSize8Alignment4) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl_next::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

/// The wire type corresponding to [`UnionSize8Alignment4`].
#[repr(transparent)]
pub struct WireUnionSize8Alignment4 {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

pub mod union_size8_alignment4 {
    pub enum Ref<'union> {
        Variant(&'union ::fidl_next::u32_le),
    }

    pub enum Mut<'union> {
        Variant(&'union mut ::fidl_next::u32_le),
    }
}

impl WireUnionSize8Alignment4 {
    pub fn as_ref(&self) -> crate::union_size8_alignment4::Ref<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size8_alignment4::Ref::Variant(unsafe {
                self.raw.get().deref_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> crate::union_size8_alignment4::Mut<'_> {
        match self.raw.ordinal() {
            1 => crate::union_size8_alignment4::Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl Clone for WireUnionSize8Alignment4 {
    fn clone(&self) -> Self {
        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::u32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireUnionSize8Alignment4
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::u32_le>(
                raw, decoder,
            )?,

            ord => return Err(::fidl_next::DecodeError::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireUnionSize8Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl_next::u32_le>().fmt(f) },
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize8Alignment4 {
    raw: ::fidl_next::RawWireUnion,
    _phantom: ::core::marker::PhantomData<()>,
}

impl WireOptionalUnionSize8Alignment4 {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize8Alignment4> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize8Alignment4> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize8Alignment4> {
        if self.is_some() {
            Some(WireUnionSize8Alignment4 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl_next::RawWireUnion::null()),
                _phantom: ::core::marker::PhantomData,
            })
        } else {
            None
        }
    }
}

impl Default for WireOptionalUnionSize8Alignment4 {
    fn default() -> Self {
        Self { raw: ::fidl_next::RawWireUnion::null(), _phantom: ::core::marker::PhantomData }
    }
}

impl Clone for WireOptionalUnionSize8Alignment4 {
    fn clone(&self) -> Self {
        if self.is_none() {
            return WireOptionalUnionSize8Alignment4 {
                raw: ::fidl_next::RawWireUnion::null(),
                _phantom: ::core::marker::PhantomData,
            };
        }

        match self.raw.ordinal() {
            1 => Self {
                raw: unsafe { self.raw.clone_unchecked::<::fidl_next::u32_le>() },
                _phantom: ::core::marker::PhantomData,
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<___D: ?Sized> ::fidl_next::Decode<___D> for WireOptionalUnionSize8Alignment4
where
    ___D: fidl_next::decoder::InternalHandleDecoder,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        mut slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge!(let Self { mut raw, _phantom: _ } = slot.as_mut());
        match ::fidl_next::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl_next::RawWireUnion::decode_as_static::<___D, ::fidl_next::u32_le>(
                raw, decoder,
            )?,

            0 => ::fidl_next::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl_next::RawWireUnion::decode_unknown_static(raw, decoder)?,
        }

        Ok(())
    }
}

impl ::core::fmt::Debug for WireOptionalUnionSize8Alignment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize8Alignment4 {
    pub before: u32,

    pub r#union: crate::UnionSize8Alignment4,

    pub after: u32,
}

impl ::fidl_next::Encodable for SandwichUnionSize8Alignment4 {
    type Encoded<'buf> = WireSandwichUnionSize8Alignment4;
}

impl<___E> ::fidl_next::Encode<___E> for SandwichUnionSize8Alignment4
where
    u32: ::fidl_next::Encode<___E>,

    crate::UnionSize8Alignment4: ::fidl_next::Encode<___E>,

    u32: ::fidl_next::Encode<___E>,
{
    fn encode(
        &mut self,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        ::fidl_next::munge! {
            let Self::Encoded {
                before,
                r#union,
                after,

            } = slot;
        }

        ::fidl_next::Encode::encode(&mut self.before, encoder, before)?;

        ::fidl_next::Encode::encode(&mut self.r#union, encoder, r#union)?;

        ::fidl_next::Encode::encode(&mut self.after, encoder, after)?;

        Ok(())
    }
}

impl ::fidl_next::EncodableOption for Box<SandwichUnionSize8Alignment4> {
    type EncodedOption<'buf> = ::fidl_next::WireBox<'buf, WireSandwichUnionSize8Alignment4>;
}

impl<___E> ::fidl_next::EncodeOption<___E> for Box<SandwichUnionSize8Alignment4>
where
    ___E: ::fidl_next::Encoder + ?Sized,
    SandwichUnionSize8Alignment4: ::fidl_next::Encode<___E>,
{
    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ___E,
        slot: ::fidl_next::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl_next::EncodeError> {
        if let Some(inner) = this {
            ::fidl_next::EncoderExt::encode_next(encoder, inner)?;
            ::fidl_next::WireBox::encode_present(slot);
        } else {
            ::fidl_next::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl_next::TakeFrom<WireSandwichUnionSize8Alignment4> for SandwichUnionSize8Alignment4 {
    fn take_from(from: &mut WireSandwichUnionSize8Alignment4) -> Self {
        Self {
            before: ::fidl_next::TakeFrom::take_from(&mut from.before),

            r#union: ::fidl_next::TakeFrom::take_from(&mut from.r#union),

            after: ::fidl_next::TakeFrom::take_from(&mut from.after),
        }
    }
}

/// The wire type corersponding to [`SandwichUnionSize8Alignment4`].
#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize8Alignment4 {
    pub before: ::fidl_next::u32_le,

    pub r#union: crate::WireUnionSize8Alignment4,

    pub after: ::fidl_next::u32_le,
}

unsafe impl<___D> ::fidl_next::Decode<___D> for WireSandwichUnionSize8Alignment4
where
    ___D: ?Sized,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,

    crate::WireUnionSize8Alignment4: ::fidl_next::Decode<___D>,

    ::fidl_next::u32_le: ::fidl_next::Decode<___D>,
{
    fn decode(
        slot: ::fidl_next::Slot<'_, Self>,
        decoder: &mut ___D,
    ) -> Result<(), ::fidl_next::DecodeError> {
        ::fidl_next::munge! {
            let Self {
                mut before,
                mut r#union,
                mut after,

            } = slot;
        }

        ::fidl_next::Decode::decode(before.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(r#union.as_mut(), decoder)?;

        ::fidl_next::Decode::decode(after.as_mut(), decoder)?;

        Ok(())
    }
}
