// DO NOT EDIT: This file is machine-generated by fidlgen
#![warn(clippy::all)]
#![allow(
    unused_parens,
    unused_variables,
    unused_mut,
    unused_imports,
    unreachable_code,
    nonstandard_style
)]

#[derive(Clone, Debug)]

pub enum UnionSize12Alignment4 {
    Variant([u8; 6]),
}

impl ::fidl::Encode for UnionSize12Alignment4 {
    type Encoded<'buf> = WireUnionSize12Alignment4<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireUnionSize12Alignment4 { raw } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl::RawWireUnion::encode_as::<[u8; 6]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<UnionSize12Alignment4> {
    type EncodedOption<'buf> = WireOptionalUnionSize12Alignment4<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalUnionSize12Alignment4 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireUnionSize12Alignment4<'buf>> for UnionSize12Alignment4 {
    fn take_from(from: &mut WireUnionSize12Alignment4<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalUnionSize12Alignment4<'buf>>
    for Option<Box<UnionSize12Alignment4>>
{
    fn take_from(from: &mut WireOptionalUnionSize12Alignment4<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionSize12Alignment4<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireUnionSize12Alignment4Ref<'buf> {
    Variant(&'buf [u8; 6]),
}

pub enum WireUnionSize12Alignment4Mut<'buf> {
    Variant(&'buf mut [u8; 6]),
}

impl WireUnionSize12Alignment4<'_> {
    pub fn as_ref(&self) -> WireUnionSize12Alignment4Ref<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize12Alignment4Ref::Variant(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireUnionSize12Alignment4Mut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize12Alignment4Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireUnionSize12Alignment4<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<[u8; 6]>(raw, decoder)?,

            ord => return Err(fidl::decode::Error::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSize12Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 6]>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize12Alignment4<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionSize12Alignment4<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize12Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize12Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize12Alignment4<'buf>> {
        if self.is_some() {
            Some(WireUnionSize12Alignment4 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSize12Alignment4<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalUnionSize12Alignment4<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<[u8; 6]>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSize12Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize12Alignment4 {
    pub before: u32,
    pub union: crate::UnionSize12Alignment4,
    pub after: i32,
}

impl ::fidl::Encode for SandwichUnionSize12Alignment4 {
    type Encoded<'buf> = WireSandwichUnionSize12Alignment4<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                before,
                union,
                after,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.before, encoder, before)?;
        ::fidl::Encode::encode(&mut self.union, encoder, union)?;
        ::fidl::Encode::encode(&mut self.after, encoder, after)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<SandwichUnionSize12Alignment4> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireSandwichUnionSize12Alignment4<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireSandwichUnionSize12Alignment4<'buf>>
    for SandwichUnionSize12Alignment4
{
    fn take_from(from: &mut WireSandwichUnionSize12Alignment4<'buf>) -> Self {
        Self {
            before: ::fidl::TakeFrom::take_from(&mut from.before),
            union: ::fidl::TakeFrom::take_from(&mut from.union),
            after: ::fidl::TakeFrom::take_from(&mut from.after),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize12Alignment4<'buf> {
    pub before: ::fidl::u32_le,
    pub union: crate::WireUnionSize12Alignment4<'buf>,
    pub after: ::fidl::i32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireSandwichUnionSize12Alignment4<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut before,
                mut union,
                mut after,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(before.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(union.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(after.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct StructSize16Alignment8 {
    pub f1: u64,
    pub f2: u64,
}

impl ::fidl::Encode for StructSize16Alignment8 {
    type Encoded<'buf> = WireStructSize16Alignment8;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                f1,
                f2,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.f1, encoder, f1)?;
        ::fidl::Encode::encode(&mut self.f2, encoder, f2)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<StructSize16Alignment8> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireStructSize16Alignment8>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl ::fidl::TakeFrom<WireStructSize16Alignment8> for StructSize16Alignment8 {
    fn take_from(from: &mut WireStructSize16Alignment8) -> Self {
        Self {
            f1: ::fidl::TakeFrom::take_from(&mut from.f1),
            f2: ::fidl::TakeFrom::take_from(&mut from.f2),
        }
    }
}

#[derive(Clone, Debug)]
#[repr(C)]
pub struct WireStructSize16Alignment8 {
    pub f1: ::fidl::u64_le,
    pub f2: ::fidl::u64_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireStructSize16Alignment8 {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut f1,
                mut f2,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(f1.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(f2.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]

pub enum UnionSize24Alignment8 {
    Variant(crate::StructSize16Alignment8),
}

impl ::fidl::Encode for UnionSize24Alignment8 {
    type Encoded<'buf> = WireUnionSize24Alignment8<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireUnionSize24Alignment8 { raw } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl::RawWireUnion::encode_as::<crate::StructSize16Alignment8>(
                    value, 1, encoder, raw,
                )?
            }
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<UnionSize24Alignment8> {
    type EncodedOption<'buf> = WireOptionalUnionSize24Alignment8<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalUnionSize24Alignment8 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireUnionSize24Alignment8<'buf>> for UnionSize24Alignment8 {
    fn take_from(from: &mut WireUnionSize24Alignment8<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalUnionSize24Alignment8<'buf>>
    for Option<Box<UnionSize24Alignment8>>
{
    fn take_from(from: &mut WireOptionalUnionSize24Alignment8<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionSize24Alignment8<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireUnionSize24Alignment8Ref<'buf> {
    Variant(&'buf crate::WireStructSize16Alignment8),
}

pub enum WireUnionSize24Alignment8Mut<'buf> {
    Variant(&'buf mut crate::WireStructSize16Alignment8),
}

impl WireUnionSize24Alignment8<'_> {
    pub fn as_ref(&self) -> WireUnionSize24Alignment8Ref<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize24Alignment8Ref::Variant(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireUnionSize24Alignment8Mut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize24Alignment8Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireUnionSize24Alignment8<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => {
                ::fidl::RawWireUnion::decode_as::<crate::WireStructSize16Alignment8>(raw, decoder)?
            }

            ord => return Err(fidl::decode::Error::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSize24Alignment8<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe {
                self.raw.get().deref_unchecked::<crate::WireStructSize16Alignment8>().fmt(f)
            },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize24Alignment8<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionSize24Alignment8<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize24Alignment8<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize24Alignment8<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize24Alignment8<'buf>> {
        if self.is_some() {
            Some(WireUnionSize24Alignment8 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSize24Alignment8<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalUnionSize24Alignment8<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => {
                ::fidl::RawWireUnion::decode_as::<crate::WireStructSize16Alignment8>(raw, decoder)?
            }

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSize24Alignment8<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize24Alignment8 {
    pub before: u32,
    pub union: crate::UnionSize24Alignment8,
    pub after: u32,
}

impl ::fidl::Encode for SandwichUnionSize24Alignment8 {
    type Encoded<'buf> = WireSandwichUnionSize24Alignment8<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                before,
                union,
                after,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.before, encoder, before)?;
        ::fidl::Encode::encode(&mut self.union, encoder, union)?;
        ::fidl::Encode::encode(&mut self.after, encoder, after)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<SandwichUnionSize24Alignment8> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireSandwichUnionSize24Alignment8<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireSandwichUnionSize24Alignment8<'buf>>
    for SandwichUnionSize24Alignment8
{
    fn take_from(from: &mut WireSandwichUnionSize24Alignment8<'buf>) -> Self {
        Self {
            before: ::fidl::TakeFrom::take_from(&mut from.before),
            union: ::fidl::TakeFrom::take_from(&mut from.union),
            after: ::fidl::TakeFrom::take_from(&mut from.after),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize24Alignment8<'buf> {
    pub before: ::fidl::u32_le,
    pub union: crate::WireUnionSize24Alignment8<'buf>,
    pub after: ::fidl::u32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireSandwichUnionSize24Alignment8<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut before,
                mut union,
                mut after,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(before.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(union.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(after.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]

pub enum UnionSize36Alignment4 {
    Variant([u8; 32]),
}

impl ::fidl::Encode for UnionSize36Alignment4 {
    type Encoded<'buf> = WireUnionSize36Alignment4<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireUnionSize36Alignment4 { raw } = slot);

        match self {
            Self::Variant(value) => {
                ::fidl::RawWireUnion::encode_as::<[u8; 32]>(value, 1, encoder, raw)?
            }
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<UnionSize36Alignment4> {
    type EncodedOption<'buf> = WireOptionalUnionSize36Alignment4<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalUnionSize36Alignment4 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireUnionSize36Alignment4<'buf>> for UnionSize36Alignment4 {
    fn take_from(from: &mut WireUnionSize36Alignment4<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalUnionSize36Alignment4<'buf>>
    for Option<Box<UnionSize36Alignment4>>
{
    fn take_from(from: &mut WireOptionalUnionSize36Alignment4<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionSize36Alignment4<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireUnionSize36Alignment4Ref<'buf> {
    Variant(&'buf [u8; 32]),
}

pub enum WireUnionSize36Alignment4Mut<'buf> {
    Variant(&'buf mut [u8; 32]),
}

impl WireUnionSize36Alignment4<'_> {
    pub fn as_ref(&self) -> WireUnionSize36Alignment4Ref<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize36Alignment4Ref::Variant(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireUnionSize36Alignment4Mut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize36Alignment4Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireUnionSize36Alignment4<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<[u8; 32]>(raw, decoder)?,

            ord => return Err(fidl::decode::Error::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSize36Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<[u8; 32]>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize36Alignment4<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionSize36Alignment4<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize36Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize36Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize36Alignment4<'buf>> {
        if self.is_some() {
            Some(WireUnionSize36Alignment4 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSize36Alignment4<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalUnionSize36Alignment4<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<[u8; 32]>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSize36Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize36Alignment4 {
    pub before: u32,
    pub union: crate::UnionSize36Alignment4,
    pub after: u32,
}

impl ::fidl::Encode for SandwichUnionSize36Alignment4 {
    type Encoded<'buf> = WireSandwichUnionSize36Alignment4<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                before,
                union,
                after,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.before, encoder, before)?;
        ::fidl::Encode::encode(&mut self.union, encoder, union)?;
        ::fidl::Encode::encode(&mut self.after, encoder, after)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<SandwichUnionSize36Alignment4> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireSandwichUnionSize36Alignment4<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireSandwichUnionSize36Alignment4<'buf>>
    for SandwichUnionSize36Alignment4
{
    fn take_from(from: &mut WireSandwichUnionSize36Alignment4<'buf>) -> Self {
        Self {
            before: ::fidl::TakeFrom::take_from(&mut from.before),
            union: ::fidl::TakeFrom::take_from(&mut from.union),
            after: ::fidl::TakeFrom::take_from(&mut from.after),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize36Alignment4<'buf> {
    pub before: ::fidl::u32_le,
    pub union: crate::WireUnionSize36Alignment4<'buf>,
    pub after: ::fidl::u32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireSandwichUnionSize36Alignment4<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut before,
                mut union,
                mut after,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(before.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(union.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(after.as_mut(), decoder)?;
        Ok(())
    }
}

#[derive(Clone, Debug)]

pub enum UnionSize8Alignment4 {
    Variant(u32),
}

impl ::fidl::Encode for UnionSize8Alignment4 {
    type Encoded<'buf> = WireUnionSize8Alignment4<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireUnionSize8Alignment4 { raw } = slot);

        match self {
            Self::Variant(value) => ::fidl::RawWireUnion::encode_as::<u32>(value, 1, encoder, raw)?,
        }

        Ok(())
    }
}

impl ::fidl::encode::EncodeOption for Box<UnionSize8Alignment4> {
    type EncodedOption<'buf> = WireOptionalUnionSize8Alignment4<'buf>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        mut slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge!(let WireOptionalUnionSize8Alignment4 { raw } = slot.as_mut());

        if let Some(inner) = this {
            let slot = unsafe { ::fidl::Slot::new_unchecked(slot.as_mut_ptr().cast()) };
            ::fidl::encode::Encode::encode(&mut **inner, encoder, slot)?;
        } else {
            ::fidl::RawWireUnion::encode_absent(raw);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireUnionSize8Alignment4<'buf>> for UnionSize8Alignment4 {
    fn take_from(from: &mut WireUnionSize8Alignment4<'buf>) -> Self {
        match from.raw.ordinal() {
            1 => Self::Variant(::fidl::TakeFrom::take_from(unsafe {
                from.raw.get_mut().deref_mut_unchecked()
            })),

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

impl<'buf> ::fidl::TakeFrom<WireOptionalUnionSize8Alignment4<'buf>>
    for Option<Box<UnionSize8Alignment4>>
{
    fn take_from(from: &mut WireOptionalUnionSize8Alignment4<'buf>) -> Self {
        if let Some(inner) = from.as_mut() {
            Some(::fidl::TakeFrom::take_from(inner))
        } else {
            None
        }
    }
}

#[repr(transparent)]
pub struct WireUnionSize8Alignment4<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

pub enum WireUnionSize8Alignment4Ref<'buf> {
    Variant(&'buf ::fidl::u32_le),
}

pub enum WireUnionSize8Alignment4Mut<'buf> {
    Variant(&'buf mut ::fidl::u32_le),
}

impl WireUnionSize8Alignment4<'_> {
    pub fn as_ref(&self) -> WireUnionSize8Alignment4Ref<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize8Alignment4Ref::Variant(unsafe { self.raw.get().deref_unchecked() }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }

    pub fn as_mut(&mut self) -> WireUnionSize8Alignment4Mut<'_> {
        match self.raw.ordinal() {
            1 => WireUnionSize8Alignment4Mut::Variant(unsafe {
                self.raw.get_mut().deref_mut_unchecked()
            }),
            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireUnionSize8Alignment4<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::u32_le>(raw, decoder)?,

            ord => return Err(fidl::decode::Error::InvalidUnionOrdinal(ord as usize)),
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireUnionSize8Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self.raw.ordinal() {
            1 => unsafe { self.raw.get().deref_unchecked::<::fidl::u32_le>().fmt(f) },

            _ => unsafe { ::core::hint::unreachable_unchecked() },
        }
    }
}

#[repr(transparent)]
pub struct WireOptionalUnionSize8Alignment4<'buf> {
    raw: ::fidl::RawWireUnion<'buf>,
}

impl<'buf> WireOptionalUnionSize8Alignment4<'buf> {
    pub fn is_some(&self) -> bool {
        self.raw.is_some()
    }

    pub fn is_none(&self) -> bool {
        self.raw.is_none()
    }

    pub fn as_ref(&self) -> Option<&WireUnionSize8Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &*(self as *const Self).cast() })
        } else {
            None
        }
    }

    pub fn as_mut(&mut self) -> Option<&mut WireUnionSize8Alignment4<'buf>> {
        if self.is_some() {
            Some(unsafe { &mut *(self as *mut Self).cast() })
        } else {
            None
        }
    }

    pub fn take(&mut self) -> Option<WireUnionSize8Alignment4<'buf>> {
        if self.is_some() {
            Some(WireUnionSize8Alignment4 {
                raw: ::core::mem::replace(&mut self.raw, ::fidl::RawWireUnion::null()),
            })
        } else {
            None
        }
    }
}

impl<'buf> Default for WireOptionalUnionSize8Alignment4<'buf> {
    fn default() -> Self {
        Self { raw: ::fidl::RawWireUnion::null() }
    }
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireOptionalUnionSize8Alignment4<'buf> {
    fn decode(
        mut slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge!(let Self { mut raw } = slot.as_mut());
        match ::fidl::RawWireUnion::encoded_ordinal(raw.as_mut()) {
            1 => ::fidl::RawWireUnion::decode_as::<::fidl::u32_le>(raw, decoder)?,

            0 => ::fidl::RawWireUnion::decode_absent(raw)?,
            _ => ::fidl::RawWireUnion::decode_unknown(raw, decoder)?,
        }

        Ok(())
    }
}

impl<'buf> ::core::fmt::Debug for WireOptionalUnionSize8Alignment4<'buf> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        self.as_ref().fmt(f)
    }
}

#[derive(Clone, Debug)]
pub struct SandwichUnionSize8Alignment4 {
    pub before: u32,
    pub union: crate::UnionSize8Alignment4,
    pub after: u32,
}

impl ::fidl::Encode for SandwichUnionSize8Alignment4 {
    type Encoded<'buf> = WireSandwichUnionSize8Alignment4<'buf>;

    fn encode(
        &mut self,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::Encoded<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        ::fidl::munge! {
            let Self::Encoded {
                before,
                union,
                after,
            } = slot;
        }
        ::fidl::Encode::encode(&mut self.before, encoder, before)?;
        ::fidl::Encode::encode(&mut self.union, encoder, union)?;
        ::fidl::Encode::encode(&mut self.after, encoder, after)?;
        Ok(())
    }
}

impl ::fidl::EncodeOption for Box<SandwichUnionSize8Alignment4> {
    type EncodedOption<'buf> = ::fidl::WireBox<'buf, WireSandwichUnionSize8Alignment4<'buf>>;

    fn encode_option(
        this: Option<&mut Self>,
        encoder: &mut ::fidl::encode::Encoder,
        slot: ::fidl::Slot<'_, Self::EncodedOption<'_>>,
    ) -> Result<(), ::fidl::encode::Error> {
        if let Some(inner) = this {
            encoder.encode(inner)?;
            ::fidl::WireBox::encode_present(slot);
        } else {
            ::fidl::WireBox::encode_absent(slot);
        }

        Ok(())
    }
}

impl<'buf> ::fidl::TakeFrom<WireSandwichUnionSize8Alignment4<'buf>>
    for SandwichUnionSize8Alignment4
{
    fn take_from(from: &mut WireSandwichUnionSize8Alignment4<'buf>) -> Self {
        Self {
            before: ::fidl::TakeFrom::take_from(&mut from.before),
            union: ::fidl::TakeFrom::take_from(&mut from.union),
            after: ::fidl::TakeFrom::take_from(&mut from.after),
        }
    }
}

#[derive(Debug)]
#[repr(C)]
pub struct WireSandwichUnionSize8Alignment4<'buf> {
    pub before: ::fidl::u32_le,
    pub union: crate::WireUnionSize8Alignment4<'buf>,
    pub after: ::fidl::u32_le,
}

unsafe impl<'buf> ::fidl::Decode<'buf> for WireSandwichUnionSize8Alignment4<'buf> {
    fn decode(
        slot: ::fidl::Slot<'_, Self>,
        decoder: &mut ::fidl::decode::Decoder<'buf>,
    ) -> Result<(), ::fidl::decode::Error> {
        ::fidl::munge! {
            let Self {
                mut before,
                mut union,
                mut after,
            } = slot;
        }
        ::fidl::Decode::<'buf>::decode(before.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(union.as_mut(), decoder)?;
        ::fidl::Decode::<'buf>::decode(after.as_mut(), decoder)?;
        Ok(())
    }
}
