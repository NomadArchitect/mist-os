# Copyright 2022 The Fuchsia Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/product_assembly_configuration.gni")
import("//build/assembly/sshd_config.gni")
import("//build/info/info.gni")

assert(
    is_fuchsia,
    "Product definitions and assemblies should only be defined in the fuchsia toolchain")

# This is the base product configuration used by all terminal products

terminal_base = {
  testonly = true
  platform = {
    build_type = "eng"

    bluetooth = {
      type = "standard"
      snoop = "lazy"
    }

    development_support = {
      include_sl4f = true

      # If the 'authorized_ssh_keys_path' GN arg has been set, then pass that path
      # as part of the platform configuration.
      if (authorized_ssh_keys_path != false) {
        authorized_ssh_keys_path =
            rebase_path(authorized_ssh_keys_path, root_build_dir)
      }

      tools = {
        connectivity = {
          enable_networking = true
          enable_wlan = true
          enable_thread = true
        }
      }
    }

    ui = {
      enabled = true
      supported_input_devices = [
        "button",
        "touchscreen",
      ]
      with_synthetic_device_support = true
    }

    media = {
      audio = {
        full_stack = {
        }
      }
      enable_codecs = true
      enable_sessions = true
    }

    fonts = {
      # See base_packages below.
      font_collection = "open-fonts-collection"
    }

    session = {
      enabled = true

      # avoid impacting existing terminal users like chromium tests
      autolaunch = false
    }

    storage = {
      mutable_storage_garbage_collection = true
    }
  }

  product = {
    session_url =
        "fuchsia-pkg://fuchsia.com/tiles-session#meta/tiles-session.cm"
    build_info = default_product_build_info
  }
  deps = [ "//build/info:build_info_files" ]

  base_packages = [
    {
      # Provides font assets for `platform.fonts.font_collection` above.
      package_target = "//src/fonts/asset_providers:open-fonts-collection.asset-provider.package"
    },
  ]

  cache_packages = [
    {
      package_target = "//src/ui/bin/terminal"
    },
    {
      package_target = "//src/ui/bin/tiles-session"
    },

    # Used to mock out display hardware in UI integration tests.
    {
      package_target =
          "//src/graphics/display/testing/fake-coordinator-connector"
    },

    # Add validator package for use in tests.
    # TODO(https://fxbug.dev/42077782): Remove once we support packages in the SDK.
    {
      package_target = "//src/diagnostics/validator/inspect:validator"
    },

    # Add test validation packages for use in tests.
    # TODO(https://fxbug.dev/42077782): Remove once we support packages in the SDK and we want to put
    # this in the SDK.
    {
      package_target = "//src/tests/fidl/dynsuite/client_suite/harness"
    },
    {
      package_target = "//src/tests/fidl/dynsuite/server_suite/harness"
    },

    # Fake services needed by Chromium tests until subpackages are supported OOT
    # and fakes are provided with the SDK. See crbug.com/1326674.
    # TODO(crbug.com/1408597): Remove once the Chromium tests package the fakes.
    {
      package_target = "//src/developer/build_info/testing:fake-build-info"
    },
    {
      # archivist-for-embedding is needed by
      # WebEngineIntegrationLoggingTest.SetJavaScriptLogLevel_DEBUG.
      # TODO(crbug.com/1451376): Move it to a peer group as appropriate.
      package_target = "//src/diagnostics/archivist:archivist-for-embedding"
    },
    {
      package_target = "//src/testing/fidl/intl_property_manager"
    },
    {
      # A font provider with built-in font file assets.
      # TODO(crbug.com/1408597): Once OOT fakes are available, this can be
      # turned into a hermetic component, or a subpackage.
      package_target = "//src/fonts:fonts_hermetic_for_test"
    },
    {
      # A font provider without built-in font file assets.
      package_target = "//src/fonts:fonts_configurable_for_test"
    },

    # Add Test UI Stack for use in tests.
    # TODO(https://fxbug.dev/42056298): Remove once we migrate client usage to subpackages.
    {
      package_target =
          "//src/ui/testing/test_ui_stack:flatland-scene-manager-test-ui-stack"
    },
    {
      package_target = "//src/ui/testing/test_ui_stack:test-ui-stack"
    },

    # Add FIDL compatibility test harneses for SDK customers to use until these are in
    # the SDK for subpackaging
    #
    # TODO(https://fxbug.dev/42077782): Remove once we support packages in the SDK and we want to put this
    # in the SDK.
    {
      package_target =
          "//src/tests/fidl/compatibility:fidl-compatibility-array-harness_pkg"
    },
    {
      package_target = "//src/tests/fidl/compatibility:fidl-compatibility-minimal-harness_pkg"
    },
    {
      package_target =
          "//src/tests/fidl/compatibility:fidl-compatibility-struct-harness_pkg"
    },
    {
      package_target =
          "//src/tests/fidl/compatibility:fidl-compatibility-table-harness_pkg"
    },
    {
      package_target =
          "//src/tests/fidl/compatibility:fidl-compatibility-union-harness_pkg"
    },
    {
      package_target =
          "//src/tests/fidl/compatibility:fidl-compatibility-vector-harness_pkg"
    },
    {
      package_target = "//src/tests/fidl/compatibility/cpp"
    },
    {
      package_target = "//src/tests/fidl/compatibility/hlcpp"
    },
    {
      package_target = "//src/tests/fidl/compatibility/llcpp"
    },
    {
      package_target = "//src/tests/fidl/compatibility/go"
    },
    {
      package_target = "//src/tests/fidl/compatibility/rust"
    },
  ]
}

product_assembly_configuration("terminal") {
  forward_variables_from(terminal_base, "*")
}

# TODO(https://fxbug.dev/370543906): Remove this product once it's no longer
# needed.
product_assembly_configuration("terminal_with_netstack2") {
  forward_variables_from(terminal_base, "*")

  platform.connectivity = {
    network = {
      netstack_version = "netstack2"
    }
  }
}
