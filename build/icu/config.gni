# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  # The GN files for the ICU library are located in this directory.
  # Some Fuchsia builds use a different value here.
  icu_root = "//third_party/icu/default"

  # Set this to false once a Jiri hook has been added to
  # integration.git/fuchsia/stem to invoke build/icu/update-config-json.sh
  #
  # It is possible to test the feature locally by setting this variable
  # to true in args.gn _after_ calling the script manually. Benchmarking
  # shows that this saves about 700ms of `fx gen` time on a powerful
  # workstation for a moderate build configuration.
  #
  # See https://fxbug.dev/377674727 for details.
  icu_config_use_jiri_hook = false
}

if (icu_config_use_jiri_hook) {
  icu_git_info = read_file("jiri_generated/config.json", "json")
} else {
  icu_git_info =
      exec_script("update-config-json.sh",
                  [
                    "--fuchsia-dir=" + rebase_path("//", root_build_dir),
                    "--mode=print",
                  ],
                  "json",
                  [
                    "//third_party/icu/default",
                    "//third_party/icu/latest",
                  ])
}

# A target that verifies that the content of config.json is valid at build time.
# All targets that depend on the content of icu_git_info should data-depend on
# this.
icu_config_validation_target =
    "//build/icu:validate_config_json($default_toolchain)"

# The unflavored dependencies that must be replaced with flavored ones when
# compiling flavored targets.  Defined because the correct contents are
# annoying to remember but must be specified exactly.
icu_fixup_deps_no_testonly = [
  "//src/lib/icu:data",
  "//src/lib/icu:icudtl",
  "//src/lib/icu:lib",
]
icu_fixup_deps = icu_fixup_deps_no_testonly + [ "//src/lib/icu:icu" ]

# These can not be directly inserted in the assignments of
# `icu_flavor_major_versions` below, that is a GN limitation.
icu_default_config = read_file("//third_party/icu/default/version.json", "json")
icu_latest_config = read_file("//third_party/icu/latest/version.json", "json")

# The major version numbers per each ICU flavor.
# Automatically extracted from `version.json` in the ICU repo.
icu_flavor_major_versions = {
  default = icu_default_config.major_version
  latest = icu_latest_config.major_version
}

# A registry of the ICU flavors known to the build system.
#
# Each entry is a scope of:
#   - name[string]: one of "default", "latest",
#   - commit_id[string]: the git commit ID at which the flavor currently is.
#   - major_version[string]: a string-formatted number, such as "73".
icu_flavors = [
  {
    name = "default"
    commit_id = icu_git_info.default
    major_version = icu_flavor_major_versions.default
  },
  {
    name = "latest"
    commit_id = icu_git_info.latest
    major_version = icu_flavor_major_versions.latest
  },
]
