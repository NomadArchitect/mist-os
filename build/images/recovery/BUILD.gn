# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/product_assembly_configuration.gni")
import("//build/assembly/sshd_config.gni")
import("//build/board.gni")
import("//build/images/args.gni")
import("//build/images/paths.gni")
import("//build/images/vboot/vboot.gni")
import("//build/info/info.gni")
import("//build/product.gni")
import("//build/testing/host_test_data.gni")
import("//src/storage/fshost/generated_fshost_config.gni")
import("//src/sys/core/build/core.gni")

if (is_host) {
  host_test_data("test_data") {
    out_dir = get_label_info(":anything($target_toolchain)", "target_out_dir")
    sources = [ "${out_dir}/recovery-fdr/fuchsia.zbi" ]
    deps = [ ":recovery-fdr($target_toolchain)" ]
  }
}

if (is_fuchsia) {
  assert(current_toolchain == default_toolchain,
         "//build/images/* are only valid in the Fuchsia toolchain")

  group("recovery") {
    testonly = true
    public_deps = [ ":recovery-fdr" ]
  }

  _core_realm_deps = [
    "//src/diagnostics/realm:core_shard",
    "//src/firmware/fastboot-tcp:fastboot-tcp-core-shard",
    "//src/firmware/fastboot-usb:fastboot-usb-core-shard",
    "//src/recovery/factory_reset:factory_reset_core_shard",
    "//src/ui/bin/brightness_manager:auto-brightness_core_shard",
  ]

  core_realm_definition("core") {
    deps = _core_realm_deps +
           [ "//src/recovery/system:system_recovery_fdr_core_shard" ]
  }

  recovery_packages = board_recovery_package_labels + [
                        "//src/recovery/factory_reset",
                        "//src/ui/bin/brightness_manager:auto-brightness",

                        # Flattened from //src/sys/pkg:recovery
                        "//src/sys/pkg/bin/omaha-client",
                        "//src/sys/pkg/bin/system-updater",

                        # system-update-committer is a dependency of pkg-cache,
                        # but we don't want to do any verification in recovery
                        # mode, so we completely disable it.
                        "//src/sys/pkg/bin/system-update-committer:disable",
                      ]

  recovery_fdr_packages = recovery_packages
  recovery_fdr_packages += [ "//src/recovery/system:system_recovery_fdr" ]

  _storage_config = {
  }
  if (!fxfs_blob) {
    _storage_config = {
      storage = {
        filesystems = {
          volume = {
            fvm = {
              data = {
                data_filesystem_format = data_filesystem_format
              }
              blob = {
              }
            }
          }
        }
      }
    }
  }

  product_assembly_configuration("for-fdr") {
    platform = {
      # This uses eng so that the serial console is available for running as a test image.
      build_type = "eng"
      feature_set_level = "utility"
      graphics = {
        enable_virtual_console = false
      }
      forward_variables_from(_storage_config, "*")
    }
    product = {
    }
  }

  assembled_system("recovery-fdr") {
    image_name = "fuchsia"
    namespace = "recovery-fdr"

    base_packages = recovery_fdr_packages
    core_realm_definition = ":core"
    generate_vbmeta = use_vbmeta

    if (!fxfs_blob) {
      generate_fvm = !bootfs_only
      generate_fvm_fastboot = generate_fvm && assembly_generate_fvm_fastboot
      generate_fvm_nand = generate_fvm && assembly_generate_fvm_nand
    } else {
      generate_fxfs = !bootfs_only
    }

    ramdisk_in_zbi = true

    cmdline = []

    product_assembly_config_label = ":for-fdr"
    board_config_label = recovery_board_configuration_label

    if (custom_signing_script != "") {
      inputs = custom_signing_script_inputs
      generate_signed_zbi = true
    } else if (use_vboot) {
      inputs = vboot_action.inputs
      generate_signed_zbi = true
    }
  }
}
