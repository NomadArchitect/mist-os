// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package main

import (
	"flag"
	"fmt"
	"log"
	"strings"

	"go.fuchsia.dev/fuchsia/build/tools/gnerator"
	"go.starlark.net/starlark"
	"go.starlark.net/syntax"
)

var (
	bazelInputPath = flag.String("bazel_input_path", "", "Path to read the BUILD.bazel file from.")
)

// bazelBuiltins contains all known Bazel builtin functions. The starlark parser
// fail when it encounters any names not found in this dictionary, or not loaded
// in through a explicit load call.
var bazelBuiltins = starlark.StringDict{
	"select":  nil,
	"package": nil,
}

// commonFileHeader is the header to add to the top of every BUILD.gn file
// converted from a BUILD.bazel file.
const commonFileHeader = `# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
#  ________  _________  ________  ________
# |\   ____\|\___   ___\\   __  \|\   __  \
# \ \  \___|\|___ \  \_\ \  \|\  \ \  \|\  \
#  \ \_____  \   \ \  \ \ \  \\\  \ \   ____\
#   \|____|\  \   \ \  \ \ \  \\\  \ \  \___|
#     ____\_\  \   \ \__\ \ \_______\ \__\
#    |\_________\   \|__|  \|_______|\|__|
#    \|_________|
#
#
# AUTO-GENERATED - DO NOT EDIT!
#
# This file is auto-generated based on the BUILD.bazel file from the same
# directory. To regenerate this file after updating the corresponding
# BUILD.bazel, run:
#
#   > fx gnerate
#
# Please do NOT edit this file directly. Instead, edit the BUILD.bazel file and
# rerun the converter.

import("//build/tools/gnerator/bazel_migration.gni")
`

func main() {
	flag.Parse()

	if *bazelInputPath == "" {
		log.Fatal("--bazel_input_path is required, see --help")
	}

	opts := new(syntax.FileOptions)
	f, _, err := starlark.SourceProgramOptions(opts, *bazelInputPath, nil, bazelBuiltins.Has)
	if err != nil {
		log.Fatalf("Parsing input Bazel file %s: %v", *bazelInputPath, err)
	}

	var finalLines []string

	for _, stmt := range f.Stmts {
		lines, err := gnerator.StmtToGN(stmt)
		if err != nil {
			log.Fatalf("Failed to convert top-level statement in Bazel to GN: %v", err)
		}
		finalLines = append(finalLines, lines...)
	}
	fmt.Println(commonFileHeader)
	fmt.Println(strings.Join(finalLines, "\n"))
}
