# Copyright 2024 Mist Tecnologia LTDA. All rights reserved.
# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  # The absolute path of the sysroot that is used with the target toolchain.
  target_sysroot = ""
}

if (current_os == target_os && target_sysroot != "") {
  sysroot = target_sysroot
} else if (is_fuchsia) {
  # The sysroot generation does not differ between $shlib_toolchain and its
  # base toolchain, so always redirect to the base toolchain for this variant
  # rather than generating both identical copies for each variant.
  sysroot = get_label_info("//zircon/public/sysroot($variant_base_toolchain)",
                           "target_gen_dir")
} else if (is_mistos) {
  sysroot = get_label_info("//zircon/public/sysroot($variant_base_toolchain)",
                           "target_gen_dir")
} else if (is_linux) {
  if (is_host) {
    # Use an older Linux sysroot to compile host tools.
    sysroot = "//prebuilt/third_party/sysroot/linux"
  } else {
    sysroot = "//prebuilt/third_party/sysroot/ubuntu20.04"
  }
} else if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
  sysroot = mac_sdk_path
} else if (is_win) {
  # Building C/C++ on Windows requires a complicated SDK setup
  # and cannot be simplified as a single sysroot directory. Leave
  # it empty.
  sysroot = ""
} else if (current_cpu == "wasm32") {
  sysroot = ""
} else {
  # For other platforms that are not currently supported, do not define `sysroot`.
  # Fail the GN and notify user.
  assert(
      false,
      "$current_os is unsupported, no sysroot is defined for toolchain $current_toolchain")
}
