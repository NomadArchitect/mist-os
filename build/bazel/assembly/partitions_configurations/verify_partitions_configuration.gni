# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Compares a partitions configuration file with a golden target.
#
# Parameters
#
#  golden_partitions_config_target (required)
#    The GN target generating the partitions config used as golden.
#    This should be defined by a GN `generated_partitions_config` rule.
#    Type: string (label)
#
#  partitions_config_file (required)
#    The file used to compare against the golden.
#    Type: string (path)
#
#  deps
#  visibility
#
template("verify_partitions_configuration") {
  assert(defined(invoker.golden_partitions_config_target),
         "golden_partitions_config_target is required")
  assert(defined(invoker.partitions_config_file),
         "partitions_config_file is required")

  action(target_name) {
    testonly = true
    forward_variables_from(invoker, [ "visibility" ])
    _golden_partitions_config_out_dir =
        get_label_info(invoker.golden_partitions_config_target,
                       "target_out_dir")
    _golden_partitions_config_name =
        get_label_info(invoker.golden_partitions_config_target, "name")
    _golden_partitions_config_file = "${_golden_partitions_config_out_dir}/${_golden_partitions_config_name}/partitions_config.json"

    depfile = "${target_gen_dir}/${target_name}.d"

    inputs = [
      invoker.partitions_config_file,
      _golden_partitions_config_file,
    ]
    outputs = [ "${target_out_dir}/${target_name}/diff" ]

    script = "//build/bazel/assembly/partitions_configurations/verify_partitions_configuration.py"
    args = [
      "--partitions_config1",
      rebase_path(inputs[0], root_build_dir),
      "--partitions_config2",
      rebase_path(inputs[1], root_build_dir),
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--output",
      rebase_path(outputs[0], root_build_dir),
    ]

    deps = [ invoker.golden_partitions_config_target ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}
