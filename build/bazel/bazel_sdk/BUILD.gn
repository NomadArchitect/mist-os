# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/bazel_action.gni")
import("//build/bazel/bazel_fuchsia_sdk.gni")
import("//build/bazel/bazel_inputs.gni")
import("//build/bazel/generate_prebuilt_dir_content_hash.gni")
import("//build/bazel/logging.gni")
import("//build/bazel/remote_services.gni")
import("//build/config/fuchsia/platform_version.gni")
import("//build/config/fuchsia/target_api_level.gni")
import("//build/sdk/config.gni")
import("//build/sdk/idk.gni")
import("//build/sdk/sdk_collection.gni")

# The list of target cpu architectures supported by @fuchsia_sdk.
if (bazel_fuchsia_sdk_all_cpus) {
  _bazel_in_tree_idk_cpus = idk_target_cpus
} else {
  _bazel_in_tree_idk_cpus = [ target_cpu ]
}

# Generate a Bazel SDK directly from the content of ://sdk:bazel_in_tree_idk
# and verify that it matches the content of @fuchsia_sdk. This is performed
# using Bazel actions, to verify that there are no differences between
# the Starlark and Python executions of generated_sdk_build_rules.{bzl,py}.

bazel_input_directory("bazel_in_tree_idk.bazel_input") {
  generator = "//sdk:bazel_in_tree_idk"
  output_directory = "$root_build_dir/sdk/exported/bazel_in_tree_idk"
}

bazel_action("verify_fuchsia_sdk_repository") {
  command = "build"
  bazel_targets = [ ":verify_fuchsia_sdk_repository" ]
  deps = [ ":bazel_in_tree_idk.bazel_input" ]
  copy_outputs = [
    {
      bazel = "{{BAZEL_TARGET_OUT_DIR}}/{{BAZEL_TARGET_NAME}}"
      ninja = "$target_name.verified"
    },
  ]
}

# Run the Bazel SDK test suite against the content of the @fuchsia_sdk
# repository. This launches in a separate Bazel workspace, as many
# times as the number of CPU architectures used to populate the
# //sdk:bazel_in_tree_idk target.

foreach(cpu, _bazel_in_tree_idk_cpus) {
  # Run the test suite against the internal IDK used to populate
  # @fuchsia_sdk, for the current target cpu only.
  run_fuchsia_bazel_sdk_tests("bazel_sdk_tests_${cpu}") {
    target_cpu = cpu
  }
}

group("bazel_sdk_tests") {
  testonly = true
  deps = []
  foreach(cpu, _bazel_in_tree_idk_cpus) {
    deps += [ ":bazel_sdk_tests_${cpu}" ]
  }
}

group("tests") {
  testonly = true
  deps = [ ":bazel_sdk_tests" ]
}
