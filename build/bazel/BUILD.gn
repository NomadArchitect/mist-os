# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/developer_overrides.gni")
import("//build/assembly/sshd_config.gni")
import("//build/bazel/bazel_action.gni")
import("//build/bazel/bazel_inputs.gni")
import("//build/bazel/bazel_workspace.gni")
import("//build/bazel/generate_content_hash_file.gni")
import("//build/bazel/generate_prebuilt_dir_content_hash.gni")
import("//build/bazel/remote_services.gni")
import("//build/config/clang/clang.gni")
import("//build/images/vbmeta.gni")
import("//build/info/info.gni")
import("//build/product.gni")
import("//build/toolchain/rbe.gni")
import("//src/connectivity/policy/netcfg/delegated_network_provisioning.gni")

assert(
    current_toolchain == default_toolchain,
    "This BUILD.gn file should only be parsed in the default toolchain, to prevent generating Bazel workspace multiple times.")

action("generate_main_workspace") {
  script = "//build/bazel/scripts/update_workspace.py"

  # The update script tracks the file and directory entries of FUCHSIA_DIR
  # and will update the workspace if they change (i.e. if a file or
  # directory is added to / removed from FUCHSIA_DIR itself). However,
  # there is no way for Ninja to track these changes, and thus no way
  # to enforce the action to be run when this happens, even though these
  # are rare occurences, that could happen in the following cases:
  #
  # - A developer manually adds or removes a file to/from FUCHSIA_DIR.
  #   In this case, manually calling the script is needed, and this
  #   can be done by invoking any `fx bazel ...` command (even
  #   `fx bazel version`) or `fx build bazel_workspace`.
  #
  # - A `jiri update` modifies the content of FUCHSIA_DIR. Depend on
  #   the top-level //.git/index file to detect this. Note that the
  #   script will not necessarily update the workspace in this case,
  #   this simply ensures that it is run to do its checks.
  #
  # - A manual `git checkout HEAD^ -- .` command will modify the local
  #   workspace without modifying the index, so also depend on
  #   //.git/HEAD to detect this.
  #
  inputs = [
    "//.git/index",
    "//.git/HEAD",

    # The bazel prebuilt is an implicit input for the script.
    "//prebuilt/third_party/bazel/${host_os}-${host_cpu}/bazel",

    # The script expands these templates
    "//build/bazel/templates/template.bazel.sh",
    "//build/bazel/templates/template.bazelrc",
    "//build/bazel/templates/template.remote_services.bazelrc",
    "//build/bazel/templates/template.platform_mappings",

    # The script reads this configuration file
    "//build/bazel/config/main_workspace_top_dir",

    # The script imports these python files
    "//build/bazel/scripts/check_ninja_build_plan.py",
    "//build/bazel/scripts/compute_content_hash.py",
    "//build/bazel/scripts/get_git_head_commit.py",

    # The script reads RBE configs
    rewrapper_config_file,
    reproxy_config_file,
  ]

  # This dependency is needed to properly populate the @fuchsia_sdk repository.
  deps = [ "//sdk:bazel_in_tree_idk" ]

  # This dependency is needed to properly populate the @internal_sdk repository.
  # (see https://fxbug.dev/42063353).
  # TODO(https://fxbug.dev/333907192): Remove this.
  deps += [ "//sdk:bazel_internal_only_idk" ]

  depfile = "${target_gen_dir}/${target_name}.d"

  outputs = [
    # LINT.IfChange
    "${bazel_main_top_dir}/bazel",
    "${bazel_main_top_dir}/download_config_file",
    "${bazel_main_top_dir}/generated-info.json",
    "${bazel_main_top_dir}/workspace/.bazelrc",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/args.json",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/git",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/jiri_snapshot.xml",

    # The list of content hash files
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/bazel_rules_fuchsia.hash",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/boringssl.hash",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/com_google_googletest.hash",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/fuchsia_clang.hash",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/prebuilt_clang.hash",
    "${bazel_main_top_dir}/workspace/fuchsia_build_generated/prebuilt_python.hash",

    # Other files.
    "${bazel_main_top_dir}/workspace/platform_mappings",
    "${bazel_main_top_dir}/workspace/WORKSPACE.bazel",

    # LINT.ThenChange(scripts/update_workspace.py)
  ]

  args = [
    # rebased_clang_prefix points to bin under clang root.
    "--clang_dir",
    get_path_info(rebased_clang_prefix, "dir"),
    "--gn_output_dir",
    rebase_path(root_build_dir, root_build_dir),
    "--target_arch",
    target_cpu,
    "--depfile",
    rebase_path(depfile, root_build_dir),
    "--remote_download_outputs",
    bazel_rbe_download_outputs,
  ]

  # The generated wrapper includes the absolute path of the Ninja output
  # directory, which will be read by Bazel repository rules during workspace
  # setup.
  no_output_dir_leaks = false
}

# Generate a symlink to the @fuchsia_sdk repository, after ensuring it was
# properly populated by Bazel. The symlink has a stable path of
# $BAZEL_TOPDIR/fuchsia_sdk while the actual location of the repository
# depends on Bazel internals (e.g. whether BzlMod is enabled or not).
group("generate_fuchsia_sdk_repository") {
  deps = [ ":final_fuchsia_in_tree_sdk" ]
}

generate_content_hash_file("fuchsia_in_tree_idk.hash") {
  source_paths = [ "$root_build_dir/sdk/exported/bazel_in_tree_idk" ]
  output = "${bazel_main_top_dir}/workspace/fuchsia_build_generated/fuchsia_in_tree_idk.hash"
  deps = [
    # For now ensure this is run after update_workspace.py to avoid the content
    # of fuchsia_build_generated/ from being rewritten by it.
    ":generate_main_workspace",
    "//sdk:bazel_in_tree_idk",
  ]
}

generate_content_hash_file("fuchsia_internal_only_idk.hash") {
  source_paths = [ "$root_build_dir/sdk/exported/bazel_internal_only_idk" ]
  output = "${bazel_main_top_dir}/workspace/fuchsia_build_generated/fuchsia_internal_only_idk.hash"
  deps = [
    # For now ensure this is run after update_workspace.py to avoid the content
    # of fuchsia_build_generated/ from being rewritten by it.
    ":generate_main_workspace",
    "//sdk:bazel_internal_only_idk",
  ]
}

# The @fuchsia_sdk repository is populated from the same content as @fuchsia_in_tree_idk
# so create a symlink for its content hash for better speed. Then do the same for
# @internal_sdk and @fuchsia_internal_only_idk.

template("_create_content_hash_symlink") {
  _link_target = invoker.target
  _output =
      "${bazel_main_top_dir}/workspace/fuchsia_build_generated/$target_name"
  _input =
      "${bazel_main_top_dir}/workspace/fuchsia_build_generated/${_link_target}"
  _rebased_output = rebase_path(_output, root_build_dir)
  action(target_name) {
    script = "/bin/sh"
    outputs = [ _output ]
    inputs = [ _input ]
    args = [
      "-c",
      "rm -f ${_rebased_output} && ln -sf ${_link_target} ${_rebased_output}",
    ]
    deps = invoker.deps
  }
}

_create_content_hash_symlink("fuchsia_sdk.hash") {
  target = "fuchsia_in_tree_idk.hash"
  deps = [ ":fuchsia_in_tree_idk.hash" ]
}

_create_content_hash_symlink("internal_sdk.hash") {
  target = "fuchsia_internal_only_idk.hash"
  deps = [ ":fuchsia_internal_only_idk.hash" ]
}

# Generate a symlink that points to the final version of the in-tree IDK
# Nothing should depend on this directly, as it should only be used
# to run the Bazel SDK Test suite, see //build/bazel_sdk/tests/README.md
bazel_action("final_fuchsia_in_tree_idk") {
  command = "build"

  # NOTE: The list item below should be @fuchsia_in_tree_idk//:final_idk
  # but bazel_action() does not support Bazel target labels that belong
  # to an external repository. To work around this, an alias() target
  # is created in //build/bazel/bazel_sdk:BUILD.bazel, and the
  # `bazel` path in the scope below is explicit instead of using
  # substitution expressions such as {{BAZEL_TARGET_OUT_DIR}}.
  bazel_targets = [ "//build/bazel/bazel_sdk:final_fuchsia_in_tree_idk" ]
  deps = [ "//build/bazel/bazel_sdk:bazel_in_tree_idk.bazel_input" ]

  # We want the symlink to appear as gen/build/bazel/fuchsia_in_idk
  ninja_base_dir = target_gen_dir

  final_symlink_outputs = [
    {
      bazel = "bazel-bin/external/fuchsia_in_tree_idk/final_idk"
      ninja = "fuchsia_in_tree_idk"
    },
  ]
}

# Generate a symlink that points to the final version of the Bazel SDK
# used by the platform build.
bazel_action("final_fuchsia_in_tree_sdk") {
  command = "build"
  bazel_targets = [
    "//build/bazel/bazel_sdk:final_fuchsia_in_tree_sdk",
    "//build/bazel/bazel_sdk:verify_final_fuchsia_in_tree_sdk",
  ]
  deps = [ "//build/bazel/bazel_sdk:bazel_in_tree_idk.bazel_input" ]

  # We want the symlink to appear as $BUILD_DIR/gen/build/bazel/fuchsia_sdk
  ninja_base_dir = target_gen_dir

  final_symlink_outputs = [
    {
      bazel = "{{BAZEL_TARGET_OUT_DIR}}/{{BAZEL_TARGET_NAME}}"
      ninja = "fuchsia_sdk"
    },
  ]

  metadata = {
    # Used by the //:bazel_sdk_info build API module target.
    bazel_sdk_info = [
      {
        location = rebase_path("$target_gen_dir/fuchsia_sdk", root_build_dir)
      },
    ]
  }
}

# Generate content hash files for python and Clang toolchains.
#
# These will be used to trigger new runs of the bazel_sdk_test_xxx targets
# if the content of these directory changes. And the
# //build/bazel_sdk/tests/script/bazel_test.py script will ensure that their
# values are passed to the test workspace.
#
generate_prebuilt_dir_content_hash(prebuilt_content_hash_targets.python) {
  source_dir = "//prebuilt/third_party/python3/${host_os}-${host_cpu}"
  output = prebuilt_content_hash_files.python
  cipd_name = "cpython3"
  exclude_suffixes = [ ".pyc" ]
}

generate_prebuilt_dir_content_hash(prebuilt_content_hash_targets.clang) {
  # clang_prefix points to the "bin" directory in clang toolchain, so go one
  # level up to get the clang root dir.
  source_dir = get_path_info(clang_prefix, "dir")
  output = prebuilt_content_hash_files.clang
  cipd_name = "clang"
}

# Generate remote service configs into a bazelrc.
action("remote_services_bazelrc") {
  script = "//build/bazel/scripts/generate_services_bazelrc.py"
  _output = "$target_out_dir/remote_services.bazelrc"
  outputs = [ _output ]
  _template = "//build/bazel/templates/template.remote_services.bazelrc"
  _configs = [
    "//build/rbe/fuchsia-reproxy.cfg",
    "//build/rbe/fuchsia-rewrapper.cfg",
  ]
  inputs = [ _template ] + _configs
  args = [
           "--template",
           rebase_path(_template, root_build_dir),
           "--output",
           rebase_path(_output, root_build_dir),
           "--remote_download_outputs",
           bazel_rbe_download_outputs,
           "--cfgs",
         ] + rebase_path(_configs, root_build_dir)
}

# Pass the map of which developer overrides to use with which assembly label to
# Bazel.
generated_file("assembly_developer_overrides") {
  outputs = [ "${root_gen_dir}/assembly_developer_overrides.json" ]
  contents = all_product_assembly_overrides
  output_conversion = "json"
}

group("tests") {
  testonly = true
  deps = [
    "bazel_sdk:tests",
    "fuchsia_idk:tests",
    "scripts:tests",
  ]
}

# bazel_action_allowlist is a list of all GN actions that invoke Bazel.
#
# To convert/add new Bazel targets, instead of adding to this list, prefer:
#
#   1. Expanding existing bazel_build_groups in GN
#   2. Add targets as deps in the Bazel build graph
#
# NOTE: Bazel actions in GN are known to introduce performance overheads in
# builds when they are included. Each included bazel action is expected to make
# the entire build O(seconds) slower. While the Fuchsia build team is working on
# improving this, please request a review with us if you want to change this
# list.
group("bazel_action_allowlist") {
  # Bazel assembly
  visibility = [
    "//products/microfuchsia:*",
    "//products/minimal:*",
    "//products/terminal:*",
    "//products/workbench:*",
    "//products/zedboot:*",
  ]

  # Bazel assembly used in tests
  visibility += [
    "//build/images/updates/tests:bazel_pb_bazel_build_group",
    "//src/power/testing/system-integration/msd-arm-mali/custom-product:product_bundle_bazel_build_group",
    "//src/power/testing/system-integration/storage/custom-product:product_bundle_bazel_build_group",
  ]

  # Bazel build related targets
  visibility += [
    "//build/bazel:final_fuchsia_in_tree_idk",
    "//build/bazel:final_fuchsia_in_tree_sdk",
    "//build/bazel/assembly:verify_assembly_configs.bazel_build_group",
    "//build/bazel/bazel_sdk:verify_fuchsia_sdk_repository",
    "//build/bazel/bazel_sdk/docs:docs.bazel_build_group",
    "//build/bazel/examples:examples",
  ]

  visibility += [ "//vendor/*" ]

  visibility += [
    "//boards/vim3:bazel_drivers",
    "//examples/drivers/simple/dfv2:bazel_package.bazel_build",
    "//examples/drivers/simple/dfv2:simple-driver-test.bazel_build",
    "//examples/drivers/template:bazel_package.bazel_build",
    "//examples/drivers/template:template-test.bazel_build",
    "//examples/drivers/transport/driver/v2:child_bazel_package.bazel_build",
    "//examples/drivers/transport/driver/v2:driver-transport-test.bazel_build",
    "//examples/drivers/transport/driver/v2:parent_bazel_package.bazel_build",
    "//sdk/lib/driver/devicetree/examples/example-board:bazel_package.bazel_build",
    "//sdk/lib/driver/devicetree/examples/example-board:example-board-test-package.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host:bazel_test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host:bt-host.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/att:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/common:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/controllers:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/fidl:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/gap:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/gatt:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/hci:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/hci-spec:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/iso:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/l2cap:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/sco:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/sdp:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/sm:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/socket:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/testing:test_pkg.bazel_build",
    "//src/connectivity/bluetooth/core/bt-host/transport:test_pkg.bazel_build",
    "//src/devices/block/drivers/aml-sdmmc:aml-sdmmc-no-banjo-bazel-package.bazel_build",
    "//src/devices/board/drivers/vim3-devicetree:bazel_package.bazel_build",
    "//src/devices/board/drivers/vim3-devicetree:vim3-devicetree-test-package.bazel_build",
    "//src/devices/clock/drivers/vim3-clk:bazel_package.bazel_build",
    "//src/devices/clock/drivers/vim3-clk:vim3-clk-test-package.bazel_build",
    "//src/devices/gpio/drivers/aml-gpio:aml-gpio-test-package.bazel_build",
    "//src/devices/gpio/drivers/aml-gpio:bazel_package.bazel_build",
    "//src/devices/i2c/drivers/aml-i2c:aml-i2c-test-package.bazel_build",
    "//src/devices/i2c/drivers/aml-i2c:bazel_package.bazel_build",
    "//src/devices/spmi/lib/hwreg-spmi:spmi-hwreg-test.bazel_build",
    "//src/devices/usb/drivers/aml-usb-phy:aml-usb-phy-test-package.bazel_build",
    "//src/devices/usb/drivers/aml-usb-phy:bazel_package.bazel_build",
    "//src/devices/usb/drivers/dwc3:bazel_package.bazel_build",
    "//src/devices/usb/drivers/dwc3:dwc3-test-package.bazel_build",
    "//src/diagnostics/archivist/tests/pipeline_test:pipeline_test.bazel_build",
    "//src/media/audio/drivers/aml-g12-tdm:aml-g12-composite-bazel-package.bazel_build",
    "//src/media/audio/drivers/aml-g12-tdm:aml-g12-composite-test-package.bazel_build",
    "//src/ui/input/drivers/adc-buttons:adc-buttons-test-package.bazel_build",
    "//src/ui/input/drivers/adc-buttons:bazel_package.bazel_build",
  ]
}
