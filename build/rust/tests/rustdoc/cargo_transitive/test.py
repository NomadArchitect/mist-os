# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Generated by //build/rust/tests/create_rustdoc_tests.py
# Test explanation: We use the regular and transitive dependencies. Both should appear in the item docs for the final crate.

import unittest  # noqa
from sys import argv
from unittest import TestCase
from zipfile import Path

_doc_zip = argv.pop()


class Test(TestCase):
    _path: Path

    @classmethod
    def setUpClass(cls) -> None:
        cls._path = Path(_doc_zip)

    def testFileExists0(self) -> None:
        self.assertTrue(
            (self._path / "index.html").is_file(),
            msg=f"expected `index.html` to be a file in {repr(self._path)}",
        )

    def testFileContains1(self) -> None:
        found = (self._path / "index.html").read_text()
        self.assertIn(
            "List of all crates",
            found,
        )

    def testFileContains2(self) -> None:
        found = (self._path / "index.html").read_text()
        self.assertNotIn(
            "quebec",
            found,
        )

    def testFileContains3(self) -> None:
        found = (self._path / "index.html").read_text()
        self.assertNotIn(
            "tango",
            found,
        )

    def testFileContains4(self) -> None:
        found = (self._path / "index.html").read_text()
        self.assertIn(
            "sierra",
            found,
        )

    def testFileExists5(self) -> None:
        self.assertFalse(
            (self._path / "quebec/struct.Quebec.html").is_file(),
            msg=f"expected `quebec/struct.Quebec.html` to not be a file in {repr(self._path)}",
        )

    def testFileExists6(self) -> None:
        self.assertFalse(
            (self._path / "tango/trait.Tango.html").is_file(),
            msg=f"expected `tango/trait.Tango.html` to not be a file in {repr(self._path)}",
        )

    def testFileExists7(self) -> None:
        self.assertTrue(
            (self._path / "sierra/struct.Sierra.html").is_file(),
            msg=f"expected `sierra/struct.Sierra.html` to be a file in {repr(self._path)}",
        )

    def testFileContainsRaw8(self) -> None:
        found = (self._path / "sierra/struct.Sierra.html").read_text()
        self.assertIn(
            "Tango",
            found,
        )

    def testFileContainsRaw9(self) -> None:
        found = (self._path / "trait.impl/tango/trait.Tango.js").read_text()
        self.assertIn(
            "struct.Sierra.html",
            found,
        )

    def testFileContainsRaw10(self) -> None:
        found = (self._path / "search-index.js").read_text()
        self.assertNotIn(
            "Tango",
            found,
        )

    def testFileContainsRaw11(self) -> None:
        found = (self._path / "search-index.js").read_text()
        self.assertNotIn(
            "Quebec",
            found,
        )

    def testFileContainsRaw12(self) -> None:
        found = (self._path / "search-index.js").read_text()
        self.assertIn(
            "Sierra",
            found,
        )
