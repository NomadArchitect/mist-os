# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load(
    "@fuchsia_sdk//fuchsia:defs.bzl",
    "fuchsia_cc_binary",
    "fuchsia_cc_test",
    "fuchsia_component",
    "fuchsia_component_manifest",
    "fuchsia_package",
    "fuchsia_package_resource",
    "fuchsia_structured_config_cpp_elf_lib",
    "fuchsia_structured_config_values",
    "fuchsia_test_component",
    "fuchsia_test_package",
    "fuchsia_unittest_package",
)
load("//test_utils:make_file.bzl", "make_file")

fuchsia_package(
    name = "pkg",
    package_name = "pkg_for_test",
    components = [
        ":cc_component",
        ":empty_component",
    ],
    fuchsia_api_level = "HEAD",
    resources = [
        ":sc-values",
        ":simple_file_resource",
    ],
    visibility = ["//visibility:public"],
)

fuchsia_package(
    name = "pkg_with_static_cpp",
    package_name = "pkg_with_static_cpp_for_test",
    components = [
        ":cc_component_static_cpp",
    ],
    fuchsia_api_level = "HEAD",
    visibility = ["//visibility:public"],
)

fuchsia_package(
    name = "pkg_with_subpkg",
    package_name = "pkg_with_subpkg_for_test",
    components = [":empty_component"],
    fuchsia_api_level = "HEAD",
    subpackages = [":pkg"],
    visibility = ["//visibility:public"],
)

fuchsia_test_package(
    name = "test_pkg",
    package_name = "test_pkg_for_test",
    components = [
        ":empty_component",
    ],
    fuchsia_api_level = "HEAD",
    resources = [":simple_file_resource"],
    test_components = [
        ":cc_test_component",
    ],
    visibility = ["//visibility:public"],
)

fuchsia_unittest_package(
    name = "unittest_pkg",
    package_name = "unittest_pkg_for_test",
    fuchsia_api_level = "HEAD",
    unit_tests = [
        ":cc_unit_test",
    ],
    visibility = ["//visibility:public"],
)

# Test Resources
make_file(
    name = "simple_file",
    content = "foo",
    filename = "text_file.txt",
)

fuchsia_package_resource(
    name = "simple_file_resource",
    src = ":simple_file",
    dest = "data/text_file.txt",
)

make_file(
    name = "cc_main",
    content = "int main() { return 0; } \n",
    filename = "main.cc",
)

fuchsia_cc_binary(
    name = "cc_bin",
    srcs = [":cc_main"],
)

fuchsia_cc_binary(
    name = "cc_bin_static_cpp",
    srcs = [":cc_main"],
    features = ["static_cpp_standard_library"],
)

fuchsia_component_manifest(
    name = "manifest",
    component_name = "cc_component",
    content = """{
    use: [
        {
            config: "fuchsia.power.SuspendEnabled",
            key: "enable_suspend",
            type: "bool",
        },
    ],
    config: {
        device_path: {
            type: "string",
            max_size: 512,
            mutability: [ "parent" ],
        },
    },
}""",
)

fuchsia_component_manifest(
    name = "test_component_manifest",
    component_name = "cc_test",
    content = """{
    include: [
        "syslog/client.shard.cml",
        "sys/testing/elf_test_runner.shard.cml",
    ],
    program: {
        binary: 'bin/cc_test',
    },
    use: [
    ],
}""",
)

fuchsia_component(
    name = "cc_component",
    manifest = ":manifest",
    deps = [
        ":cc_bin",
    ],
)

fuchsia_component(
    name = "cc_component_static_cpp",
    manifest = ":manifest",
    deps = [
        ":cc_bin_static_cpp",
    ],
)

fuchsia_structured_config_cpp_elf_lib(
    name = "component-config",
    cm_label = ":manifest",
)

fuchsia_structured_config_values(
    name = "sc-values",
    cm_label = ":manifest",
    cvf_output_name = "component-config",
    values = {
        "enable_suspend": False,
        "device_path": "/dev/class/bt-hci/000",
    },
)

# Note: the test package contains a fuchsia_cc_test()
# that depends on a non-testonly cc_library() to demontrate
# the issue that requires adding
# --experimental_retain_test_configuration_across_testonly
# to every project .bazelrc :-(
make_file(
    name = "cc_lib_src",
    content = "int what() { return 42; } \n",
    filename = "lib.cc",
)

cc_library(
    name = "cc_lib",
    srcs = [":cc_lib_src"],
)

fuchsia_cc_test(
    name = "cc_test",
    srcs = [":cc_main"],
    deps = [":cc_lib"],
)

fuchsia_cc_test(
    name = "cc_unit_test",
    srcs = [":cc_main"],
    deps = [":cc_lib"],
)

fuchsia_test_component(
    name = "cc_test_component",
    manifest = ":test_component_manifest",
    deps = [
        ":cc_test",
    ],
)

fuchsia_component_manifest(
    name = "empty_component_manifest",
    component_name = "empty_component",
    content = "{}",
)

fuchsia_component(
    name = "empty_component",
    manifest = ":empty_component_manifest",
    deps = [],
)
