# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Public Fuchsia rules.

load("//fuchsia/private:fuchsia_api_level.bzl", "fuchsia_api_level")
load(
    "//fuchsia/private/assembly:fuchsia_assembly_developer_overrides.bzl",
    "fuchsia_assembly_developer_overrides_list",
)

package(default_visibility = ["//visibility:public"])

# Specifies all of the starlark files in this repo
filegroup(
    name = "bzl_srcs",
    srcs = [
        # These are the top level public API that users should import.
        # Do not use a glob here to avoid adding public files that we do not
        # want to expose.
        "assembly.bzl",
        "clang.bzl",
        "deps.bzl",
        "defs.bzl",
        "products.bzl",
        "licenses.bzl",
        "workflows.bzl",

        # These are the fuchsia specific files that are loaded by the top level
        # files.
        "//:bzl_srcs",
        "//common:bzl_srcs",
        "//fuchsia/constraints:bzl_srcs",
        "//fuchsia/constraints/platforms:bzl_srcs",
        "//fuchsia/private:bzl_srcs",
        "//fuchsia/private/assembly:bzl_srcs",
        "//fuchsia/private/licenses:bzl_srcs",
        "//fuchsia/private/workflows:bzl_srcs",
        "//fuchsia/workspace:bzl_srcs",
        "//fuchsia/workspace/clang_templates:bzl_srcs",
        "//fuchsia/workspace/sdk_templates:bzl_srcs",

        # External libraries that get loaded by our rules
        "@bazel_skylib//:distribution",
        "@rules_license//rules_gathering:standard_package",
        "@rules_license//rules:standard_package",
        "@platforms//:srcs",
        "@host_platform//:constraints.bzl",

        # We cannot depend on @bazel_tools//tools:bzl_srcs since it will pull in
        # rules_java which we do not want to depend on. Depend on the specific
        # files instead of the filegroup for bazel_tools
        "@bazel_tools//tools/build_defs/cc:action_names.bzl",
        "@bazel_tools//tools/cpp:toolchain_utils.bzl",
        "@bazel_tools//tools/build_defs/repo:cache.bzl",
        "@bazel_tools//tools/build_defs/repo:http.bzl",
        "@bazel_tools//tools/build_defs/repo:utils.bzl",
    ],
)

# Specifies the target Fuchsia API level for Fuchsia artifacts.
# Used both as a command line flag to override levels specified for the package
# or the repository default (`repository_default_fuchsia_api_level`) and to
# store the API level in effect after the fuchsia_transition.
# Use `get_fuchsia_api_level()` to obtain that value; do not read this setting
# directly. The build will fail if it is not set to a supported API level when
# used.
fuchsia_api_level(
    # LINT.IfChange
    name = "fuchsia_api_level",
    # LINT.ThenChange(private/fuchsia_api_level.bzl)
    build_setting_default = "",
    target_compatible_with = ["@platforms//os:fuchsia"],
)

# Specifies the default target Fuchsia API level for the repository. This value
# will be used if the level for an artifact is not specified in any other way,
# such as by the setting above or the fuchsia_package rule's attribute.
# The assigned value is NOT validated unless it is used.
fuchsia_api_level(
    # LINT.IfChange
    name = "repository_default_fuchsia_api_level",
    # LINT.ThenChange(private/fuchsia_transition.bzl)
    build_setting_default = "",
    target_compatible_with = ["@platforms//os:fuchsia"],
)

# Set --@rules_fuchsia//fuchsia:assembly_developer_overrides_list=<label>
# to point to a fuchsia_assembly_developer_overrides_list() target.
label_flag(
    name = "assembly_developer_overrides_list",
    build_setting_default = ":empty_assembly_developer_overrides_list",
)

#TODO(386845692) remove this alias once all users have been migrated.
alias(
    name = "fuchsia_targets_enabled",
    actual = "@rules_fuchsia//fuchsia/flags:fuchsia_targets_enabled",
    deprecation = "Use @rules_fuchsia//fuchsia/flags:fuchsia_targets_enabled instead",
)

fuchsia_assembly_developer_overrides_list(
    name = "empty_assembly_developer_overrides_list",
)

#TODO(386793401) remove this alias once all users have been migrated.
alias(
    name = "toolchain",
    actual = "//fuchsia/toolchains:sdk",
    deprecation = "Use //fuchsia/toolchains:sdk instead",
)

# Toolchain type for the Fuchsia devicetree toolchain.
toolchain_type(
    name = "devicetree_toolchain_type",
)
