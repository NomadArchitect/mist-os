# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Constraints and platforms for Fuchsia.

load("@bazel_skylib//lib:selects.bzl", "selects")
load("//:api_version.bzl", "INTERNAL_ONLY_VALID_TARGET_APIS")
load(":target_compatibility.bzl", "COMPATIBILITY", "define_host_can_build_fuchsia_flag")

package(
    default_visibility = ["//:__subpackages__"],
)

filegroup(
    name = "bzl_srcs",
    srcs = glob(["*.bzl"]),
    visibility = ["//fuchsia:__pkg__"],
)

# An internal flag used by the "can_host_build_fuchsia" condition below.
define_host_can_build_fuchsia_flag(
    name = "_host_can_build_fuchsia_flag",
)

# A condition that holds True if the current Bazel host system is
# supported by the Fuchsia SDK cross-toolchain.
config_setting(
    name = "can_host_build_fuchsia",
    flag_values = {
        ":_host_can_build_fuchsia_flag": "yes",
    },
)

# The version of the Fuchsia toolchain. Specific to particular local builds of
# Fuchsia or particular versions of the IDK.
constraint_setting(
    name = "version",
    visibility = ["//visibility:public"],
)

# Target API level constraints.
[
    config_setting(
        name = "api_level_%s" % api_level.api_level,
        flag_values = {
            "//fuchsia:fuchsia_api_level": api_level.api_level,
        },
    )
    for api_level in INTERNAL_ONLY_VALID_TARGET_APIS
]

# CPU based configurations
selects.config_setting_group(
    name = "cpu_arm64",
    match_any = [
        ":cpu_arm64_flag",
        "@platforms//cpu:arm64",
    ],
)

selects.config_setting_group(
    name = "cpu_x64",
    match_any = [
        ":cpu_x64_flag",
        "@platforms//cpu:x86_64",
    ],
)

selects.config_setting_group(
    name = "cpu_riscv64",
    match_any = [
        ":cpu_riscv64_flag",
        "@platforms//cpu:riscv64",
    ],
)

config_setting(
    name = "cpu_arm64_flag",
    values = {"cpu": "aarch64"},
)

config_setting(
    name = "cpu_x64_flag",
    values = {"cpu": "x86_64"},
)

config_setting(
    name = "cpu_riscv64_flag",
    values = {"cpu": "riscv64"},
)

selects.config_setting_group(
    name = "is_fuchsia_arm64",
    match_all = [
        "@platforms//os:fuchsia",
        ":cpu_arm64",
    ],
)

selects.config_setting_group(
    name = "is_fuchsia_x64",
    match_all = [
        "@platforms//os:fuchsia",
        ":cpu_x64",
    ],
)

selects.config_setting_group(
    name = "is_fuchsia_riscv64",
    match_all = [
        "@platforms//os:fuchsia",
        ":cpu_riscv64",
    ],
)

# Variants based configuration
[
    selects.config_setting_group(
        name = "is_%s_api_%s" % (
            cpu,
            api_level.api_level,
        ),
        match_all = [
            "@platforms//os:fuchsia",
            ":cpu_%s" % cpu,
            ":api_level_%s" % api_level.api_level,
        ],
    )
    for api_level in INTERNAL_ONLY_VALID_TARGET_APIS
    for cpu in [
        "arm64",
        "x64",
        "riscv64",
    ]
]

# This is a stub target specifying a `target_compatible_with` clause effectively constraining the
# acceptable exec build platform to linux-amd64.
#
# For more context see `COMPATIBILITY`, `COMPATIBILITY.HOST_DEPS` in
# `//build/bazel_sdk/bazel_rules_fuchsia/fuchsia/constraints/target_compatibility.bzl`.
filegroup(
    name = "check_host_compatibility",
    target_compatible_with = COMPATIBILITY.HOST_CONDITION,
    visibility = ["//visibility:public"],
)

# This is a stub target constraining the target os to fuchsia and the exec build platform to
# linux-amd64 via `target_compatible_with` -- effectively a superset of `:check_host_compatibility`.
#
# For more context see `COMPATIBILITY`, `COMPATIBILITY.FUCHSIA_DEPS` in
# `//build/bazel_sdk/bazel_rules_fuchsia/fuchsia/constraints/target_compatibility.bzl`.
filegroup(
    name = "check_fuchsia_compatibility",
    target_compatible_with = COMPATIBILITY.FUCHSIA_CONDITION,
    visibility = ["//visibility:public"],
)
