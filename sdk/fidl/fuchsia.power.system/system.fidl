// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/// The system activity governor (SAG) is a subsystem of the power framework
/// that manages the execution and suspend state of the hardware platform. It
/// also allows observers to watch for suspend/resume transitions of the
/// platform.
///
/// Other components can create dependencies on SAG's power elements with
/// [`fuchsia.power.broker/ElementControl`] to influence SAG's behavior
/// including preventing system suspension.
///
/// The power elements that SAG creates and manages are as follows:
/// * [`fuchsia.power.system/ExecutionState`]
/// * [`fuchsia.power.system/ApplicationActivity`]
/// * [`fuchsia.power.system/Cpu`]
///
/// # Internal Dependency Diagram
/// ```
///                +--------------------+                  +---------------------------------+
///                | **ExecutionState** |                  |     **ApplicationActivity**     |
///                +--------------------+                  +---------------------------------+
///                |       ACTIVE       |<-----------------|             ACTIVE              |
///                +--------------------+                  +---------------------------------+
/// +--------------|     SUSPENDING     |<--------+        |            INACTIVE             |
/// |              |                    |         |        +---------------------------------+
/// |              +--------------------+         |
/// |              |      INACTIVE      |         |        +---------------------------------+
/// |              +--------------------+         |        |         **WakeHandling**        |
/// |                                             |        +---------------------------------+
/// |                                             +--------|             ACTIVE              |
/// |                                                      +---------------------------------+
/// |                                                      |            INACTIVE             |
/// |                                                      +---------------------------------+
/// |
/// |    +---------------------------------+
/// |    |             **CPU**             |
/// |    +---------------------------------+
/// +--->|             ACTIVE              |
///      +---------------------------------+
///      |            INACTIVE             |
///      +---------------------------------+
/// ```
///
/// # Usage
///
/// To prevent system suspension, a component can create an assertive dependency
/// using the `assertive_dependency_token` from `ApplicationActivity` or
/// `WakeHandling`. If the dependency causes the power level of
/// `ApplicationActivity` and/or `WakeHandling` to be raised to
/// [`fuchsia.power.system/ApplicationActivityPowerLevel.ACTIVE`] and/or
/// [`fuchsia.power.system/WakeHandlingPowerLevel.ACTIVE`], respectively, SAG
/// will not trigger system suspension until their power levels drop to
/// `INACTIVE`.
///
/// If a component is managing a power element that requires the platform to be
/// in a specific state, an opportunistic dependency can be created on
/// `ExecutionState`. When `ExecutionState` changes its power level, all
/// dependent power elements will power down first. Ideally, this forces the
/// entire system into a configuration with a lower power consumption as the
/// power level of `ExecutionState` decreases.
@available(added=HEAD)
library fuchsia.power.system;

using fuchsia.power.broker;
using zx;

// TODO(https://fxbug.dev/339474151): Update this when EventPair is the standard
// token for leases in Power Broker.
alias LeaseToken = zx.Handle:EVENTPAIR;

/// Holds a token to the execution state power element.
///
/// Power elements intentionally cannot take assertive dependencies on this power
/// element. Elements that need to force the execution state to ACTIVE can use
/// ApplicationActivity which provides more semantic meaning to the
/// dependencies.
///
/// [`fuchsia.power.system/ExecutionStateLevel`] defines the power levels supported by this power element.
type ExecutionState = resource table {
    1: opportunistic_dependency_token fuchsia.power.broker.DependencyToken;
};

/// Execution state power levels
///
/// Elements should take an opportunistic dependency on `ExecutionStateLevel::ACTIVE`
/// to ensure that the element will be suspended when the rest of the system
/// suspends.
///
/// Drivers can take an opportunistic dependency on either
/// `ExecutionStateLevel::SUSPENDING` or `ExecutionStateLevel::ACTIVE` and
/// request a persistent lease on this state to ensure that their element's
/// power level is always activated when the system comes out of a suspend
/// state.
type ExecutionStateLevel = flexible enum : uint8 {
    INACTIVE = 0;
    SUSPENDING = 1;
    ACTIVE = 2;
};

/// Holds tokens to the CPU power element.
///
/// [`fuchsia.power.system/CpuLevel`] defines the power levels supported by this power element.
type Cpu = resource table {
    1: assertive_dependency_token fuchsia.power.broker.DependencyToken;
};

/// CPU power levels
///
/// Elements should take an assertive dependency on `CpuLevel::ACTIVE`
/// to ensure that the element will be suspended before the CPU suspends.
type CpuLevel = flexible enum : uint8 {
    INACTIVE = 0;
    ACTIVE = 1;
};

/// Holds tokens to the application activity power element.
///
/// [`fuchsia.power.system/ApplicationActivityLevel`] defines the power levels supported by this power element.
type ApplicationActivity = resource table {
    1: assertive_dependency_token fuchsia.power.broker.DependencyToken;
};

/// Application activity power levels
///
/// Elements that need to keep the system from suspending should take an assertive
/// dependency on `ApplicationActivityLevel::ACTIVE`. When these components are
/// performing work, they should request a lease to ensure the system remains
/// active, and drop the lease when they are done.
type ApplicationActivityLevel = flexible enum : uint8 {
    INACTIVE = 0;
    ACTIVE = 1;
};

/// A collection of power elements that are managed by the activity governor.
type PowerElements = resource table {
    1: execution_state ExecutionState;
    3: application_activity ApplicationActivity;
};

/// Error codes for responses from `AddExecutionStateDependency` in
/// [`fuchsia.power.system/CpuElementManager`].
type AddExecutionStateDependencyError = flexible enum {
    /// Required arguments are either not given or are not valid.
    INVALID_ARGS = 1;
    /// The server is not in a state to handle the request.
    BAD_STATE = 2;
};

/// A listener for activity governor events.
open protocol ActivityGovernorListener {
    /// Called when the activity governor detects a system resume.
    ///
    /// This is only called when the wakeup reason returned by the platform
    /// requires a full system resume.
    /// The server is expected to respond once it has performed the operations
    /// required to keep the system awake, if needed.
    strict OnResume() -> ();

    /// Called before the activity governor initiates a system suspension.
    ///
    /// The server is expected to respond once it has performed the operations
    /// it needs to prepare itself for suspend, if any.
    flexible OnSuspendStarted() -> ();

    /// Called when the activity governor detects a suspend failure.
    ///
    /// The server is expected to respond to this notification. The activity
    /// governor will not attempt to suspend again until it receives the
    /// respond.
    flexible OnSuspendFail() -> ();
};

/// A service for exposing events and power elements managed by the system
/// activity governor (SAG).
///
/// SAG is responsible for managing the execution state of the hardware
/// platform. The hardware platform consists of the components required to
/// execute code on the device. This typically includes the CPU, memory,
/// operating system, and other components required for these components to
/// function (clock trees, power domains, etc.).
@discoverable
open protocol ActivityGovernor {
    // TODO(b/315994898): Provide tokens more granularly once client usage
    // patterns are better understood.

    /// Gets the power elements owned by the activity governor.
    ///
    /// If an error occurs while the server is registering a power element with
    /// the power broker or an error occurs while creating a token for a power
    /// element, then the channel to `ActivityGovernor` will be closed by the
    /// server and no response will be returned.
    flexible GetPowerElements() -> (PowerElements);

    /// Creates a lease that blocks suspension of the hardware platform.
    ///
    /// The hardware platform will not suspend as long as a valid
    /// [`LeaseToken`] exists.
    ///
    /// If an error occurs while creating a token for the wake lease, then the
    /// channel to `ActivityGovernor` will be closed by the server and no
    /// response will be returned.
    flexible TakeWakeLease(struct {
        /// The name of the lease.
        ///
        /// The name is not required to be globally unique.
        name string:fuchsia.power.broker.MAX_ELEMENT_NAME_LEN;
    }) -> (resource struct {
        /// The token that blocks hardware platform suspension.
        token LeaseToken;
    });

    /// Creates a lease that blocks the system from dropping below the Application
    /// Activity 'Active' state. In particular, this blocks suspension of the
    /// hardware platform.
    ///
    /// Additionally, during a given boot, SAG will not suspend the hardware
    /// platform until the first time a lease provided by this method is acquired
    /// and dropped. Due to this effect, clients wishing to block suspension
    /// should default to using [`TakeWakeLease`].
    ///
    /// If an error occurs while creating a token for the activity lease, then the
    /// channel to `ActivityGovernor` will be closed by the server and no
    /// response will be returned.
    flexible TakeApplicationActivityLease(struct {
        /// The name of the lease.
        ///
        /// The name is not required to be globally unique.
        name string:fuchsia.power.broker.MAX_ELEMENT_NAME_LEN;
    }) -> (resource struct {
        /// The token that blocks application activity from dropping below the
        /// 'Active' state.
        token LeaseToken;
    });

    /// Registers a listener for activity governor events.
    ///
    /// If there is an error in registering the listener, then the given
    /// `ActivityGovernorListener` channel will be closed before the response
    /// is sent.
    ///
    /// To unregister, close the `ActivityGovernorListener` channel.
    flexible RegisterListener(resource table {
        /// The client end of the service that receives activity governor events.
        ///
        /// Required.
        1: listener client_end:ActivityGovernorListener;
        // TODO(b/315994974): Handle filtering by wakeup reason.
    }) -> ();
};

/// A service that provides access to CPU-related power elements.
@discoverable
open protocol CpuElementManager {
    /// Gets the assertive dependency token for the CPU power element.
    flexible GetCpuDependencyToken() -> (Cpu);

    /// Adds a dependency from the Execution State power element to the target
    /// power element identified by [`dependency_token`] at [`power_level`].
    ///
    /// Once the Execution State power element is created, future calls will
    /// return [`fuchsia.power.system/AddExecutionStateDependencyError.BAD_STATE`]
    /// and no changes to Execution State dependencies will be made.
    ///
    /// If any required entries in the request are missing, the server will
    /// return [`fuchsia.power.system/AddExecutionStateDependencyError.INVALID_ARGS`].
    flexible AddExecutionStateDependency(resource table {
        /// The assertive dependency token representing the target power element
        /// of the dependency.
        /// Required.
        1: dependency_token fuchsia.power.broker.DependencyToken;
        /// The power level of the target power element.
        /// Required.
        2: power_level fuchsia.power.broker.PowerLevel;
    }) -> () error AddExecutionStateDependencyError;
};
