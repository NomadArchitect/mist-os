// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.fdomain;

// Result from a channel write operation.
type WriteChannelError = strict union {
    1: error Error;
    2: op_errors vector<Error:optional>;
};

// Message received through a channel.
type ChannelMessage = struct {
    data vector<uint8>;
    handles vector<HandleInfo>;
};

// FDomain operations on Channels.
open protocol Channel {
    // Create a new channel in this FDomain and return both its ends.
    flexible CreateChannel(struct {
        handles array<NewHid, 2>;
    }) -> () error Error;

    // Read a message from a channel. This method will fail if the channel is currently being read
    // asynchronously.
    flexible ReadChannel(struct {
        handle Hid;
    }) -> (ChannelMessage) error Error;

    // Write to a channel. Handles are always consumed.
    flexible WriteChannel(struct {
        handle Hid;
        data vector<uint8>;
        handles strict union {
            1: handles vector<Hid>;
            2: dispositions vector<HandleDisposition>;
        };
    }) -> () error WriteChannelError;

    // Starts reading from the given channel. Data is returned via the `ChannelStreamingData` event.
    // That event will occur repeatedly until `ReadChannelStreamingStop` is called for the same handle
    // or the event indicates the handle is closed.
    flexible ReadChannelStreamingStart(struct {
        handle Hid;
    }) -> () error Error;

    // Stop asynchronous reading from the given channel.
    flexible ReadChannelStreamingStop(struct {
        handle Hid;
    }) -> () error Error;

    // Data read asynchronously from a channel.
    flexible -> OnChannelStreamingData(struct {
        handle Hid;
        channel_sent flexible union {
            1: message ChannelMessage;
            2: stopped AioStopped;
        };
    });
};
