// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.fdomain;

// zx.Signals analogue.
//
// This comes in two parts: a type-specific set of signals and general signals.
// The type-specific signals apply only to a particular handle type, e.g. socket
// signals are only for sockets. The general signals exist for every handle
// type, and include HANDLE_CLOSED and the user-defined signals. You can, of
// course use both at once, so for example, you could have a signal mask
// including both an EventSignals waiting for the EVENT_SIGNALLED signal, as
// well as waiting for USER_3 and USER_7.
type Signals = struct {
    typed flexible union {
        1: socket SocketSignals;
        2: channel ChannelSignals;
        3: event_pair EventPairSignals;
        4: event EventSignals;
    }:optional;

    general flexible bits {
        HANDLE_CLOSED = 1; // 1 << 0
        USER_0 = 2; // 1 << 1
        USER_1 = 4; // 1 << 2
        USER_2 = 8; // 1 << 3
        USER_3 = 16; // 1 << 4
        USER_4 = 32; // 1 << 5
        USER_5 = 64; // 1 << 6
        USER_6 = 128; // 1 << 7
        USER_7 = 256; // 1 << 8
    };
};

// zx.Rights analogue.
type Rights = flexible bits : uint32 {
    APPLY_PROFILE = 1; // 1 << 0
    ATTACH_VMO = 2; // 1 << 1
    DESTROY = 4; // 1 << 2
    DUPLICATE = 8; // 1 << 3
    ENUMERATE = 16; // 1 << 4
    EXECUTE = 32; // 1 << 5
    GET_POLICY = 64; // 1 << 6
    GET_PROPERTY = 128; // 1 << 7
    INSPECT = 256; // 1 << 8
    MANAGE_JOB = 512; // 1 << 9
    MANAGE_PROCESS = 1024; // 1 << 10
    MANAGE_SOCKET = 2048; // 1 << 11
    MANAGE_THREAD = 4096; // 1 << 12
    MANAGE_VMO = 8192; // 1 << 13
    MAP = 16384; // 1 << 14
    OP_CHILDREN = 32768; // 1 << 15
    READ = 65536; // 1 << 16
    RESIZE = 131072; // 1 << 17
    SET_POLICY = 262144; // 1 << 18
    SET_PROPERTY = 524288; // 1 << 19
    SIGNAL = 1048576; // 1 << 20
    SIGNAL_PEER = 2097152; // 1 << 21
    TRANSFER = 4194304; // 1 << 22
    WAIT = 8388608; // 1 << 23
    WRITE = 16777216; // 1 << 24
    SAME_RIGHTS = 2147483648; // 1 << 31
};

// zx.ObjType analogue.
type ObjType = flexible enum : uint32 {
    NONE = 0;
    BTI = 1;
    CHANNEL = 2;
    CLOCK = 3;
    DEBUGLOG = 4;
    EVENT = 5;
    EVENTPAIR = 6;
    EXCEPTION = 9;
    FIFO = 11;
    GUEST = 12;
    INTERRUPT = 14;
    IOB = 15;
    IOMMU = 16;
    JOB = 17;
    MSI = 18;
    PAGER = 19;
    PCI_DEVICE = 20;
    PMT = 21;
    PORT = 22;
    PROCESS = 23;
    PROFILE = 24;
    RESOURCE = 25;
    SOCKET = 26;
    STREAM = 27;
    SUSPEND_TOKEN = 28;
    THREAD = 29;
    TIMER = 30;
    VCPU = 31;
    VMAR = 32;
    VMO = 33;
};
