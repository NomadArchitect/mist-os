// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.hardware.spmi;

/// Maximum length of the SPMI device name.
const MAX_SPMI_NAME_LEN uint32 = 64;

/// The maximum number of bytes that can be read or written in a single Extended Long SPMI command.
const MAX_EXTENDED_LONG_TRANSFER_SIZE uint32 = 8;

/// Errors that this driver may return.
type DriverError = flexible enum {
    /// The driver encountered an otherwise unspecified error while performing the operation.
    INTERNAL = 1;

    /// The operation is not implemented, supported, or enabled.
    NOT_SUPPORTED = 2;

    /// An argument is invalid.
    INVALID_ARGS = 3;

    /// The operation failed because the current state of the driver does not allow it, or a
    /// precondition of the operation is not satisfied.
    BAD_STATE = 4;

    /// The device returned a NACK (negative Acknowledgment).
    /// The client may retry the operation after a NACK was sent for instance due to a parity error.
    IO_REFUSED = 5;
};

/// Each instance of `Device` represents a target/secondary SPMI device on a SPMI bus.
/// To support multiple SPMI devices, multiple nodes must be instantiated.
@discoverable
open protocol Device {
    /// Issue one Extended Register Read Long SPMI command to the SPMI device.
    /// Used to read from a 16 bit SPMI register space. Up to 8 bytes can be read at a time.
    /// When successful, it returns `size_bytes` in `data` read from `address` in the device.
    flexible ExtendedRegisterReadLong(struct {
        address uint16;
        size_bytes uint32;
    }) -> (struct {
        data vector<uint8>:MAX_EXTENDED_LONG_TRANSFER_SIZE;
    }) error DriverError;

    /// Issue one Extended Register Write Long SPMI command to the SPMI device.
    /// Used to write to a 16 bit SPMI register space. Up to 8 bytes can be written at a time.
    /// When this command is successful, `data` will be written to `address` in the device.
    flexible ExtendedRegisterWriteLong(struct {
        address uint16;
        data vector<uint8>:MAX_EXTENDED_LONG_TRANSFER_SIZE;
    }) -> () error DriverError;

    /// Get the properties of the SPMI device.
    flexible GetProperties() -> (table {
        /// Unique SPMI target/secondary identifier, corresponds to the SPMI specification sid.
        /// Up to 16 secondaries are identifed with an id from 0 to 15 inclusive.
        ///
        /// Required.
        1: sid uint8;

        /// User friendly string for the device name. If not set, the device name is unknown.
        /// If included, this string must be non-empty.
        ///
        /// Optional.
        2: name string:MAX_SPMI_NAME_LEN;
    });
};

service Service {
    device client_end:Device;
};
