// Copyright 2025 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.net.ndp;

using fuchsia.net;

/// Provides watchers for NDP options observed via router advertisements.
///
/// ## Privacy note
///
/// This protocol provides access to the raw bytes of NDP options, which can
/// contain privileged information such as the hardware addresses of the user's
/// host device or other devices on the network. Thus, care should be taken with
/// where this protocol is made available.
@discoverable
closed protocol RouterAdvertisementOptionWatcherProvider {
    /// Constructs a new watcher that yields NDP options received from router
    /// advertisement messages as described in [RFC 4861 section
    /// 4.2](https://datatracker.ietf.org/doc/html/rfc4861#section-4.2).
    strict NewRouterAdvertisementOptionWatcher(resource struct {
        option_watcher server_end:OptionWatcher;
        params RouterAdvertisementOptionWatcherParams;
    });
};

/// Parameters for a router advertisement option watcher.
type RouterAdvertisementOptionWatcherParams = table {
    /// The set of option types that should be yielded on the watcher.
    ///
    /// Indicates all option types should be yielded if absent.
    1: interest_types vector<OptionType>:MAX_NUM_OPTION_TYPES;
    /// If set, only options received via the specified interface will be
    /// yielded.
    ///
    /// Indicates options received via all interfaces should be yielded if
    /// absent.
    2: interest_interface_id fuchsia.net.InterfaceId;
};

/// The identifier of an NDP option type, aka the "type" field in the NDP option
/// as described in [RFC 4861 section
/// 4.6](https://datatracker.ietf.org/doc/html/rfc4861#section-4.6).
alias OptionType = uint8;

/// The maximum number of distinct option types that can be specified for
/// watcher interest.
const MAX_NUM_OPTION_TYPES uint16 = 256;

/// The maximum number of options that can be yielded in a single watcher batch.
const MAX_OPTION_BATCH_SIZE uint8 = 16;

/// An NDP option watcher.
closed protocol OptionWatcher {
    /// Probes for completion of watcher construction.
    ///
    /// Returns once the watcher has been registered. Any NDP options received
    /// in router advertisements after this returns are guaranteed to be
    /// observed by the watcher, assuming that they meet the watcher's interest
    /// criteria and that the watcher does not lag too far behind in consuming
    /// yielded options.
    strict Probe() -> ();

    /// The hanging get method for receiving batches of NDP options.
    ///
    /// The batching behavior is left as an implementation detail. Not all
    /// options in a batch are guaranteed to have been received within the same
    /// NDP message, from the same source, or via the same interface.
    ///
    /// Clients should only have one call of this method at a time; a second
    /// call to this method while a call is already pending will cause the
    /// server end of the protocol to be closed.
    ///
    /// The server may at its discretion drop options instead of yielding them
    /// if the watcher takes too long to request them via `WatchOptions`.
    strict WatchOptions() -> (struct {
        /// A batch of yielded options.
        options vector<OptionWatchEntry>:MAX_OPTION_BATCH_SIZE;
        /// A count of the number of options dropped since the last time
        /// `WatchOptions` was called (or since the watcher was created if this
        /// is the first time it was called).
        dropped uint32;
    });
};

/// The maximum possible length in bytes of an NDP option body (excluding the
/// type and length bytes).
// Computed as `u8::MAX * 8 - 2`.
const MAX_OPTION_BODY_LENGTH uint16 = 2038;

/// An entry representing a single option received in an NDP message.
///
/// The `option_type` and `body` are not guaranteed to be validated in any way
/// other than the `body` conforming to length requirements as specified in [RFC
/// 4861 section
/// 4.6](https://datatracker.ietf.org/doc/html/rfc4861#section-4.6).
type OptionWatchEntry = table {
    /// The interface on which the NDP message containing the option was
    /// received.
    ///
    /// Always present.
    1: interface_id fuchsia.net.InterfaceId;
    /// The source address of the IPv6 packet containing the NDP message in
    /// which the option was received.
    ///
    /// Always present.
    2: source_address fuchsia.net.Ipv6Address;
    /// The NDP option type.
    ///
    /// Always present.
    3: option_type OptionType;
    /// The body of the NDP option.
    ///
    /// The raw bytes of the NDP option excluding the leading two bytes for the
    /// type and the length according to [RFC 4861 section
    /// 4.6](https://datatracker.ietf.org/doc/html/rfc4861#section-4.6). The
    /// body is padded such that if it were prepended with a type octet and a
    /// length octet to match the format described in RFC 4861 section 4.6, its
    /// length would be a multiple of 8 octets (as required by the RFC).
    ///
    /// Always present.
    4: body vector<uint8>:MAX_OPTION_BODY_LENGTH;
};
