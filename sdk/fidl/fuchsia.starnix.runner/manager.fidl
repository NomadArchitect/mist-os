// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
@available(added=HEAD)
library fuchsia.starnix.runner;

using zx;

@discoverable
open protocol Manager {
    /// Suspends all the running Starnix kernels.
    /// Returns after all processes have been suspended.
    flexible Suspend(table {}) -> ();

    /// Resumes all suspended Starnix kernels.
    flexible Resume(table {});

    /// Suspends the container running in `job`.
    ///
    /// The call will return successfully when `wake_event` has been signaled. Returns
    /// an error if `wake_locks` is signaled at the end of suspension, or an error is
    /// encountered when suspending the container's processes.
    flexible SuspendContainer(resource table {
        // The job of the container to suspend.
        1: container_job zx.Handle:JOB;
        // The event that is used to signal whether or not there are any active wake locks in the container.
        2: wake_locks zx.Handle:EVENTPAIR;
        // The event that will be signaled when the container should resume.
        3: wake_event zx.Handle:EVENT;
    }) -> () error SuspendError;
};

type SuspendError = flexible enum {
    // A wake lock was acquired during the suspend operation.
    WAKE_LOCKS_EXIST = 1;
    // Failed to suspend all the processes in the provided container's job.
    SUSPEND_FAILURE = 2;
};
