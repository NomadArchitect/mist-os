// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.media;

using fuchsia.media.audio;

/// Usage annotating the purpose of the stream being used to render audio.
/// An AudioRenderer's usage cannot be changed after creation. The
/// AudioRenderUsage is used by audio policy to dictate how audio streams
/// interact with each other.
// TODO(https://fxbug.dev/384934089): deprecate and remove |AudioRenderUsage|
type AudioRenderUsage = strict enum {
    /// Stream is intended to be used for ambient or background sound. Streams
    /// that can be interrupted without consequence should use this.
    BACKGROUND = 0;

    /// Stream is intended to be used for normal functionality. Streams that
    /// are part of normal functionality should use this.
    MEDIA = 1;

    /// Stream is intended to interrupt any ongoing function of the device.
    /// Streams that are used for interruptions like notifications should use
    /// this.
    INTERRUPTION = 2;

    /// Stream is for interaction with a system agent. This should be used
    /// in response to a user initiated trigger.
    SYSTEM_AGENT = 3;

    /// Stream is intended to be used for some form of real time user to user
    /// communication. Voice/Video chat should use this.
    COMMUNICATION = 4;
};
const RENDER_USAGE_COUNT uint8 = 5;

/// Usage annotating the purpose of the stream being used to render audio. An AudioRenderer's
/// usage cannot be changed after creation. The AudioRenderUsage2 value is used by audio policy
/// to dictate how audio streams interact with each other. This enum expands the original (strict)
/// enum |AudioRenderUsage| with additional stream types.
@available(added=26)
type AudioRenderUsage2 = flexible enum : uint32 {
    /// Stream is intended to be used for ambient or background sound. Streams
    /// that can be interrupted without consequence should use this.
    BACKGROUND = 0;

    /// Stream is intended to be used for normal functionality. Streams that
    /// are part of normal functionality should use this.
    MEDIA = 1;

    /// Stream is intended to interrupt any ongoing function of the device.
    /// Streams that are used for interruptions like notifications should use
    /// this.
    INTERRUPTION = 2;

    /// Stream is for interaction with a system agent. This should be used
    /// in response to a user initiated trigger.
    SYSTEM_AGENT = 3;

    /// Stream is intended to be used for some form of real time user to user
    /// communication. Voice/Video chat should use this.
    COMMUNICATION = 4;

    /// Stream is intended to be used for accessibility or other non-system-
    /// agent speech output, such as screen reader TTS.
    ACCESSIBILITY = 5;
};
@available(added=26)
const RENDER_USAGE2_COUNT uint8 = 6;

/// Usages annotating the purpose of the stream being used to capture audio. The
/// AudioCaptureUsage is used by audio policy to dictate how audio streams
/// interact with each other.
// TODO(https://fxbug.dev/384934089): deprecate and remove |AudioCaptureUsage|
type AudioCaptureUsage = strict enum {
    /// Stream is used to capture audio while in the background. These streams
    /// may be active at any the time and are considered privileged.
    /// Example: Listening for Hotwords
    BACKGROUND = 0;

    /// Stream is intended to be used for normal capture functionality. Streams
    /// that are used for audio capture while the stream creator is in the
    /// foreground should use this.
    /// Example: Voice Recorder
    FOREGROUND = 1;

    /// Stream is for interaction with a system agent. This should only be used
    /// once a user has signalled their intent to have the interaction with an
    /// interested party.
    /// Examples: Assistant, Siri, Alexa
    SYSTEM_AGENT = 2;

    /// Stream is intended to be used for some form of real time user to user
    /// communication. Voice/Video chat should use this.
    COMMUNICATION = 3;
};
const CAPTURE_USAGE_COUNT uint8 = 4;

/// Usages annotating the purpose of the stream being used to capture audio. The
/// AudioCaptureUsage is used by audio policy to dictate how audio streams
/// interact with each other.
@available(added=26)
type AudioCaptureUsage2 = flexible enum : uint32 {
    /// Stream is used to capture audio while in the background. These streams may be active at
    /// any the time and are considered privileged.
    /// Example: Listening for Hotwords
    BACKGROUND = 0;

    /// Stream is intended to be used for normal capture functionality. Streams that are used for
    /// audio capture while the stream creator is in the foreground should use this.
    /// Example: Voice Recorder
    FOREGROUND = 1;

    /// Stream is for interaction with a system agent. This should only be used once a user has
    /// signalled their intent to have the interaction with an interested party.
    /// Examples: Assistant, Siri, Alexa
    SYSTEM_AGENT = 2;

    /// Stream is intended to be used for some form of real time user to user communication.
    /// Voice/Video chat should use this.
    COMMUNICATION = 3;
};
@available(added=26)
const CAPTURE_USAGE2_COUNT uint8 = 4;

/// A reasonable upper-bound for the maximum number of render or capture usages. Use this value in
/// FIDL APIs (e.g. for max vector size), instead of RENDER_USAGE2_COUNT or CAPTURE_USAGE2_COUNT
/// directly. This way, an increase in these consts will not cause an ABI-breaking change.
@available(added=26)
const MAX_USAGE_COUNT uint8 = 8;

/// The behaviors applied to streams when multiple are active.
@available(replaced=26)
type Behavior = strict enum {
    /// Mix the streams.
    NONE = 0;

    /// Apply a gain to duck the volume of one of the streams. (-14.0db)
    DUCK = 1;

    /// Apply a gain to mute one of the streams. (-160.0db)
    MUTE = 2;
};
@available(added=26)
type Behavior = flexible enum : uint32 {
    /// Mix the streams.
    NONE = 0;

    /// Apply a gain to duck the volume of one of the streams. (-14.0db)
    DUCK = 1;

    /// Apply a gain to mute one of the streams. (-160.0db)
    MUTE = 2;
};

// TODO(https://fxbug.dev/384934089): deprecate and remove |AudioRenderUsage| (and |Usage|)
type Usage = strict union {
    1: render_usage AudioRenderUsage;
    2: capture_usage AudioCaptureUsage;
};

@available(added=26)
type Usage2 = flexible union {
    1: render_usage AudioRenderUsage2;
    2: capture_usage AudioCaptureUsage2;
};

@discoverable(server="platform")
closed(removed=26) open(added=26) protocol AudioCore {
    /// Creates an AudioRenderer which outputs audio to the default device.
    strict CreateAudioRenderer(resource struct {
        audio_out_request server_end:AudioRenderer;
    });

    /// Creates an AudioCapturer according to the given requirements.
    ///
    /// `pcm_stream_type` sets the stream type of the stream to be delivered.
    /// It causes the source material to be reformatted/resampled if needed
    /// in order to produce the requested stream type.
    ///
    /// `usage` is used by Fuchsia to make decisions about user experience.
    /// See `AudioCaptureUsage` for more details.
    ///
    /// `configuration` must be initialized to a variant, or no capturer
    /// can be created.
    ///
    strict CreateAudioCapturerWithConfiguration(resource struct {
        stream_type AudioStreamType;
        configuration AudioCapturerConfiguration;
        audio_capturer_request server_end:AudioCapturer;
    });

    /// Creates an AudioCapturer which either captures from the current default
    /// audio input device, or loops-back from the current default audio output
    /// device based on value passed for the loopback flag.
    strict CreateAudioCapturer(resource struct {
        loopback bool;
        audio_in_request server_end:AudioCapturer;
    });

    // By default, reading and writing device settings files is enabled. This
    // method (which has impact across the entire audio subsystem) allows a test
    // client to temporarily disable, then later enable, that reading/writing.
    @available(deprecated=15, removed=26)
    strict EnableDeviceSettings(struct {
        enabled bool;
    });

    /// Sets the gain for this render usage. By default, all render usages are set to Unity (0 db).
    // TODO(https://fxbug.dev/384934089): deprecate and remove |AudioRenderUsage|
    @available(deprecated=26, note="Use SetRenderUsageGain2 and AudioRenderUsage2")
    strict SetRenderUsageGain(struct {
        usage AudioRenderUsage;
        gain_db float32;
    });

    /// Sets the gain for this render usage. By default, all render usages are set to Unity (0 db).
    @available(added=26)
    flexible SetRenderUsageGain2(struct {
        usage AudioRenderUsage2;
        gain_db float32;
    });

    /// Sets gain for this capture usage. By default, all capture usages are set to Unity (0 db).
    // TODO(https://fxbug.dev/384934089): deprecate and remove |AudioCaptureUsage|
    @available(deprecated=26, note="Use SetCaptureUsageGain2 and AudioCaptureUsage2")
    strict SetCaptureUsageGain(struct {
        usage AudioCaptureUsage;
        gain_db float32;
    });

    /// Sets gain for this capture usage. By default, all capture usages are set to Unity (0 db).
    @available(added=26)
    flexible SetCaptureUsageGain2(struct {
        usage AudioCaptureUsage2;
        gain_db float32;
    });

    /// Binds to a volume control protocol for the given usage.
    // TODO(https://fxbug.dev/384934089): deprecate and remove |Usage|
    @available(deprecated=26, note="Use BindUsageVolumeControl2 and AudioRenderUsage2")
    strict BindUsageVolumeControl(resource struct {
        usage Usage;
        volume_control server_end:fuchsia.media.audio.VolumeControl;
    });

    /// Binds to a volume control protocol for the given usage.
    @available(added=26)
    flexible BindUsageVolumeControl2(resource struct {
        usage Usage2;
        volume_control server_end:fuchsia.media.audio.VolumeControl;
    });

    /// Queries the volume percentage [0, 1] that maps to a `gain_db` value for a particular
    /// `usage`. This is the same mapping as used by the VolumeControl from
    /// `BindUsageVolumeControl`.
    // TODO(https://fxbug.dev/384934089): deprecate and remove |Usage|
    @available(deprecated=26, note="Use GetVolumeFromDb2 and AudioRenderUsage2")
    strict GetVolumeFromDb(struct {
        usage Usage;
        gain_db float32;
    }) -> (struct {
        volume float32;
    });

    /// Queries the volume percentage [0, 1] that maps to a `gain_db` value for a particular
    /// `usage`. This is the same mapping as used by the VolumeControl from
    /// `BindUsageVolumeControl`.
    @available(added=26)
    flexible GetVolumeFromDb2(struct {
        usage Usage2;
        gain_db float32;
    }) -> (struct {
        volume float32;
    });

    /// Queries the decibel value that maps to a volume percentage [0, 1] for a particular `usage`.
    /// This is the same mapping as used by the VolumeControl from `BindUsageVolumeControl`.
    // TODO(https://fxbug.dev/384934089): deprecate and remove |Usage|
    @available(deprecated=26, note="Use GetDbFromVolume2 and AudioRenderUsage2")
    strict GetDbFromVolume(struct {
        usage Usage;
        volume float32;
    }) -> (struct {
        gain_db float32;
    });

    /// Queries the decibel value that maps to a volume percentage [0, 1] for a particular `usage`.
    /// This is the same mapping as used by the VolumeControl from `BindUsageVolumeControl`.
    @available(added=26)
    flexible GetDbFromVolume2(struct {
        usage Usage2;
        volume float32;
    }) -> (struct {
        gain_db float32;
    });

    /// Sets how audio_core handles interactions of multiple active streams simultaneously. If
    /// streams of Usage `active` are processing audio, and streams of Usage `affected` are as well,
    /// the Behavior specified will be applied to the streams of Usage `affected`.
    // TODO(https://fxbug.dev/384934089): deprecate and remove |Usage|
    @available(deprecated=26, note="Use SetInteraction2 and AudioRenderUsage2")
    strict SetInteraction(struct {
        active Usage;
        affected Usage;
        behavior Behavior;
    });

    /// Sets how audio_core handles interactions of multiple active streams simultaneously. If
    /// streams of Usage `active` are processing audio, and streams of Usage `affected` are as well,
    /// the Behavior specified will be applied to the streams of Usage `affected`.
    @available(added=26)
    flexible SetInteraction2(struct {
        active Usage2;
        affected Usage2;
        behavior Behavior;
    });

    /// Re-initializes the set of rules that are currently governing the interaction of streams in
    /// audio_core. The default behavior is 'NONE'.
    strict ResetInteractions();

    /// Re-loads the platform policy configuration. Falls back to a default config if the platform
    /// does not provide a config.
    strict LoadDefaults();
};

// Placeholder for routing policies.
@available(deprecated=26)
type AudioOutputRoutingPolicy = strict enum {
    // AudioRenderers are always connected to all audio outputs which currently
    // in the plugged state (eg; have a connector attached to them)
    ALL_PLUGGED_OUTPUTS = 0;

    // AudioRenderers are only connected to the output stream which most
    // recently entered the plugged state. AudioRenderers move around from
    // output to output as streams are published/unpublished and become
    // plugged/unplugged.
    //
    // This is the default initial setting for audio output routing.
    LAST_PLUGGED_OUTPUT = 1;
};
